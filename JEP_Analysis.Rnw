\documentclass[letterpaper]{article}
\usepackage[a4paper, total={7in, 8in}]{geometry}

\usepackage{xcolor}
\usepackage{Sweavel}
\usepackage{graphicx}
\def\Sweavesize{\normalsize}
% Uncomment some of the following to use some alternatives:
\def\Rcolor{\color{black}}
\def\Routcolor{\color{blue}}
\def\Rcommentcolor{\color{blue}}
\definecolor{babyblueeyes}{rgb}{0.74, 0.83, 0.95}

% To change background color or R code and/or output, use e.g.:
\def\Rbackground{\color{babyblueeyes}}
\def\Routbackground{\color[gray]{.8}}

% To use rgb specifications use \color[rgb]{ , , }
% To use gray scale use e.g. \color[gray]{0.5}
% If you change any of these after the first chunk is produced, the
% changes will have effect only for the next chunk.

\title{JEP LMC: Lexical Retrieval Manuscript Analyses}
\author{Abhilasha Kumar}

\begin{document}
\SweaveOpts{concordance=FALSE}

 \maketitle

\section{Reading the File}

<<echo=FALSE>>=
j <- read.csv("MainJulieagg_5studies.csv", header = TRUE, sep = ",")
#removing 2 subjects to maintain counterbalancing
j <- subset(j, j$value.Subject!= 198 & j$value.Subject!= 95)
j_agg <-j[, c(2,3,4, 5, 18,19,20,21)]
#wide to long conversion
library(tidyr)
j_agg_long <- j_agg %>%
  gather(PrimeCondition, Accuracy, value.racc, value.pacc, value.bacc, value.uacc)

#ordered by subject
final_j <- j_agg_long[order(j_agg_long$value.Subject),]

#changing chars to factors
colnames(final_j) = c("AgeGroup", "Subject", "StudyNo", "PrimeInstruction",
                      "PrimeCondition", "Accuracy")
final_j$Subject <- as.factor(final_j$Subject)
final_j$PrimeCondition <- as.factor(final_j$PrimeCondition)
final_j$AgeGroup = as.factor(final_j$AgeGroup)

final_j$PrimeCondition = sub("value.bacc", "Both", final_j$PrimeCondition)
final_j$PrimeCondition = sub("value.racc", "Related", final_j$PrimeCondition)
final_j$PrimeCondition = sub("value.pacc", "Phonological", final_j$PrimeCondition)
final_j$PrimeCondition = sub("value.uacc", "Unrelated", final_j$PrimeCondition)
final_j$PrimeCondition = as.factor(as.character(final_j$PrimeCondition))

### MCQ DATA
j_mcq <-j[, c(2,3,4, 5, 70:89)] 
j_mcq_big = j[,c(3,22:25)]

#wide to long conversion
library(tidyr)
j_mcq_long <- j_mcq %>%
  gather(PrimeCondition, Proportion, 
         value.prop_r_r, value.prop_r_p, value.prop_r_b, value.prop_r_u,
         value.prop_p_r, value.prop_p_p, value.prop_p_b, value.prop_p_u,
         value.prop_b_r, value.prop_b_p, value.prop_b_b, value.prop_b_u,
         value.prop_u_r, value.prop_u_p, value.prop_u_b, value.prop_u_u)

 j_overall_mcq = gather(data = j_mcq_big, PrimeCondition, MCQAcc, 
                  value.rmcq, value.pmcq, value.bmcq, value.umcq)

#ordered by subject
final_mcq <- j_mcq_long[order(j_mcq_long$value.Subject),]
final_mcq <- final_mcq[, -c(5:8)]

#Separating PrimeCondition and ChosenPrime
final_mcq$PrimeCondition = sub("*...........", "", final_mcq$PrimeCondition)
final_mcq = separate(data = final_mcq, PrimeCondition, c("PrimeType", "ChosenPrime"), sep = "_" )

j_overall_mcq$PrimeCondition <- sub("*......", "", j_overall_mcq$PrimeCondition)
j_overall_mcq$PrimeCondition <- sub("mcq", "", j_overall_mcq$PrimeCondition)
j_overall_mcq <- j_overall_mcq[order(j_overall_mcq$value.Subject),]

#renaming columns
colnames(j_overall_mcq) = c("Subject", "PrimeType", "MCQAcc")
colnames(final_mcq) = c("AgeGroup", "Subject", "StudyNo", "PrimeInstruction", 
                        "PrimeType", "ChosenPrime", "Proportion")

#dataset is in order!
##Note: final_mcq_overall contains all MCQ errors + overall MCQ accuracy for each subject
## in each prime condition

final_mcq = merge(final_mcq, j_overall_mcq, by = c("Subject", "PrimeType"))
final_mcq <- final_mcq[order(final_mcq$Subject),]


final_mcq$AgeGroup <- as.factor(as.character(final_mcq$AgeGroup))
final_mcq$Subject <- as.factor(as.character(final_mcq$Subject))
final_mcq$StudyNo <- as.factor(as.character(final_mcq$StudyNo))
final_mcq$PrimeInstruction <- as.factor(as.character(final_mcq$PrimeInstruction))
final_mcq$PrimeType <- as.factor(as.character(final_mcq$PrimeType))
final_mcq$ChosenPrime <- as.factor(as.character(final_mcq$ChosenPrime))

### STATE DATA


statedata <- read.csv("MainJulieagg_5studies.csv", header = TRUE, sep = ",")

statedata <- subset(statedata, statedata$value.Subject!= 198 & statedata$value.Subject!= 95)
statedata_agg <-statedata[, c(2,3,4, 5, 90, 91, 92, 93)] 

#wide to long conversion
library(tidyr)
statedata_agg_long <- statedata_agg %>%
  gather(State, Trials, value.know, value.dontknow, value.other, value.TOT)

#ordered by subject
final_statedata <- statedata_agg_long[order(statedata_agg_long$value.Subject),]

final_statedata$State = sub("*......", "", final_statedata$State)

#dataset is in order!
colnames(final_statedata) = c("AgeGroup", "Subject", "StudyNo", "PrimeInstruction", 
                        "State", "Trials")

## also need this split across prime type

library(tidyr)
library(dplyr)
statedata_agg_primetype = statedata[, c(2,3,4, 5, 26:41)] 
statedata_primetype_long <- statedata_agg_primetype %>%
  gather(StatePrime, Trials, 
         value.r_know, value.r_dontknow, value.r_other, value.r_TOT,
         value.p_know, value.p_dontknow, value.p_other, value.p_TOT,
         value.b_know, value.b_dontknow, value.b_other, value.b_TOT,
         value.u_know, value.u_dontknow, value.u_other, value.u_TOT) %>%
  separate(StatePrime, c('Prime', 'State'), sep = "_") %>%
  arrange(value.Subject)

statedata_primetype_long$Prime = sub("*......", "", statedata_primetype_long$Prime)
colnames(statedata_primetype_long) = c("AgeGroup", "Subject", "StudyNo", "PrimeInstruction",
                                       "PrimeCondition", "State", "Trials")
final_statedata$AgeGroup <- as.factor(final_statedata$AgeGroup)
final_statedata$Subject <- as.factor(final_statedata$Subject)
final_statedata$StudyNo <- as.factor(final_statedata$StudyNo)
final_statedata$PrimeInstruction <- as.factor(final_statedata$PrimeInstruction)
final_statedata$State <- as.factor(final_statedata$State)

### STATE DATA SPLIT BY TARGET ACCURACY

data = read.csv("Julie_Main5studies.csv", header = TRUE, sep = ",")
library(dplyr)
data_state_acc = group_by(data, Subject, AgeGroup, 
                          StudyNo, Accuracy, Question.RESP)%>%
  summarise(Trials = n())

exp_1_state_acc = data_state_acc %>% filter(StudyNo == "2" | StudyNo == "4")
exp_2_state_acc = data_state_acc %>% filter(StudyNo == "5" | StudyNo == "6")
exp_3_state_acc = data_state_acc %>% filter(StudyNo == "1")


data_stateprime_acc = group_by(data, Subject, AgeGroup, 
                          StudyNo, PrimeCondition, Accuracy, Question.RESP)%>%
  summarise(Trials = n())

data_stateprime_acc2 = group_by(data, Subject, AgeGroup, 
                          StudyNo,  Question.RESP, PrimeCondition, Accuracy)%>%
  summarise(Trials = n())

exp_1_stateprime_acc = data_stateprime_acc %>% filter(StudyNo == "2" | StudyNo == "4")
exp_2_stateprime_acc = data_stateprime_acc %>% filter(StudyNo == "5" | StudyNo == "6")
exp_3_stateprime_acc = data_stateprime_acc %>% filter(StudyNo == "1")

@



\section {Percent State Analysis}

<<>>=
j <- read.csv("MainJulieagg_5studies.csv", header = TRUE, sep = ",")
j <- subset(j, j$value.Subject!= 198 & j$value.Subject!= 95)

#j_statepercent = j[,c(2,3,4,5,104:119)] # use for state percents

j_statepercent = j[,c(2,3,4,5,120:135)] # use for prime percents
j_statepercent$value.Subject = as.factor(j_statepercent$value.Subject)

library(tidyr)
library(dplyr)

# use comments for state wise percent
# statepercent <- j_statepercent %>%
#   gather(StatePrime, Percent, 
#          know_r_percent, know_p_percent,know_b_percent, know_u_percent,
#          dontknow_r_percent, dontknow_p_percent,
#          dontknow_b_percent,dontknow_u_percent,
#          other_r_percent,other_p_percent,other_b_percent,other_u_percent,
#          TOT_r_percent, TOT_p_percent, TOT_b_percent, TOT_u_percent) %>%
#   separate(StatePrime, c('State', 'Prime'), sep = "_") %>%
#   arrange(value.Subject)

# use below for prime wise percent
statepercent <- j_statepercent %>%
  gather(StatePrime, Percent, 
         r_know_new, r_dontknow_new,r_other_new, r_TOT_new,
         p_know_new, p_dontknow_new,p_other_new, p_TOT_new,
         b_know_new, b_dontknow_new,b_other_new, b_TOT_new,
         u_know_new, u_dontknow_new,u_other_new, u_TOT_new) %>%
  separate(StatePrime, c('Prime', 'State'), sep = "_") %>%
  arrange(value.Subject)

# state wise percent
# colnames(statepercent) = c("AgeGroup", "Subject", "StudyNo", "PrimeInstruction", "State","PrimeCondition", "Percent")

## prime wise percent
colnames(statepercent) = c("AgeGroup", "Subject", "StudyNo", "PrimeInstruction", "PrimeCondition", "State", "Percent")

statepercent$AgeGroup <- as.factor(statepercent$AgeGroup)
statepercent$Subject <- as.factor(statepercent$Subject)
statepercent$StudyNo <- as.factor(statepercent$StudyNo)
statepercent$PrimeInstruction <- as.factor(statepercent$PrimeInstruction)
statepercent$PrimeCondition <- as.factor(statepercent$PrimeCondition)
statepercent$State <- as.factor(statepercent$State)
statepercent$Percent <- as.numeric(as.character(statepercent$Percent))

for(i in 1:nrow(statepercent)){
  if(is.na(statepercent[i,7])) {
    print(i)
    statepercent[i,7] = 0
  }
  else
    statepercent[i,7] = statepercent[i,7]
}

statepercent_exp1 = statepercent %>% filter(StudyNo == '2' | StudyNo == '4')
statepercent_exp2 = statepercent %>% filter(StudyNo == '5' | StudyNo == '6')
statepercent_exp3 = statepercent %>% filter(StudyNo == '1')

@

\subsection {Experiment 1 }

\subsubsection {MANOVA}

<<>>=
## we want to do a manova on our data for exp 1
## first need to convert each state to wide format 
e1_data_wide <- spread(statepercent_exp1, State, Percent)

## grouping

e1_wide_agg = group_by(e1_data_wide, AgeGroup, PrimeCondition) %>%
  summarise_at(vars(dontknow, know, other, TOT), mean)

output1 <- manova(cbind(dontknow, know,
          other, TOT)~AgeGroup*PrimeCondition, data = e1_data_wide )
summary.aov(output1)
@

\subsubsection {overall}

<<>>=
e1_all_aov = aov(data = statepercent_exp1, 
                          Percent ~ AgeGroup*State*PrimeCondition + 
                        Error(Subject/(State*PrimeCondition)))
summary(e1_all_aov)
@

\subsubsection {know}

<<>>=
e1_know = statepercent_exp1 %>% filter(State == "know")
e1_know_aov = aov(data = e1_know, 
                          Percent ~ AgeGroup*PrimeCondition + 
                        Error(Subject/PrimeCondition))
summary(e1_know_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e1_know_aov, 
                                   c("AgeGroup","PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = "AgeGroup")
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

target_p = e1_know %>% filter(PrimeCondition == "p")
target_r = e1_know %>% filter(PrimeCondition == "r")
target_b = e1_know %>% filter(PrimeCondition == "b")
target_u = e1_know %>% filter(PrimeCondition == "u")

t.test(target_u$Percent, target_r$Percent, paired = TRUE)
t.test(target_u$Percent, target_b$Percent, paired = TRUE)
t.test(target_u$Percent, target_p$Percent, paired = TRUE)

## old diff in know semantic and know unrelated

old_semantic = e1_know %>% filter(PrimeCondition == "r" & AgeGroup == "Old")
old_unrel = e1_know %>% filter(PrimeCondition == "u" & AgeGroup == "Old")

t.test(old_semantic$Percent, old_unrel$Percent, paired = TRUE)
@
\subsubsection {dont know}

<<>>=
e1_dontknow = statepercent_exp1 %>% filter(State == "dontknow")
e1_dontknow_aov = aov(data = e1_dontknow, 
                          Percent ~ AgeGroup*PrimeCondition + 
                        Error(Subject/PrimeCondition))
summary(e1_dontknow_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e1_dontknow_aov, 
                                   c("AgeGroup","PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = "AgeGroup")
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

target_p = e1_dontknow %>% filter(PrimeCondition == "p")
target_r = e1_dontknow %>% filter(PrimeCondition == "r")
target_b = e1_dontknow %>% filter(PrimeCondition == "b")
target_u = e1_dontknow %>% filter(PrimeCondition == "u")

t.test(target_u$Percent, target_r$Percent, paired = TRUE)
t.test(target_u$Percent, target_b$Percent, paired = TRUE)
t.test(target_u$Percent, target_p$Percent, paired = TRUE)

target_y = e1_dontknow %>% filter(AgeGroup == "Young")
target_o = e1_dontknow %>% filter(AgeGroup == "Old")

t.test(target_y$Percent, target_o$Percent, paired = FALSE)

@

\subsubsection {other}
<<>>=

e1_other = statepercent_exp1 %>% filter(State == "other")
e1_other_aov = aov(data = e1_other, 
                          Percent ~ AgeGroup*PrimeCondition + 
                        Error(Subject/PrimeCondition))
summary(e1_other_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e1_other_aov, 
                                   c("AgeGroup","PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = "AgeGroup")
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.1 ))



target_y = e1_other %>% filter(AgeGroup == "Young")
target_o = e1_other %>% filter(AgeGroup == "Old")

t.test(target_y$Percent, target_o$Percent, paired = FALSE)
@

\subsubsection{ TOT}
<<>>=

e1_TOT = statepercent_exp1 %>% filter(State == "TOT")
e1_TOT_aov = aov(data = e1_TOT, 
                          Percent ~ AgeGroup*PrimeCondition + 
                        Error(Subject/PrimeCondition))
summary(e1_TOT_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e1_TOT_aov, 
                                   c("AgeGroup","PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = "AgeGroup")
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

target_o_u = e1_TOT %>% filter(AgeGroup == "Old" & PrimeCondition == "u")
target_o_p = e1_TOT %>% filter(AgeGroup == "Old" & PrimeCondition == "p")
target_o_b = e1_TOT %>% filter(AgeGroup == "Old" & PrimeCondition == "b")
target_o_r = e1_TOT %>% filter(AgeGroup == "Old" & PrimeCondition == "r")

t.test(target_o_u$Percent, target_o_p$Percent, paired = TRUE)
t.test(target_o_u$Percent, target_o_r$Percent, paired = TRUE)
t.test(target_o_u$Percent, target_o_b$Percent, paired = TRUE)

target_u = e1_TOT %>% filter(PrimeCondition == "u")
target_p = e1_TOT %>% filter(PrimeCondition == "p")
target_b = e1_TOT %>% filter(PrimeCondition == "b")
target_r = e1_TOT %>% filter(PrimeCondition == "r")

t.test(target_u$Percent, target_r$Percent, paired = TRUE)
t.test(target_u$Percent, target_b$Percent, paired = TRUE)
t.test(target_u$Percent, target_p$Percent, paired = TRUE)

t.test(target_p$Percent, target_r$Percent, paired = TRUE)
t.test(target_b$Percent, target_r$Percent, paired = TRUE)

@

\subsubsection{plot}
<<fig=TRUE>>=
exp1_statepercent= Rmisc::summarySE(statepercent_exp1, 
                        measurevar = "Percent",
                        groupvars = c("State", "AgeGroup", "PrimeCondition"))

exp1_statepercent$RetrievalState = factor(exp1_statepercent$State,levels(exp1_statepercent$State)[c(2,1,3,4)])


exp1_statepercent$AgeGroup = factor(exp1_statepercent$AgeGroup,levels(exp1_statepercent$AgeGroup)[c(2,1)])

#write.csv(exp1_statepercent, file = "exp1_statepercent.csv")
exp1_statepercent = read.csv("exp1_statepercent.csv", sep = ",",
                             header = TRUE)

exp1_statepercent$AgeGroup = factor(exp1_statepercent$AgeGroup,levels(exp1_statepercent$AgeGroup)[c(2,1)])
library(ggplot2)
library(ggthemes)
e1_percentplot = exp1_statepercent %>% 
  mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
                    labels = c("Both", "Phono", 
                               "Semantic", "Unrelated")),
   R = factor(RetrievalState, levels = unique(RetrievalState),
                                labels = c( "1: Know","2: Dont Know",
                                            "3:Other", "4: TOT")))%>%
  
ggplot(aes(x = PrimeType, y = Percent, 
           group = AgeGroup, fill = AgeGroup))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, 
          color= "black")+
  geom_errorbar(aes(ymin=Percent - se, ymax=Percent + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  facet_wrap(~R, nrow =1)+
  scale_fill_manual(values = c( "royalblue4", "slategray1"))+
    xlab("") + ylab("") + 
  ggtitle("E1: Young and Old Adults (No Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
                  axis.text.x = element_text(size = rel(1)),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
e1_percentplot

@

\subsubsection {Know Only}

<<fig=TRUE>>=
exp1_statepercent_know = exp1_statepercent %>% filter(RetrievalState == "know")

e1_percentplot_know = exp1_statepercent_know %>% 
  mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
                    labels = c("Both", "Phono", 
                               "Semantic", "Unrelated")))%>%
ggplot(aes(x = PrimeType, y = Percent, 
           group = AgeGroup, fill = AgeGroup))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, 
          color= "black")+
  geom_errorbar(aes(ymin=Percent - se, ymax=Percent + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  scale_fill_manual(values = c( "royalblue4", "slategray1"))+
    xlab("") + ylab("") + 
  ggtitle("E1: Young and Old Adults (No Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
e1_percentplot_know
@



\subsection {Experiment 2 }

\subsubsection {MANOVA}

<<>>=
## we want to do a manova on our data for exp 1
## first need to convert each state to wide format 
e2_data_wide <- spread(statepercent_exp2, State, Percent)

## grouping

e1_wide_agg = group_by(e2_data_wide, AgeGroup, PrimeCondition) %>%
  summarise_at(vars(dontknow, know, other, TOT), mean)

output2 <- manova(cbind(dontknow, know,
          other, TOT)~AgeGroup*PrimeCondition, data = e2_data_wide )
summary.aov(output2)
@

\subsubsection {overall}

<<>>=
e2_all_aov = aov(data = statepercent_exp2, 
                          Percent ~ AgeGroup*State*PrimeCondition + 
                        Error(Subject/(State*PrimeCondition)))
summary(e2_all_aov)
@

\subsubsection{know}

<<>>=
e2_know = statepercent_exp2 %>% filter(State == "know")
e2_know_aov = aov(data = e2_know, 
                          Percent ~ AgeGroup*PrimeCondition + 
                        Error(Subject/PrimeCondition))
summary(e2_know_aov)
options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e2_know_aov, 
                                   c("AgeGroup","PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = "AgeGroup")
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

target_p = e2_know %>% filter(PrimeCondition == "p")
target_r = e2_know %>% filter(PrimeCondition == "r")
target_b = e2_know %>% filter(PrimeCondition == "b")
target_u = e2_know %>% filter(PrimeCondition == "u")

t.test(target_u$Percent, target_r$Percent, paired = TRUE)
t.test(target_u$Percent, target_b$Percent, paired = TRUE)
t.test(target_u$Percent, target_p$Percent, paired = TRUE)

## old diff in know semantic and know unrelated

old_semantic = e2_know %>% filter(PrimeCondition == "r" & AgeGroup == "Old")
old_unrel = e2_know %>% filter(PrimeCondition == "u" & AgeGroup == "Old")

t.test(old_semantic$Percent, old_unrel$Percent, paired = TRUE)
@

\subsubsection{dont know}

<<>>=
e2_dontknow = statepercent_exp2 %>% filter(State == "dontknow")
e2_dontknow_aov = aov(data = e2_dontknow, 
                          Percent ~ AgeGroup*PrimeCondition + 
                        Error(Subject/PrimeCondition))
summary(e2_dontknow_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e2_dontknow_aov, 
                                   c("AgeGroup","PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = "AgeGroup")
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

target_p = e2_dontknow %>% filter(PrimeCondition == "p")
target_r = e2_dontknow %>% filter(PrimeCondition == "r")
target_b = e2_dontknow %>% filter(PrimeCondition == "b")
target_u = e2_dontknow %>% filter(PrimeCondition == "u")

t.test(target_u$Percent, target_r$Percent, paired = TRUE)
t.test(target_u$Percent, target_b$Percent, paired = TRUE)
t.test(target_u$Percent, target_p$Percent, paired = TRUE)

target_y = e2_dontknow %>% filter(AgeGroup == "Young")
target_o = e2_dontknow %>% filter(AgeGroup == "Old")

t.test(target_y$Percent, target_o$Percent, paired = FALSE)

@

\subsubsection{other}

<<>>=
e2_other = statepercent_exp2 %>% filter(State == "other")
e2_other_aov = aov(data = e2_other, 
                          Percent ~ AgeGroup*PrimeCondition + 
                        Error(Subject/PrimeCondition))
summary(e2_other_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e2_other_aov, 
                                   c("AgeGroup","PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = "PrimeCondition")
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

target_y = e2_other %>% filter(AgeGroup == "Young")
target_o = e2_other %>% filter(AgeGroup == "Old")


t.test(target_y$Percent, target_o$Percent, paired = FALSE)

@

\subsubsection{TOT}

<<>>=

e2_TOT = statepercent_exp2 %>% filter(State == "TOT")
e2_TOT_aov = aov(data = e2_TOT, 
                          Percent ~ AgeGroup*PrimeCondition + 
                        Error(Subject/PrimeCondition))
summary(e2_TOT_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e2_TOT_aov, 
                                   c("AgeGroup","PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = "AgeGroup")
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

target_y = e2_TOT %>% filter(AgeGroup == "Young")
target_o = e2_TOT %>% filter(AgeGroup == "Old")


t.test(target_y$Percent, target_o$Percent, paired = FALSE)

@

\subsubsection{plot}

<<fig=TRUE>>=
exp2_statepercent= Rmisc::summarySE(statepercent_exp2, 
                        measurevar = "Percent",
                        groupvars = c("State", "AgeGroup", "PrimeCondition"))
exp2_statepercent$RetrievalState = factor(exp2_statepercent$State,levels(exp2_statepercent$State)[c(2,1,3,4)])

exp2_statepercent$AgeGroup = factor(exp2_statepercent$AgeGroup,levels(exp2_statepercent$AgeGroup)[c(2,1)])

#write.csv(exp2_statepercent, file = "exp2_statepercent.csv")
exp2_statepercent = read.csv("exp2_statepercent.csv", sep = ",",
                             header = TRUE)

exp2_statepercent$AgeGroup = factor(exp2_statepercent$AgeGroup,levels(exp2_statepercent$AgeGroup)[c(2,1)])

library(ggplot2)
library(ggthemes)
e2_percentplot = exp2_statepercent %>% 
  mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
                    labels = c("Both", "Phono", 
                               "Semantic", "Unrelated")),
        RetrievalState = factor(RetrievalState, levels = unique(RetrievalState),                    
                                labels = c("1: Know","2: Dont Know",  "3: Other", "4: TOT")))%>%
  
ggplot(aes(x = PrimeType, y = Percent, 
           group = AgeGroup, fill = AgeGroup))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, 
          color= "black")+
  geom_errorbar(aes(ymin=Percent - se, ymax=Percent + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  facet_wrap(~RetrievalState, nrow = 1)+
  scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("") + ylab("Percentage of Trials") + 
  ggtitle("E2: Young and Old Adults (With Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         axis.text.x = element_text( size = rel(1)),
         strip.text.x = element_blank())
e2_percentplot

@

\subsubsection {Know Only}

<<fig=TRUE>>=
exp2_statepercent_know = exp2_statepercent %>% filter(RetrievalState == "know")

e2_percentplot_know = exp2_statepercent_know %>% 
  mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
                    labels = c("Both", "Phonological", 
                               "Semantic", "Unrelated")))%>%
ggplot(aes(x = PrimeType, y = Percent, 
           group = AgeGroup, fill = AgeGroup))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, 
          color= "black")+
  geom_errorbar(aes(ymin=Percent - se, ymax=Percent + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  scale_fill_manual(values = c( "royalblue4", "slategray1"))+
    xlab("") + ylab("Percentage of trials") + 
  ggtitle("E2: Young and Old Adults (With Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
e2_percentplot_know
@



\subsection {Experiment 3 }

\subsubsection {MANOVA}

<<>>=
## we want to do a manova on our data for exp 1
## first need to convert each state to wide format 
e3_data_wide <- spread(statepercent_exp3, State, Percent)

## grouping

e3_wide_agg = group_by(e3_data_wide, AgeGroup, PrimeCondition) %>%
  summarise_at(vars(dontknow, know, other, TOT), mean)

output3 <- manova(cbind(dontknow, know,
          other, TOT)~ PrimeCondition, data = e3_data_wide )
summary.aov(output3)
@
\subsubsection {overall}
<<>>=
e3_all_aov = aov(data = statepercent_exp3, 
                          Percent ~ State*PrimeCondition + 
                        Error(Subject/(State*PrimeCondition)))
summary(e3_all_aov)
@
\subsubsection {know}

<<>>=
e3_know = statepercent_exp3 %>% filter(State == "know")
e3_know_aov = aov(data = e3_know, 
                          Percent ~ PrimeCondition + 
                        Error(Subject/PrimeCondition))
summary(e3_know_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e3_know_aov, 
                                   c("PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE)
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

target_p = e3_know %>% filter(PrimeCondition == "p")
target_r = e3_know %>% filter(PrimeCondition == "r")
target_b = e3_know %>% filter(PrimeCondition == "b")
target_u = e3_know %>% filter(PrimeCondition == "u")

t.test(target_u$Percent, target_r$Percent, paired = TRUE)
t.test(target_u$Percent, target_b$Percent, paired = TRUE)
t.test(target_u$Percent, target_p$Percent, paired = TRUE)
@

\subsubsection {dont know}

<<>>=
e3_dontknow = statepercent_exp3 %>% filter(State == "dontknow")
e3_dontknow_aov = aov(data = e3_dontknow, 
                          Percent ~ PrimeCondition + 
                        Error(Subject/PrimeCondition))
summary(e3_dontknow_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e3_dontknow_aov, 
                                   c("PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE)
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

target_p = e3_dontknow %>% filter(PrimeCondition == "p")
target_r = e3_dontknow %>% filter(PrimeCondition == "r")
target_b = e3_dontknow %>% filter(PrimeCondition == "b")
target_u = e3_dontknow %>% filter(PrimeCondition == "u")

t.test(target_u$Percent, target_r$Percent, paired = TRUE)
t.test(target_u$Percent, target_b$Percent, paired = TRUE)
t.test(target_u$Percent, target_p$Percent, paired = TRUE)
@

\subsubsection {other}

<<>>=
e3_other = statepercent_exp3 %>% filter(State == "other")
e3_other_aov = aov(data = e3_other, 
                          Percent ~ PrimeCondition + 
                        Error(Subject/PrimeCondition))
summary(e3_other_aov)

@

\subsubsection {TOT}

<<>>=
e3_TOT = statepercent_exp3 %>% filter(State == "TOT")
e3_TOT_aov = aov(data = e3_TOT, 
                          Percent ~ PrimeCondition + 
                        Error(Subject/PrimeCondition))
summary(e3_TOT_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e3_TOT_aov, 
                                   c("PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE)
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

target_p = e3_TOT %>% filter(PrimeCondition == "p")
target_r = e3_TOT %>% filter(PrimeCondition == "r")
target_b = e3_TOT %>% filter(PrimeCondition == "b")
target_u = e3_TOT %>% filter(PrimeCondition == "u")

t.test(target_u$Percent, target_r$Percent, paired = TRUE)
t.test(target_u$Percent, target_b$Percent, paired = TRUE)
t.test(target_u$Percent, target_p$Percent, paired = TRUE)
@

\subsubsection {plot}

<<fig=TRUE>>=
exp3_statepercent= Rmisc::summarySE(statepercent_exp3, 
                        measurevar = "Percent",
                        groupvars = c("State","AgeGroup", "PrimeCondition"))

exp3_statepercent$RetrievalState = factor(exp3_statepercent$State,levels(exp3_statepercent$State)[c(2,1,3,4)])


#write.csv(exp3_statepercent, file = "exp3_statepercent.csv")
exp3_statepercent = read.csv("exp3_statepercent.csv", sep = ",",
                             header = TRUE)

library(ggplot2)
library(ggthemes)
e3_percentplot = exp3_statepercent %>% 
  mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
                    labels = c("Both", "Phono", 
                               "Semantic", "Unrelated")),
        RetrievalState = factor(RetrievalState, levels = unique(RetrievalState),                    
                                labels = c("1: Know","2: Dont Know",  "3: Other", "4: TOT")))%>%
ggplot(aes(x = PrimeType, y = Percent,
           group = AgeGroup, fill = AgeGroup))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, 
          color= "black")+
  geom_errorbar(aes(ymin=Percent - se, ymax=Percent + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  facet_wrap(~RetrievalState, nrow =1 )+
    scale_fill_manual(values = c("royalblue4"))+
      xlab("PrimeCondition") + ylab("") + 
  ggtitle("E3: Young Adults Only (48 ms)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
                  axis.text.x = element_text(size = rel(1)),
         strip.text.x = element_blank())
e3_percentplot

@

\subsubsection {Know Only}

<<fig=TRUE>>=
exp3_statepercent_know = exp3_statepercent %>% filter(RetrievalState == "know")

e3_percentplot_know = exp3_statepercent_know %>% 
  mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
                    labels = c("Both", "Phonological", 
                               "Semantic", "Unrelated")))%>%
ggplot(aes(x = PrimeType, y = Percent, 
           group = AgeGroup, fill = AgeGroup))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, 
          color= "black")+
  geom_errorbar(aes(ymin=Percent - se, ymax=Percent + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  scale_fill_manual(values = c( "royalblue4", "slategray1"))+
    xlab("Prime Condition") + ylab("") + 
  ggtitle("E3: Young Adults Only (48 ms)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
e3_percentplot_know
@

\subsection {Combined Plot for State Percent}

<<fig=TRUE>>=
library(grid)
gridExtra::grid.arrange(e1_percentplot, e2_percentplot, e3_percentplot, nrow = 3, ncol = 1, 
                top=textGrob("Percentage of Retrieval States Across Experiments 1, 2, 3", 
                                      gp=gpar(fontsize=20)))
@

\subsubsection {Combined Plot for Know Percent}

<<fig=TRUE>>=
library(grid)
gridExtra::grid.arrange(e1_percentplot_know, e2_percentplot_know, e3_percentplot_know, nrow = 3, ncol = 1, 
                top=textGrob("Percentage of Know responses Across Experiments 1, 2, 3", 
                                      gp=gpar(fontsize=18)))
@

\section {Combined TOT Other Analyses}

<<>>=
j <- read.csv("MainJulieagg_5studies.csv", header = TRUE, sep = ",")
j <- subset(j, j$value.Subject!= 198 & j$value.Subject!= 95)

#j_statepercent = j[,c(2,3,4,5,104:119)] # use for state percents

j_statepercent = j[,c(2,3,4,5,120, 121,136, 
                      124, 125, 137, 
                      128, 129, 138,
                      132,133, 139)] # use for prime percents
j_statepercent$value.Subject = as.factor(j_statepercent$value.Subject)

library(tidyr)
library(dplyr)

# use comments for state wise percent
# statepercent <- j_statepercent %>%
#   gather(StatePrime, Percent, 
#          know_r_percent, know_p_percent,know_b_percent, know_u_percent,
#          dontknow_r_percent, dontknow_p_percent,
#          dontknow_b_percent,dontknow_u_percent,
#          other_r_percent,other_p_percent,other_b_percent,other_u_percent,
#          TOT_r_percent, TOT_p_percent, TOT_b_percent, TOT_u_percent) %>%
#   separate(StatePrime, c('State', 'Prime'), sep = "_") %>%
#   arrange(value.Subject)

# use below for prime wise percent
statepercent <- j_statepercent %>%
  gather(StatePrime, Percent, 
         r_know_new, r_dontknow_new,r_TO_new,
         p_know_new, p_dontknow_new,p_TO_new,
         b_know_new, b_dontknow_new,b_TO_new,
         u_know_new, u_dontknow_new,u_TO_new) %>%
  separate(StatePrime, c('Prime', 'State'), sep = "_") %>%
  arrange(value.Subject)

# state wise percent
# colnames(statepercent) = c("AgeGroup", "Subject", "StudyNo", "PrimeInstruction", "State","PrimeCondition", "Percent")

## prime wise percent
colnames(statepercent) = c("AgeGroup", "Subject", "StudyNo", "PrimeInstruction", "PrimeCondition", "State", "Percent")

statepercent$AgeGroup <- as.factor(statepercent$AgeGroup)
statepercent$Subject <- as.factor(statepercent$Subject)
statepercent$StudyNo <- as.factor(statepercent$StudyNo)
statepercent$PrimeInstruction <- as.factor(statepercent$PrimeInstruction)
statepercent$PrimeCondition <- as.factor(statepercent$PrimeCondition)
statepercent$State <- as.factor(statepercent$State)
statepercent$Percent <- as.numeric(as.character(statepercent$Percent))

for(i in 1:nrow(statepercent)){
  if(is.na(statepercent[i,7])) {
    print(i)
    statepercent[i,7] = 0
  }
  else
    statepercent[i,7] = statepercent[i,7]
}

statepercent_exp1 = statepercent %>% filter(StudyNo == '2' | StudyNo == '4')
statepercent_exp2 = statepercent %>% filter(StudyNo == '5' | StudyNo == '6')
statepercent_exp3 = statepercent %>% filter(StudyNo == '1')

@

\subsection{E1}


<<>>=
e1_TO = statepercent_exp1 %>% filter(State == "TO")
e1_TO_aov = aov(data = e1_TO, 
                          Percent ~ AgeGroup*PrimeCondition + 
                        Error(Subject/PrimeCondition))
summary(e1_TO_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e1_TO_aov, 
                                   c("AgeGroup","PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = "AgeGroup")
library(knitr)
# x = prime_effect$comparisons
# x[which(x$p.value < 0.05),]
@

\subsubsection{plot}
<<fig=TRUE>>=
exp1_statepercent= Rmisc::summarySE(statepercent_exp1, 
                        measurevar = "Percent",
                        groupvars = c("State", "AgeGroup", "PrimeCondition"))

exp1_statepercent$RetrievalState = ordered(as.factor(as.character(exp1_statepercent$State)), levels = c("know", "dontknow", "TO"))


exp1_statepercent$Age = ordered(as.factor(as.character(exp1_statepercent$AgeGroup)), levels = c("Young", "Old"))

exp1_statepercent = exp1_statepercent %>% filter(RetrievalState == "TO")

library(ggplot2)
library(ggthemes)
e1_percentplot = exp1_statepercent %>% 
ggplot(aes(x = PrimeCondition, y = Percent, 
           group = Age, fill = Age))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, 
          color= "black")+
  geom_errorbar(aes(ymin=Percent - se, ymax=Percent + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  scale_fill_manual(values = c( "royalblue4", "slategray1"))+
    xlab("") + ylab("") + 
  ggtitle("E1: Young and Old Adults (No Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
                  axis.text.x = element_text(size = rel(1)),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
e1_percentplot

@

\subsection{E2}


<<>>=
e2_TO = statepercent_exp2 %>% filter(State == "TO")
e2_TO_aov = aov(data = e2_TO, 
                          Percent ~ AgeGroup*PrimeCondition + 
                        Error(Subject/PrimeCondition))
summary(e2_TO_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e2_TO_aov, 
                                   c("AgeGroup","PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = "PrimeCondition")
library(knitr)
# x = prime_effect$comparisons
# x[which(x$p.value < 0.05),]
@

\subsubsection{plot}
<<fig=TRUE>>=
exp2_statepercent= Rmisc::summarySE(statepercent_exp2, 
                        measurevar = "Percent",
                        groupvars = c("State", "AgeGroup", "PrimeCondition"))

exp2_statepercent$RetrievalState = ordered(as.factor(as.character(exp2_statepercent$State)), levels = c("know", "dontknow", "TO"))


exp2_statepercent$Age = ordered(as.factor(as.character(exp2_statepercent$AgeGroup)), levels = c("Young", "Old"))

exp2_statepercent = exp2_statepercent %>% filter(RetrievalState == "TO")

library(ggplot2)
library(ggthemes)
e2_percentplot = exp2_statepercent %>% 
ggplot(aes(x = PrimeCondition, y = Percent, 
           group = Age, fill = Age))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, 
          color= "black")+
  geom_errorbar(aes(ymin=Percent - se, ymax=Percent + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  scale_fill_manual(values = c( "royalblue4", "slategray1"))+
    xlab("") + ylab("") + 
  ggtitle("E2: Young and Old Adults (With Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
                  axis.text.x = element_text(size = rel(1)),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
e2_percentplot

@

\subsection{E3}


<<>>=
 e3_TO = statepercent_exp2 %>% filter(State == "TO")
e3_TO_aov = aov(data = e3_TO, 
                          Percent ~ PrimeCondition + 
                        Error(Subject/PrimeCondition))
summary(e3_TO_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e3_TO_aov, 
                                   c("PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE)
library(knitr)
# x = prime_effect$comparisons
# x[which(x$p.value < 0.05),]
@

\subsubsection{plot}
<<fig=TRUE>>=
exp3_statepercent= Rmisc::summarySE(statepercent_exp3, 
                        measurevar = "Percent",
                        groupvars = c("State", "AgeGroup", "PrimeCondition"))

exp3_statepercent$RetrievalState = ordered(as.factor(as.character(exp3_statepercent$State)), levels = c("know", "dontknow", "TO"))


exp3_statepercent$Age = ordered(as.factor(as.character(exp3_statepercent$AgeGroup)), levels = c("Young"))

exp3_statepercent = exp3_statepercent %>% filter(RetrievalState == "TO")

library(ggplot2)
library(ggthemes)
e3_percentplot = exp3_statepercent %>% 
ggplot(aes(x = PrimeCondition, y = Percent, 
           group = Age, fill = Age))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, 
          color= "black")+
  geom_errorbar(aes(ymin=Percent - se, ymax=Percent + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  scale_fill_manual(values = c( "royalblue4", "slategray1"))+
    xlab("") + ylab("") + 
  ggtitle("E3: Young (48 ms)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
                  axis.text.x = element_text(size = rel(1)),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
e3_percentplot

@





\section {Experiment 1: YA-OA No Instruction}

<<>>=
final_j$primefac = ordered(as.factor(as.character(final_j$PrimeCondition)), levels = c("Both", "Related", "Phonological", "Unrelated"))

final_j$agefac = ordered(as.factor(as.character(final_j$AgeGroup)), levels = c("Young", "Old"))

exp1_target = subset(final_j, final_j$StudyNo == '2' | final_j$StudyNo == '4')
exp1_mcq = subset(final_mcq, final_mcq$StudyNo == '2' | final_mcq$StudyNo == '4')
exp1_state = subset(final_statedata, final_statedata$StudyNo == '2' | 
                                  final_statedata$StudyNo == '4')
exp1_state_prime = subset(statedata_primetype_long, statedata_primetype_long$StudyNo == '2' | 
                                  statedata_primetype_long$StudyNo == '4')

exp1_state_prime$PrimeCondition = as.factor(as.character(exp1_state_prime$PrimeCondition))
exp1_state_prime$State = as.factor(as.character(exp1_state_prime$State))
exp1_state_prime$Subject = as.factor(as.character(exp1_state_prime$Subject))

@

\subsection*{Exp 1: Target Accuracy}
<<>>=
### TARGET RETRIEVAL ACCURACY

exp1_target_aov = aov(data = exp1_target, Accuracy ~ AgeGroup*PrimeCondition + 
                                Error (Subject/PrimeCondition))
summary(exp1_target_aov)


options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
exp1_target_lsm = lsmeans::lsmeans(exp1_target_aov, c("AgeGroup", "PrimeCondition"))
prime_effect = cld(exp1_target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("AgeGroup"))
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

## specific t-tests
target_p = exp1_target %>% filter(PrimeCondition == "Phonological")
target_r = exp1_target %>% filter(PrimeCondition == "Related")
target_b = exp1_target %>% filter(PrimeCondition == "Both")
target_u = exp1_target %>% filter(PrimeCondition == "Unrelated")

t.test(target_p$Accuracy, target_r$Accuracy, paired = TRUE)
t.test(target_p$Accuracy, target_b$Accuracy, paired = TRUE)
t.test(target_p$Accuracy, target_u$Accuracy, paired = TRUE)

t.test(target_b$Accuracy, target_r$Accuracy, paired = TRUE)
t.test(target_b$Accuracy, target_u$Accuracy, paired = TRUE)
t.test(target_r$Accuracy, target_u$Accuracy, paired = TRUE)


@

\subsection*{Exp 1: Multiple Choice}

<<>>=

## MULTIPLE CHOICE ACCURACY
library(dplyr)
exp1_mcq_acc = group_by(exp1_mcq, Subject, PrimeType, AgeGroup) %>%
    summarise_at(vars(MCQAcc), mean)

exp1_mcq_acc_aov = aov(data = exp1_mcq_acc, MCQAcc ~ AgeGroup*PrimeType + 
                              Error(Subject/PrimeType))
summary(exp1_mcq_acc_aov)


# ez::ezANOVA(data = exp1_mcq_acc, wid = .(Subject),
#         dv = .(MCQAcc), within =.(PrimeType),
#         between = .(AgeGroup))


exp1_mcqacc_lsm = lsmeans::lsmeans(exp1_mcq_acc_aov, c("AgeGroup", "PrimeType"))
prime_effect = cld(exp1_mcqacc_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("AgeGroup"))

kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.05))

## SPECIFIC T TESTS

e1_mcq_p = exp1_mcq_acc %>% filter(PrimeType == "p")
e1_mcq_r = exp1_mcq_acc %>% filter(PrimeType == "r")
e1_mcq_b = exp1_mcq_acc %>% filter(PrimeType == "b")
e1_mcq_u = exp1_mcq_acc %>% filter(PrimeType == "u")

t.test(e1_mcq_p$MCQAcc, e1_mcq_r$MCQAcc, paired = TRUE)
t.test(e1_mcq_p$MCQAcc, e1_mcq_b$MCQAcc, paired = TRUE)
t.test(e1_mcq_p$MCQAcc, e1_mcq_u$MCQAcc)

t.test(e1_mcq_r$MCQAcc, e1_mcq_u$MCQAcc, paired = TRUE)




## MULTIPLE CHOICE ERRORS

## before we do ANOVA, we need to replace NAs with 0.

for (i in 1: nrow(exp1_mcq)){
   if(is.na(exp1_mcq[i,7])){
     exp1_mcq[i,7] = 0
   }
  
}
exp1_mcq_aov = aov(data = exp1_mcq, Proportion ~ AgeGroup*PrimeType*ChosenPrime + 
                                  Error(Subject/(PrimeType*ChosenPrime)))
summary(exp1_mcq_aov)
library(ez)
# ezANOVA(data = exp1_mcq, wid = .(Subject),
#         dv = .(Proportion), within =.(PrimeType, ChosenPrime),
#         between = .(AgeGroup))

options(contrasts = c('contr.sum', 'contr.poly'))

exp1_errors_lsm = lsmeans::lsmeans(exp1_mcq_aov, c("AgeGroup", "PrimeType", "ChosenPrime"))
prime_effect = cld(exp1_errors_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("AgeGroup", "PrimeType"))

kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.05))

## SPECIFIC OLD COMPARISION T TEST

e1mcq_old_r = exp1_mcq %>% filter(AgeGroup == "Old" & PrimeType == "r")
e1mcq_old_r_r = e1mcq_old_r %>% filter(ChosenPrime == "r")
e1mcq_old_r_p = e1mcq_old_r %>% filter(ChosenPrime == "p")
e1mcq_old_r_b = e1mcq_old_r %>% filter(ChosenPrime == "b")
e1mcq_old_r_u = e1mcq_old_r %>% filter(ChosenPrime == "u")

t.test(e1mcq_old_r_r$Proportion, e1mcq_old_r_p$Proportion, paired = TRUE)
t.test(e1mcq_old_r_r$Proportion, e1mcq_old_r_b$Proportion, paired = TRUE)
t.test(e1mcq_old_r_r$Proportion, e1mcq_old_r_u$Proportion, paired = TRUE)

e1mcq_young_r = exp1_mcq %>% filter(AgeGroup == "Young" & PrimeType == "r")
e1mcq_young_r_r = e1mcq_young_r %>% filter(ChosenPrime == "r")
## comparing young and old
t.test(e1mcq_young_r_r$Proportion, e1mcq_old_r_r$Proportion)

@

\subsection*{Exp 1: State Data}

<<>>=

## just state
exp1_state_aov = aov(data = exp1_state, Trials ~ AgeGroup*State + 
                                        Error(Subject/State))
summary(exp1_state_aov)

options(contrasts = c('contr.sum', 'contr.poly'))

exp1_state_lsm = lsmeans::lsmeans(exp1_state_aov, c("AgeGroup", "State"))
prime_effect = cld(exp1_state_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("State"))
kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.05))

##state by prime
exp1_stateprime_aov = aov(data = exp1_state_prime, Trials ~ AgeGroup*PrimeCondition*State + 
                                        Error(Subject/(PrimeCondition*State)))
summary(exp1_stateprime_aov)

library(ez)
# ezANOVA(data = exp1_state_prime, wid = .(Subject),
#         dv = .(Trials), within =.(PrimeCondition, State),
#         between = .(AgeGroup))

options(contrasts = c('contr.sum', 'contr.poly'))

exp1_state_lsm = lsmeans::lsmeans(exp1_stateprime_aov, c("AgeGroup","PrimeCondition", "State"))
prime_effect = cld(exp1_state_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("PrimeCondition", "AgeGroup"))

kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.05))

### INDIVIDUAL T-TESTS FOR AGExSTATE interaction

e1_young_dk = exp1_state %>% filter(AgeGroup == "Young" & State == "dontknow")
e1_old_dk = exp1_state %>% filter(AgeGroup == "Old" & State == "dontknow")
t.test(e1_old_dk$Trials, e1_young_dk$Trials, var.equal = TRUE)


e1_young_other = exp1_state %>% filter(AgeGroup == "Young" & State == "other")
e1_old_other = exp1_state %>% filter(AgeGroup == "Old" & State == "other")
t.test(e1_young_other$Trials, e1_old_other$Trials)
@


\section {Experiment 2: YA-OA Not The Prime}

<<>>=
exp2_target = subset(final_j, final_j$StudyNo == '5' | final_j$StudyNo == '6')
exp2_mcq = subset(final_mcq, final_mcq$StudyNo == '5' | final_mcq$StudyNo == '6')
exp2_state = subset(final_statedata, final_statedata$StudyNo == '5' | 
                                  final_statedata$StudyNo == '6')
exp2_state_prime = subset(statedata_primetype_long, statedata_primetype_long$StudyNo == '5' | 
                                  statedata_primetype_long$StudyNo == '6')


exp2_state_prime$PrimeCondition = as.factor(as.character(exp2_state_prime$PrimeCondition))
exp2_state_prime$State = as.factor(as.character(exp2_state_prime$State))
exp2_state_prime$Subject = as.factor(as.character(exp2_state_prime$Subject))

@

\subsection*{Exp 2: Target Accuracy}
<<>>=
### TARGET RETRIEVAL ACCURACY

exp2_target_aov = aov(data = exp2_target, Accuracy ~ AgeGroup*PrimeCondition + 
                                Error (Subject/PrimeCondition))
summary(exp2_target_aov)

library(ez)
# ezANOVA(data = exp2_target, wid = .(Subject),
#         dv = .(Accuracy), within =.(PrimeCondition),
#         between = .(AgeGroup))

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
exp2_target_lsm = lsmeans::lsmeans(exp2_target_aov, c("AgeGroup", "PrimeCondition"))
prime_effect = cld(exp2_target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("AgeGroup"))

kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 1 ))
## specific t-tests
target_p = exp2_target %>% filter(PrimeCondition == "Phonological")
target_r = exp2_target %>% filter(PrimeCondition == "Related")
target_b = exp2_target %>% filter(PrimeCondition == "Both")
target_u = exp2_target %>% filter(PrimeCondition == "Unrelated")

t.test(target_p$Accuracy, target_r$Accuracy, paired = TRUE)
t.test(target_p$Accuracy, target_b$Accuracy, paired = TRUE)
t.test(target_p$Accuracy, target_u$Accuracy, paired = TRUE)

t.test(target_b$Accuracy, target_u$Accuracy, paired = TRUE)

t.test(target_b$Accuracy, target_r$Accuracy, paired = TRUE)
t.test(target_r$Accuracy, target_u$Accuracy, paired = TRUE)


@

\subsection*{Exp 2: Multiple Choice}

<<>>=

## MULTIPLE CHOICE ACCURACY
library(dplyr)
exp2_mcq_acc = group_by(exp2_mcq, Subject, PrimeType, AgeGroup) %>%
    summarise_at(vars(MCQAcc), mean)

exp2_mcq_acc_aov = aov(data = exp2_mcq_acc, MCQAcc ~ AgeGroup*PrimeType + 
                              Error(Subject/PrimeType))
summary(exp2_mcq_acc_aov)

## SPECIFIC T TESTS

e2_mcq_p = exp2_mcq_acc %>% filter(PrimeType == "p")
e2_mcq_r = exp2_mcq_acc %>% filter(PrimeType == "r")
e2_mcq_b = exp2_mcq_acc %>% filter(PrimeType == "b")
e2_mcq_u = exp2_mcq_acc %>% filter(PrimeType == "u")

e2mcq_y_p = e2_mcq_p %>% filter(AgeGroup == "Young")
e2mcq_o_p = e2_mcq_p %>% filter(AgeGroup == "Old")
t.test(e2mcq_y_p$MCQAcc, e2mcq_o_p$MCQAcc)


e2mcq_y_b = e2_mcq_b %>% filter(AgeGroup == "Young")
e2mcq_o_b = e2_mcq_b %>% filter(AgeGroup == "Old")
t.test(e2mcq_y_b$MCQAcc, e2mcq_o_b$MCQAcc)

e2mcq_y_r = e2_mcq_r %>% filter(AgeGroup == "Young")
e2mcq_o_r = e2_mcq_r %>% filter(AgeGroup == "Old")
t.test(e2mcq_y_r$MCQAcc, e2mcq_o_r$MCQAcc)

# ezANOVA(data = exp2_mcq_acc, wid = .(Subject),
#         dv = .(MCQAcc), within =.(PrimeType),
#         between = .(AgeGroup))


exp2_mcqacc_lsm = lsmeans::lsmeans(exp2_mcq_acc_aov, c("AgeGroup", "PrimeType"))
prime_effect = cld(exp2_mcqacc_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("PrimeType"))

kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.1))


## MULTIPLE CHOICE ERRORS

## before we do ANOVA, we need to replace NAs with 0.

for (i in 1: nrow(exp2_mcq)){
   if(is.na(exp2_mcq[i,7])){
     exp2_mcq[i,7] = 0
   }
  
}
exp2_mcq_aov = aov(data = exp2_mcq, Proportion ~ AgeGroup*PrimeType*ChosenPrime + 
                                  Error(Subject/(PrimeType*ChosenPrime)))
summary(exp2_mcq_aov)
library(ez)
# ezANOVA(data = exp2_mcq, wid = .(Subject),
#         dv = .(Proportion), within =.(PrimeType, ChosenPrime),
#         between = .(AgeGroup))

options(contrasts = c('contr.sum', 'contr.poly'))

exp2_errors_lsm = lsmeans::lsmeans(exp2_mcq_aov, c("AgeGroup", "PrimeType", "ChosenPrime"))
prime_effect = cld(exp2_errors_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("PrimeType", "ChosenPrime"))

kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.05))

## SPECIFIC OLD COMPARISION T TEST

e2mcq_old_r = exp2_mcq %>% filter(AgeGroup == "Old" & PrimeType == "r")
e2mcq_young_r = exp2_mcq %>% filter(AgeGroup == "Young" & PrimeType == "r")

e2mcq_old_r_r = e2mcq_old_r %>% filter(ChosenPrime == "r")
e2mcq_young_r_r = e2mcq_young_r %>% filter(ChosenPrime == "r")

## comparing young and old
t.test(e2mcq_young_r_r$Proportion, e2mcq_old_r_r$Proportion)

e2mcq_old_b = exp2_mcq %>% filter(AgeGroup == "Old" & PrimeType == "b")
e2mcq_young_b = exp2_mcq %>% filter(AgeGroup == "Young" & PrimeType == "b")

e2mcq_old_b_b = e2mcq_old_b %>% filter(ChosenPrime == "b")
e2mcq_young_b_b = e2mcq_young_b %>% filter(ChosenPrime == "b")

## comparing young and old
t.test(e2mcq_young_b_b$Proportion, e2mcq_old_b_b$Proportion)
@

\subsection*{Exp 2: State Data}

<<>>=

## just state
exp2_state_aov = aov(data = exp2_state, Trials ~ AgeGroup*State + 
                                        Error(Subject/State))
summary(exp2_state_aov)

options(contrasts = c('contr.sum', 'contr.poly'))

exp2_state_lsm = lsmeans::lsmeans(exp2_state_aov, c("AgeGroup", "State"))
prime_effect = cld(exp2_state_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("State"))
knitr::kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.05))

## Specfic t test for Old-Young TOT Differece

y_TOT = exp2_state %>% filter(AgeGroup == "Young" & State == "TOT")
o_TOT = exp2_state %>% filter(AgeGroup == "Old" & State == "TOT")

t.test(y_TOT$Trials, o_TOT$Trials)

##state by prime
exp2_stateprime_aov = aov(data = exp2_state_prime, Trials ~ AgeGroup*PrimeCondition*State + 
                                        Error(Subject/(PrimeCondition*State)))
summary(exp2_stateprime_aov)

library(ez)
# ezANOVA(data = exp2_state_prime, wid = .(Subject),
#         dv = .(Trials), within =.(PrimeCondition, State),
#         between = .(AgeGroup))

options(contrasts = c('contr.sum', 'contr.poly'))

exp2_state_lsm = lsmeans::lsmeans(exp2_stateprime_aov, c("AgeGroup", "PrimeCondition", "State"))
prime_effect = cld(exp2_state_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("PrimeCondition", "State"))

kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.05))

### INDIVIDUAL T-TESTS FOR AGExSTATE interaction

e2_young_dk = exp2_state %>% filter(AgeGroup == "Young" & State == "dontknow")
e2_old_dk = exp2_state %>% filter(AgeGroup == "Old" & State == "dontknow")
t.test(e2_old_dk$Trials, e2_young_dk$Trials)


e2_young_other = exp2_state %>% filter(AgeGroup == "Young" & State == "other")
e2_old_other = exp2_state %>% filter(AgeGroup == "Old" & State == "other")
t.test(e2_young_other$Trials, e2_old_other$Trials)


e2_young_TOT = exp2_state %>% filter(AgeGroup == "Young" & State == "TOT")
e2_old_TOT = exp2_state %>% filter(AgeGroup == "Old" & State == "TOT")
t.test(e2_young_TOT$Trials, e2_old_TOT$Trials)
@


\section {Experiment 3: 48ms}

<<>>=
exp3_target = subset(final_j, final_j$StudyNo == '1')
exp3_mcq = subset(final_mcq, final_mcq$StudyNo == '1')
exp3_state = subset(final_statedata, final_statedata$StudyNo == '1')
exp3_state_prime = subset(statedata_primetype_long, statedata_primetype_long$StudyNo == '1')


exp3_state_prime$PrimeCondition = as.factor(as.character(exp3_state_prime$PrimeCondition))
exp3_state_prime$State = as.factor(as.character(exp3_state_prime$State))
exp3_state_prime$Subject = as.factor(as.character(exp3_state_prime$Subject))
@

\subsection*{Exp 3: Target Accuracy}
<<>>=
### TARGET RETRIEVAL ACCURACY

exp3_target_aov = aov(data = exp3_target, Accuracy ~ PrimeCondition + 
                                Error (Subject/PrimeCondition))
summary(exp3_target_aov)

## specific t-tests
target_p = exp3_target %>% filter(PrimeCondition == "Phonological")
target_r = exp3_target %>% filter(PrimeCondition == "Related")
target_b = exp3_target %>% filter(PrimeCondition == "Both")
target_u = exp3_target %>% filter(PrimeCondition == "Unrelated")

t.test(target_p$Accuracy, target_u$Accuracy, paired = TRUE)

library(ez)
# ezANOVA(data = exp3_target, wid = .(Subject),
#         dv = .(Accuracy), within =.(PrimeCondition))

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
exp3_target_lsm = lsmeans::lsmeans(exp3_target_aov, c("PrimeCondition"))
prime_effect = cld(exp3_target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE)

kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 1 ))

## specific t-tests
target_p = exp3_target %>% filter(PrimeCondition == "Phonological")
target_r = exp3_target %>% filter(PrimeCondition == "Related")
target_b = exp3_target %>% filter(PrimeCondition == "Both")
target_u = exp3_target %>% filter(PrimeCondition == "Unrelated")

t.test(target_p$Accuracy, target_r$Accuracy, paired = TRUE)
t.test(target_p$Accuracy, target_b$Accuracy, paired = TRUE)
t.test(target_p$Accuracy, target_u$Accuracy, paired = TRUE)

t.test(target_b$Accuracy, target_r$Accuracy, paired = TRUE)
t.test(target_b$Accuracy, target_u$Accuracy, paired = TRUE)
t.test(target_r$Accuracy, target_u$Accuracy, paired = TRUE)

@

\subsection*{Exp 3: Multiple Choice}

<<>>=

## MULTIPLE CHOICE ACCURACY
library(dplyr)
exp3_mcq_acc = group_by(exp3_mcq, Subject, PrimeType) %>%
    summarise_at(vars(MCQAcc), mean)

exp3_mcq_acc_aov = aov(data = exp3_mcq_acc, MCQAcc ~ PrimeType + 
                              Error(Subject/PrimeType))
summary(exp3_mcq_acc_aov)

## SPECIFIC T TESTS

e3_mcq_p = exp3_mcq_acc %>% filter(PrimeType == "p")
e3_mcq_r = exp3_mcq_acc %>% filter(PrimeType == "r")
e3_mcq_b = exp3_mcq_acc %>% filter(PrimeType == "b")
e3_mcq_u = exp3_mcq_acc %>% filter(PrimeType == "u")

t.test(e3_mcq_r$MCQAcc, e3_mcq_u$MCQAcc, paired = TRUE) ##sig
t.test(e3_mcq_r$MCQAcc, e3_mcq_p$MCQAcc, paired = TRUE) ##not sig


# ezANOVA(data = exp3_mcq_acc, wid = .(Subject),
#         dv = .(MCQAcc), within =.(PrimeType))


exp3_mcqacc_lsm = lsmeans::lsmeans(exp3_mcq_acc_aov, c("PrimeType"))
prime_effect = cld(exp3_mcqacc_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE)

kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.1))


## MULTIPLE CHOICE ERRORS

## before we do ANOVA, we need to replace NAs with 0.

for (i in 1: nrow(exp3_mcq)){
   if(is.na(exp3_mcq[i,7])){
     exp3_mcq[i,7] = 0
   }
  
}
exp3_mcq_aov = aov(data = exp3_mcq, Proportion ~ PrimeType*ChosenPrime + 
                                  Error(Subject/(PrimeType*ChosenPrime)))
summary(exp3_mcq_aov)
library(ez)
# ezANOVA(data = exp3_mcq, wid = .(Subject),
#         dv = .(Proportion), within =.(PrimeType, ChosenPrime))

options(contrasts = c('contr.sum', 'contr.poly'))

exp3_errors_lsm = lsmeans::lsmeans(exp3_mcq_aov, c("PrimeType", "ChosenPrime"))
prime_effect = cld(exp3_errors_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("PrimeType"))

kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.8))
@

\subsection*{Exp 3: State Data}

<<>>=

## just state
exp3_state_aov = aov(data = exp3_state, Trials ~ State + 
                                        Error(Subject/State))
summary(exp3_state_aov)

options(contrasts = c('contr.sum', 'contr.poly'))

exp3_state_lsm = lsmeans::lsmeans(exp3_state_aov, c("State"))
prime_effect = cld(exp3_state_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE)
kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.05))

##state by prime
exp3_stateprime_aov = aov(data = exp3_state_prime, Trials ~ PrimeCondition*State + 
                                        Error(Subject/(PrimeCondition*State)))
summary(exp3_stateprime_aov)

library(ez)
# ezANOVA(data = exp3_state_prime, wid = .(Subject),
#         dv = .(Trials), within =.(PrimeCondition, State))

options(contrasts = c('contr.sum', 'contr.poly'))

exp3_state_lsm = lsmeans::lsmeans(exp3_stateprime_aov, c("PrimeCondition", "State"))
prime_effect = cld(exp3_state_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("PrimeCondition"))

kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.1))

## specific t

## for related primes
e3mcq_r = exp3_mcq %>% filter(PrimeType == "r")

e3mcq_r_r = e3mcq_r %>% filter(ChosenPrime == "r")
e3mcq_r_b = e3mcq_r %>% filter(ChosenPrime == "b")

t.test(e3mcq_r_r$Proportion, e3mcq_r_b$Proportion, paired = TRUE)

## for both primes
e3mcq_b = exp3_mcq %>% filter(PrimeType == "b")

e3mcq_b_r = e3mcq_b %>% filter(ChosenPrime == "r")
e3mcq_b_b = e3mcq_b %>% filter(ChosenPrime == "b")

t.test(e3mcq_b_r$Proportion, e3mcq_b_b$Proportion, paired = TRUE)

@

\section {Comparing YA 48 ms with OA NotthePrime}

<<>>=

for (i in 1: nrow(final_mcq)){
   if(is.na(final_mcq[i,7])){
     final_mcq[i,7] = 0
   }
}

exp3_compare_1 = subset(final_mcq, final_mcq$StudyNo == '6' | 
                        final_mcq$StudyNo == '1')

compare_aov_1 = aov(data = exp3_compare_1, Proportion ~ StudyNo*PrimeType*ChosenPrime + Error(Subject/(PrimeType*ChosenPrime)))
summary(compare_aov_1)

## specific t

e3_old_b = exp3_compare_1 %>% filter(AgeGroup == "Old" & ChosenPrime == "b")
mean_old = group_by(e3_old_b, Subject) %>%
              summarise_at(vars(Proportion), mean)
e3_young_b = exp3_compare_1 %>% filter(AgeGroup == "Young" & ChosenPrime == "b")
mean_young = group_by(e3_young_b, Subject) %>%
              summarise_at(vars(Proportion), mean)

t.test(mean_young$Proportion, mean_old$Proportion)

### e2 young and e3 young
exp3_compare_2 = subset(final_mcq, final_mcq$StudyNo == '1' | 
                        final_mcq$StudyNo == '5')
compare_aov_2 = aov(data = exp3_compare_2, Proportion ~ StudyNo*PrimeType*ChosenPrime + Error(Subject/(PrimeType*ChosenPrime)))
summary(compare_aov_2)

options(contrasts = c('contr.sum', 'contr.poly'))

compare_lsm = lsmeans::lsmeans(compare_aov_1, c("StudyNo", "ChosenPrime"))
prime_effect = multcomp::cld(compare_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("ChosenPrime"))

knitr::kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.05))

@

\section {Comparing Prime Type Across Experiments}

<<>>=
## final_j contains all experiments

for(i in 1:nrow(final_j)){
  
  if(final_j[i,3] == "2" | final_j[i,3] == "4"){
    final_j[i,"Experiment"] = "Experiment1"
  }
  else if(final_j[i,3] == "5" | final_j[i,3] == "6"){
    final_j[i,"Experiment"] = "Experiment2"
  }
  else
    final_j[i,"Experiment"] = "Experiment3"
}


final_j$Experiment = as.factor(as.character(final_j$Experiment))

combined_targetacc = aov(data = final_j, Accuracy ~ PrimeCondition + 
                           Error(Subject/PrimeCondition))
summary(combined_targetacc)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
combined_targetacc_lsm = lsmeans::lsmeans(combined_targetacc, 
                                          c("PrimeCondition"))
prime_effect = cld(combined_targetacc_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE)

kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 1 ))


## PAIRWISE COMPARISONS

compare_p = final_j %>% filter(PrimeCondition == "Phonological")
compare_r = final_j %>% filter(PrimeCondition == "Related")
compare_b = final_j %>% filter(PrimeCondition == "Both")
compare_u = final_j %>% filter(PrimeCondition == "Unrelated")

t.test(compare_p$Accuracy, compare_r$Accuracy, paired = TRUE)
@

\section {Multiple Choice: Only R and B}

<<>>=
### EXPERIMENT 1 ####
## MULTIPLE CHOICE ACCURACY 
exp1_mcqacc_subset = subset(exp1_mcq_acc, exp1_mcq_acc$PrimeType == 'r' | 
                                exp1_mcq_acc$PrimeType == 'b')
exp1_mcqacc_subset_aov = aov(data = exp1_mcqacc_subset, MCQAcc ~ PrimeType + 
                              Error(Subject/PrimeType))
summary(exp1_mcqacc_subset_aov)

# ezANOVA(data = exp1_mcqacc_subset, wid = .(Subject),
#         dv = .(MCQAcc), within =.(PrimeType),
#         between = .(AgeGroup))

## MULTIPLE CHOICE ERRORS: only when they chose b or r

exp1_mcq_subset = subset(exp1_mcq, exp1_mcq$ChosenPrime == "r" | 
                            exp1_mcq$ChosenPrime == 'b')

## before we do ANOVA, we need to replace NAs with 0.

for (i in 1: nrow(exp1_mcq_subset)){
   if(is.na(exp1_mcq_subset[i,7])){
     exp1_mcq_subset[i,7] = 0
   }
  
}
exp1_mcq_subset_aov = aov(data = exp1_mcq_subset, Proportion ~ AgeGroup*PrimeType*ChosenPrime + 
                                  Error(Subject/(PrimeType*ChosenPrime)))
summary(exp1_mcq_subset_aov)

library(ez)
# ezANOVA(data = exp1_mcq_subset, wid = .(Subject),
#         dv = .(Proportion), within =.(PrimeType, ChosenPrime),
#         between = .(AgeGroup))

#### EXPERIMENT 2 #####

exp2_mcq_subset = subset(exp2_mcq, exp2_mcq$ChosenPrime == "r" | 
                            exp2_mcq$ChosenPrime == 'b')

## before we do ANOVA, we need to replace NAs with 0.

for (i in 1: nrow(exp2_mcq_subset)){
   if(is.na(exp2_mcq_subset[i,7])){
     exp2_mcq_subset[i,7] = 0
   }
  
}
exp2_mcq_subset_aov = aov(data = exp2_mcq_subset, Proportion ~ AgeGroup*PrimeType*ChosenPrime + 
                                  Error(Subject/(PrimeType*ChosenPrime)))
summary(exp2_mcq_subset_aov)

library(ez)
# ezANOVA(data = exp2_mcq_subset, wid = .(Subject),
#         dv = .(Proportion), within =.(PrimeType, ChosenPrime),
#         between = .(AgeGroup))

options(contrasts = c('contr.sum', 'contr.poly'))

exp2_errors_subset_lsm = lsmeans::lsmeans(exp2_mcq_subset_aov, 
                                          c("AgeGroup", "PrimeType", "ChosenPrime"))
prime_effect = cld(exp2_errors_subset_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("PrimeType", "ChosenPrime"))

kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.05))
@

\section {Recoding RPBU to Sound Meaning}

<<>>=
for(i in 1: nrow(final_j)) {
  
  if(final_j[i,5] == "Related"){
    final_j[i,7] = "No"
    final_j[i,8] = "Yes"
  }
  else if(final_j[i,5] == "Both"){
    final_j[i,7] = "Yes"
    final_j[i,8] = "Yes"
  }
  
  else if(final_j[i,5] == "Phonological"){
    final_j[i,7] = "Yes"
    final_j[i,8] = "No"

  }
  else {
    final_j[i,7] = "No"
    final_j[i,8] = "No"
  }
}

colnames(final_j) = c("AgeGroup", "Subject", "StudyNo", "PrimeInstruction", "PrimeCondition", 
                      "Accuracy", "Sound", "Meaning")

@

\section {Collapsing the 4 experiments}

<<>>=
final_mcq_main4 = subset(final_mcq, final_mcq$StudyNo != '1')

for (i in 1: nrow(final_mcq_main4)){
   if(is.na(final_mcq_main4[i,7])){
     final_mcq_main4[i,7] = 0
   }
}

fourway_aov = aov(data = final_mcq_main4, Proportion ~ AgeGroup*PrimeInstruction*PrimeType*ChosenPrime + Error(Subject/(PrimeType*ChosenPrime)))
summary(fourway_aov)


library(ez)
# ezANOVA(data = final_mcq_main4, wid = .(Subject),
#         dv = .(Proportion), within =.(PrimeType, ChosenPrime),
#         between = .(AgeGroup, PrimeInstruction)) ## IMPORTANT SPHERICITY

options(contrasts = c('contr.sum', 'contr.poly'))

fourway_lsm = lsmeans::lsmeans(fourway_aov, 
                                  c("AgeGroup", "PrimeInstruction", "PrimeType", "ChosenPrime"))
prime_effect = cld(fourway_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("AgeGroup", "PrimeType", "ChosenPrime"))

kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.05))

## SPECIFIC T-TEST

## Effect of Instruction on Young

## Semantic

y_r = final_mcq_main4 %>% filter(AgeGroup == "Young" & PrimeType == "r")
y_r_r_no = y_r %>% filter(PrimeInstruction == "NoInstruction" & ChosenPrime == "r")
y_r_r_yes = y_r %>% filter(PrimeInstruction != "NoInstruction" & ChosenPrime == "r")

t.test(y_r_r_no$Proportion, y_r_r_yes$Proportion)

## Both

y_b = final_mcq_main4 %>% filter(AgeGroup == "Young" & PrimeType == "b")
y_b_b_no = y_b %>% filter(PrimeInstruction == "NoInstruction" & ChosenPrime == "b")
y_b_b_yes = y_b %>% filter(PrimeInstruction != "NoInstruction" & ChosenPrime == "b")

t.test(y_b_b_no$Proportion, y_b_b_yes$Proportion)

## Effect of Instruction on Old

## Semantic
o_r = final_mcq_main4 %>% filter(AgeGroup == "Old" & PrimeType == "r")
o_r_r_no = o_r %>% filter(PrimeInstruction == "NoInstruction" & ChosenPrime == "r")
o_r_r_yes = o_r %>% filter(PrimeInstruction != "NoInstruction" & ChosenPrime == "r")

t.test(o_r_r_no$Proportion, o_r_r_yes$Proportion)

## Both

o_b = final_mcq_main4 %>% filter(AgeGroup == "Old" & PrimeType == "b")
o_b_b_no = o_b %>% filter(PrimeInstruction == "NoInstruction" & ChosenPrime == "b")
o_b_b_yes = o_b %>% filter(PrimeInstruction != "NoInstruction" & ChosenPrime == "b")

t.test(o_b_b_no$Proportion, o_b_b_yes$Proportion)

                                      

@

\section {Tables and Figures}

\subsection*{Experiment 1}
\subsubsection*{State data}


<<>>=

exp1_fig_state = Rmisc::summarySE(exp1_state_prime, 
                        measurevar = "Trials",
                        groupvars = c("AgeGroup", "PrimeCondition", "State"))

library(ggplot2)
library(ggthemes)
state_1 = exp1_fig_state %>% mutate(PrimeType = factor(PrimeCondition, 
                                                 levels = unique(PrimeCondition),
                    labels = c("Both", "Phonological", 
                               "Semantic", "Unrelated")),
                    RetrievalState = factor(State, levels = unique(State),
                            labels = c("Dont Know", "Know", "Other", "TOT")))%>%
ggplot(aes(x = PrimeType, y = Trials, 
                              fill = RetrievalState, group = RetrievalState))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - ci, ymax=Trials + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
  facet_wrap(~AgeGroup)+
 theme_few()+
  scale_fill_colorblind()+
    xlab("") + ylab("") + 
  ggtitle("E1: Young and Old Adults (Without Instructions)")  +
  ggtitle("E1: Young vs. Old (Without Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@

\subsubsection* {State by Prime}

<<>>=
exp1_fig_state_prime = Rmisc::summarySE(exp1_state_prime, 
                        measurevar = "Trials",
                        groupvars = c("PrimeCondition","State"))

library(ggplot2)
library(ggthemes)
state_1_prime = exp1_fig_state_prime %>% mutate(PrimeType = 
                                                  factor(PrimeCondition, 
                                                 levels = unique(PrimeCondition),
                    labels = c("Both", "Phonological", 
                               "Semantic", "Unrelated")),
                    RetrievalState = factor(State, 
                                    levels = unique(State),
                            labels = c("Dont Know", "Know", "Other", "TOT")))%>%
ggplot(aes(x = PrimeType, y = Trials, 
           group = RetrievalState, fill = RetrievalState))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - ci, ymax=Trials + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
scale_fill_colorblind()+
  xlab("") + ylab("") + 
  ggtitle("E1: Young and Old Adults (Without Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))

@

\subsubsection *{State ONLY}

<<>>=

exp1_fig_state_only = Rmisc::summarySE(exp1_state, 
                        measurevar = "Trials",
                        groupvars = c("AgeGroup", "State"))

exp1_fig_state_only =  arrange(exp1_fig_state_only, 
                               desc(AgeGroup))


library(ggplot2)
library(ggthemes)
state_1_only = exp1_fig_state_only %>% mutate(RetrievalState = factor(State, 
                                    levels = unique(State),
                            labels = c("Dont Know", "Know", "Other", "TOT")),
                            Age = factor(AgeGroup, levels = unique(AgeGroup),
                    labels = c("Young", "Old")))%>%
ggplot(aes(x = RetrievalState, y = Trials, 
           group = Age, fill = Age))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - ci, ymax=Trials + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("") + ylab("") + 
  ggtitle("E1: Young and Old Adults (Without Instructions)")  +
  ggtitle("E1: Young vs. Old (Without Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))

@

\subsubsection *{State ONLY}

<<>>=

exp1_fig_state_only = Rmisc::summarySE(exp1_state, 
                        measurevar = "Trials",
                        groupvars = c("AgeGroup", "State"))

exp1_fig_state_only =  arrange(exp1_fig_state_only, 
                               desc(AgeGroup))


library(ggplot2)
library(ggthemes)
state_1_only = exp1_fig_state_only %>% mutate(RetrievalState = factor(State, 
                                    levels = unique(State),
                            labels = c("Dont Know", "Know", "Other", "TOT")),
                            Age = factor(AgeGroup, levels = unique(AgeGroup),
                    labels = c("Young", "Old")))%>%
ggplot(aes(x = RetrievalState, y = Trials, 
           group = Age, fill = Age))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - ci, ymax=Trials + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("") + ylab("") + 
  ggtitle("E1: Young vs. Old (Without Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@



\subsubsection*{Target Accuracy}


<<>>=
exp1_fig_target = Rmisc::summarySE(exp1_target, 
                        measurevar = "Accuracy",
                        groupvars = c("AgeGroup", "primefac"))

exp1_fig_target =  arrange(exp1_fig_target, desc(AgeGroup))
            
library(ggplot2)
library(ggthemes)
targetacc_1 = exp1_fig_target %>% mutate(PrimeType = factor(primefac, 
                                                 levels = unique(primefac),
                    labels = c("Both",      "Semantic",
                          "Phonological",  "Unrelated")),
                    Age = factor(AgeGroup, levels = unique(AgeGroup),
                    labels = c("Young", "Old")))%>%
ggplot(aes(x = PrimeType, y = Accuracy, 
                              fill = Age, group = Age))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color = "black")+
  geom_errorbar(aes(ymin=Accuracy - se, ymax=Accuracy + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("") + ylab("Mean Target Accuracy") + 
  ggtitle("")  +
  theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1.2)),
         plot.title = element_text(hjust = .5),
          legend.text = element_text(face = "bold", size = rel(1.1)),
         axis.text.x = element_text(face = "bold", size = rel(1.2)),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@

\subsubsection*{For masters presentation}
<<>>=
exp1_fig_target = Rmisc::summarySE(exp1_target, 
                        measurevar = "Accuracy",
                        groupvars = c("agefac", "primefac"))

exp1_fig_target =  arrange(exp1_fig_target, desc(agefac))


            
library(ggplot2)
library(ggthemes)
targetacc_1 = exp1_fig_target %>% mutate(PrimeType = factor(primefac, 
                                                 levels = unique(primefac),
                    labels = c("Both",      "Semantic",
                          "Phonological",  "Unrelated")),
                    Age = factor(agefac, levels = unique(agefac),
                    labels = c("Young", "Old")))%>%
ggplot(aes(x = Age, y = Accuracy, 
                              fill = PrimeType, group = PrimeType))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color = "black")+
  geom_errorbar(aes(ymin=Accuracy - se, ymax=Accuracy + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
 scale_fill_manual(values = c( "lightsalmon", "red",
                               "paleturquoise3","lightgreen"))+  
  xlab("") + ylab("Mean Target Accuracy") + 
  ggtitle("")  +
  theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1.2)),
         plot.title = element_text(hjust = .5),
          legend.text = element_text(face = "bold", size = rel(1.1)),
         axis.text.x = element_text(face = "bold", size = rel(1.2)),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@


\subsubsection*{MCQ Table}

<<fig=TRUE>>=
## CODE BELOW IS IF WE WANT MCQ NUMBERS FOR SAME/DIFFERENT PRIME CHOICE
# for(i in 1:nrow(exp1_mcq)){
#   if(exp1_mcq[i,"PrimeType"] == exp1_mcq[i,"ChosenPrime"]){
#     exp1_mcq[i,"MCQChoice"] = "Same"
#   }
#   else {
#     exp1_mcq[i,"MCQChoice"] = "Different"
#   }
#   
# }
# 
# e1_mcq_yn = group_by(exp1_mcq, Subject, AgeGroup, StudyNo, 
#                          PrimeType, MCQChoice ) %>%
#                   summarise_at(vars(Proportion), sum)
# library(Rmisc)
# e1_mcq_agg_yn = summarySE(e1_mcq_agg, 
#                         measurevar = "Proportion",
#                         groupvars = c("AgeGroup", "PrimeType", "MCQChoice"))

## CODE BELOW ONLY FOR R AND B CHOICES in MCQ 

e1_mcq_agg = Rmisc::summarySE(exp1_mcq, 
                        measurevar = "Proportion",
                        groupvars = c("AgeGroup", "PrimeType", "ChosenPrime"))
                      

e1_mcq_main = e1_mcq_agg %>% filter(PrimeType %in% c("b", "r") & 
                                             ChosenPrime %in% c("b", "r"))

e1_mcq_main$ChoseThePrime = c("1_Yes", "2_No", "2_No", "1_Yes", 
                              "1_Yes", "2_No", "2_No", "1_Yes")

e1_mcq_main = dplyr::arrange(e1_mcq_main, desc(AgeGroup))
library(ggplot2)
library(ggthemes)
e1_mcq_main %>% mutate(PrimeCondition = factor(PrimeType, 
                                                 levels = unique(PrimeType),
                    labels = c("Phon+Sem","Semantic")),
                    Choice = factor(ChoseThePrime, 
                                                 levels = unique(ChoseThePrime),
                    labels = c("Prime Chosen","PrimeNotChosen")),
                    Age = factor(AgeGroup, levels = unique(AgeGroup),
                    labels = c("Young", "Old")))%>%
ggplot(aes(x = PrimeCondition, y = Proportion, 
                              fill = Choice, group = Choice))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color = "black")+
  geom_errorbar(aes(ymin=Proportion - ci, ymax=Proportion + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
  facet_wrap(~Age)+
 theme_few()+
  scale_fill_manual(values = c("white", "black"))+
    xlab("Prime Given") + ylab("Mean Proportion of Errors") + 
  ggtitle("Experiment 1: Multiple-Choice Errors")  +
   theme(axis.text = element_text(face = "bold", size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_blank(),
          plot.title = element_text(face = "bold", size = rel(1.5), hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))

## Stored and formatted in excel file: JuliePaperTables.xlsx
@

\subsection*{Experiment 2}
\subsubsection*{State data}


<<>>=

exp1_fig_state = Rmisc::summarySE(exp2_state_prime, 
                        measurevar = "Trials",
                        groupvars = c("AgeGroup", "PrimeCondition", "State"))

library(ggplot2)
library(ggthemes)
state_2 = exp1_fig_state %>% mutate(PrimeType = factor(PrimeCondition, 
                                                 levels = unique(PrimeCondition),
                    labels = c("Both", "Phonological", 
                               "Semantic", "Unrelated")),
                    RetrievalState = factor(State, levels = unique(State),
                            labels = c("Dont Know", "Know", "Other", "TOT")))%>%
ggplot(aes(x = PrimeType, y = Trials, 
                              fill = RetrievalState, group = RetrievalState))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - ci, ymax=Trials + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
  facet_wrap(~AgeGroup)+
 theme_few()+
 scale_fill_colorblind()+
    xlab("") + ylab("Mean Number of Trials") + 
  ggtitle("E2: Young and Old Adults (With Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@

\subsubsection* {State by Prime}

<<>>=

exp2_fig_state_prime = Rmisc::summarySE(exp2_state_prime, 
                        measurevar = "Trials",
                        groupvars = c("PrimeCondition","State"))

library(ggplot2)
library(ggthemes)
state_2_prime = exp2_fig_state_prime %>% mutate(PrimeType = 
                                                  factor(PrimeCondition, 
                                                 levels = unique(PrimeCondition),
                    labels = c("Both", "Phonological", 
                               "Semantic", "Unrelated")),
                    RetrievalState = factor(State, 
                                    levels = unique(State),
                            labels = c("Dont Know", "Know", "Other", "TOT")))%>%
ggplot(aes(x = PrimeType, y = Trials, 
           group = RetrievalState, fill = RetrievalState))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - ci, ymax=Trials + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
scale_fill_colorblind()+
   xlab("") + ylab("Mean Number of Trials") + 
  ggtitle("E2: Young and Old Adults (With Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@



\subsubsection *{State ONLY}

<<>>=

exp2_fig_state_only = Rmisc::summarySE(exp2_state, 
                        measurevar = "Trials",
                        groupvars = c("AgeGroup", "State"))

exp2_fig_state_only =  arrange(exp2_fig_state_only, 
                               desc(AgeGroup))


library(ggplot2)
library(ggthemes)
state_2_only = exp2_fig_state_only %>% mutate(RetrievalState = factor(State, 
                                    levels = unique(State),
                            labels = c("Dont Know", "Know", "Other", "TOT")),
                            Age = factor(AgeGroup, levels = unique(AgeGroup),
                    labels = c("Young", "Old")))%>%
ggplot(aes(x = RetrievalState, y = Trials, 
           group = Age, fill = Age))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - ci, ymax=Trials + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  scale_fill_manual(values = c("royalblue4", "slategray1"))+
   xlab("") + ylab("Mean Number of Trials") + 
  ggtitle("E2: Young and Old Adults (With Instructions)")  +
  ggtitle("E2: Young vs. Old (With Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@

\subsubsection* {State by Prime}

<<>>=
exp2_fig_state_prime = Rmisc::summarySE(exp2_state_prime, 
                        measurevar = "Trials",
                        groupvars = c("PrimeCondition","State"))

library(ggplot2)
library(ggthemes)
state_2_prime = exp2_fig_state_prime %>% mutate(PrimeType = 
                                                  factor(PrimeCondition, 
                                                 levels = unique(PrimeCondition),
                    labels = c("Both", "Phonological", 
                               "Semantic", "Unrelated")),
                    RetrievalState = factor(State, 
                                    levels = unique(State),
                            labels = c("Dont Know", "Know", "Other", "TOT")))%>%
ggplot(aes(x = PrimeType, y = Trials, 
           group = RetrievalState, fill = RetrievalState))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - ci, ymax=Trials + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
scale_fill_colorblind()+
   xlab("") + ylab("Mean Number of Trials") + 
  ggtitle("E2: Young vs. Old (With Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@



\subsubsection *{State ONLY}

<<>>=

exp2_fig_state_only = Rmisc::summarySE(exp2_state, 
                        measurevar = "Trials",
                        groupvars = c("AgeGroup", "State"))

exp2_fig_state_only =  arrange(exp2_fig_state_only, 
                               desc(AgeGroup))


library(ggplot2)
library(ggthemes)
state_2_only = exp2_fig_state_only %>% mutate(RetrievalState = factor(State, 
                                    levels = unique(State),
                            labels = c("Dont Know", "Know", "Other", "TOT")),
                            Age = factor(AgeGroup, levels = unique(AgeGroup),
                    labels = c("Young", "Old")))%>%
ggplot(aes(x = RetrievalState, y = Trials, 
           group = Age, fill = Age))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - ci, ymax=Trials + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("") + ylab("") + 
  ggtitle("E2: Young vs. Old (With Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@

\subsubsection*{Target Accuracy}

<<>>=
exp2_fig_target = Rmisc::summarySE(exp2_target, 
                        measurevar = "Accuracy",
                        groupvars = c("AgeGroup", "PrimeCondition"))
exp2_fig_target =  arrange(exp2_fig_target,desc(AgeGroup))
            
library(ggplot2)
library(ggthemes)
targetacc_2 = exp2_fig_target %>% mutate(PrimeType = factor(PrimeCondition, 
                                                 levels = unique(PrimeCondition),
                    labels = c("Both", "Phonological", 
                               "Semantic", "Unrelated")),
                    Age = factor(AgeGroup, levels = unique(AgeGroup),
                    labels = c("Young", "Old")))%>%
ggplot(aes(x = PrimeType, y = Accuracy, 
                              fill = Age, group = Age))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color = "black")+
  geom_errorbar(aes(ymin=Accuracy - se, ymax=Accuracy + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  scale_fill_manual(values = c("royalblue4", "slategray1"))+
   xlab("") + ylab("Mean Target Accuracy") + 
  ggtitle("Young and Old Adults (With Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1.2)),
         plot.title = element_text(hjust = .5),
          legend.text = element_text(face = "bold", size = rel(1.1)),
         axis.text.x = element_text(face = "bold", size = rel(1.2)),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@

\subsubsection*{For masters presentation}
<<>>=
exp2_fig_target = Rmisc::summarySE(exp2_target, 
                        measurevar = "Accuracy",
                        groupvars = c("agefac", "primefac"))

exp2_fig_target =  arrange(exp2_fig_target, desc(agefac))


            
library(ggplot2)
library(ggthemes)
targetacc_2 = exp2_fig_target %>% mutate(PrimeType = factor(primefac, 
                                                 levels = unique(primefac),
                    labels = c("Both",      "Semantic",
                          "Phonological",  "Unrelated")),
                    Age = factor(agefac, levels = unique(agefac),
                    labels = c("Young", "Old")))%>%
ggplot(aes(x = Age, y = Accuracy, 
                              fill = PrimeType, group = PrimeType))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color = "black")+
  geom_errorbar(aes(ymin=Accuracy - se, ymax=Accuracy + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
 scale_fill_manual(values = c( "lightsalmon", "red",
                               "paleturquoise3","lightgreen"))+  
  xlab("") + ylab("Mean Target Accuracy") + 
  ggtitle("")  +
  theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1.2)),
         plot.title = element_text(hjust = .5),
          legend.text = element_text(face = "bold", size = rel(1.1)),
         axis.text.x = element_text(face = "bold", size = rel(1.2)),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@


\subsubsection*{MCQ Table}

<<fig=TRUE>>=
e2_mcq_agg = Rmisc::summarySE(exp2_mcq, 
                        measurevar = "Proportion",
                        groupvars = c("AgeGroup", "PrimeType", "ChosenPrime"))

e2_mcq_main = e2_mcq_agg %>% filter(PrimeType %in% c("b", "r") & 
                                             ChosenPrime %in% c("b", "r"))
e2_mcq_main$ChoseThePrime = c("1_Yes", "2_No", "2_No", "1_Yes", 
                              "1_Yes", "2_No", "2_No", "1_Yes")
e2_mcq_main = arrange(e2_mcq_main, desc(AgeGroup))
library(ggplot2)
library(ggthemes)
e2_mcq_main %>% mutate(PrimeCondition = factor(PrimeType, 
                                                 levels = unique(PrimeType),
                    labels = c("Phon+Sem","Semantic")),
                    Choice = factor(ChoseThePrime, 
                                                 levels = unique(ChoseThePrime),
                    labels = c("Prime Chosen","PrimeNotChosen")),
                    Age = factor(AgeGroup, levels = unique(AgeGroup),
                    labels = c("Young", "Old")))%>%
ggplot(aes(x = PrimeCondition, y = Proportion, 
                              fill = Choice, group = Choice))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color = "black")+
  geom_errorbar(aes(ymin=Proportion - ci, ymax=Proportion + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
  facet_wrap(~Age)+
 theme_few()+
  scale_fill_manual(values = c("white", "black"))+
    xlab("Prime Given") + ylab("Mean Proportion of Errors") + 
  ggtitle("Experiment 2: Multiple-Choice Errors")  +
   theme(axis.text = element_text(face = "bold", size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_blank(),
          plot.title = element_text(face = "bold", size = rel(1.5), hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))

## Stored and formatted in excel file: JuliePaperTables.xlsx

@

\subsection*{Experiment 3}

\subsubsection*{State data}

<<>>=

exp3_fig_state =Rmisc::summarySE(exp3_state_prime, 
                        measurevar = "Trials",
                        groupvars = c("AgeGroup", "PrimeCondition", "State"))

library(ggplot2)
library(ggthemes)
state_3 = exp3_fig_state %>% mutate(PrimeType = factor(PrimeCondition, 
                                                 levels = unique(PrimeCondition),
                    labels = c("Both", "Phonological", 
                               "Semantic", "Unrelated")),
                    RetrievalState = factor(State, levels = unique(State),
                            labels = c("Dont Know", "Know", "Other", "TOT")))%>%
ggplot(aes(x = PrimeType, y = Trials, 
                              fill = RetrievalState, group = RetrievalState))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - ci, ymax=Trials + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
 scale_fill_colorblind()+
    xlab("Prime Condition") + ylab("") + 
  ggtitle("E3: Young Adults (Threshold Priming: 48 ms)")  +
  ggtitle("E3: Young (Threshold Priming: 48 ms)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@

\subsubsection* {State by Prime}

<<>>=
exp3_fig_state_prime = Rmisc::summarySE(exp3_state_prime, 
                        measurevar = "Trials",
                        groupvars = c("PrimeCondition","State"))

library(ggplot2)
library(ggthemes)
state_3_prime = exp3_fig_state_prime %>% mutate(PrimeType = 
                                                  factor(PrimeCondition, 
                                                 levels = unique(PrimeCondition),
                    labels = c("Both", "Phonological", 
                               "Semantic", "Unrelated")),
                    RetrievalState = factor(State, 
                                    levels = unique(State),
                            labels = c("Dont Know", "Know", "Other", "TOT")))%>%
ggplot(aes(x = PrimeType, y = Trials, 
           group = RetrievalState, fill = RetrievalState))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - ci, ymax=Trials + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
scale_fill_colorblind()+
    xlab("Prime Condition") + ylab("") + 
  ggtitle("E3: Young Adults (Threshold Priming: 48 ms)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@


\subsubsection *{State ONLY}

<<>>=

exp3_fig_state_only = Rmisc::summarySE(exp3_state, 
                        measurevar = "Trials",
                        groupvars = c("AgeGroup", "State"))


library(ggplot2)
library(ggthemes)
state_3_only = exp3_fig_state_only %>% mutate(RetrievalState = factor(State, 
                                    levels = unique(State),
                            labels = c("Dont Know", "Know", "Other", "TOT")),
                    Age = factor(AgeGroup, levels = unique(AgeGroup),
                    labels = c("Young")))%>%
ggplot(aes(x = RetrievalState, y = Trials, 
           fill = Age, group = Age))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, 
          color= "black")+
  geom_errorbar(aes(ymin=Trials - ci, ymax=Trials + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
      scale_fill_manual(values = c("royalblue4"))+
 theme_few()+
    xlab("") + ylab("") + 
  ggtitle("E3: Young Adults (Threshold Priming: 48 ms)")  +
  ggtitle("E3: Young (Threshold Priming: 48 ms)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@

\subsubsection *{State ONLY}

<<>>=

exp3_fig_state_only = Rmisc::summarySE(exp3_state, 
                        measurevar = "Trials",
                        groupvars = c("AgeGroup", "State"))


library(ggplot2)
library(ggthemes)
state_3_only = exp3_fig_state_only %>% mutate(RetrievalState = factor(State, 
                                    levels = unique(State),
                            labels = c("Dont Know", "Know", "Other", "TOT")),
                    Age = factor(AgeGroup, levels = unique(AgeGroup),
                    labels = c("Young")))%>%
ggplot(aes(x = RetrievalState, y = Trials, 
           fill = Age, group = Age))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, 
          color= "black")+
  geom_errorbar(aes(ymin=Trials - ci, ymax=Trials + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
      scale_fill_manual(values = c("royalblue4"))+
 theme_few()+
    xlab("") + ylab("") + 
  ggtitle("E3: Young (48 ms)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@


\subsubsection*{Target Accuracy}

<<>>=
exp3_fig_target = Rmisc::summarySE(exp3_target, 
                        measurevar = "Accuracy",
                        groupvars = c("AgeGroup", "PrimeCondition"))

library(ggplot2)
library(ggthemes)
targetacc_3 = exp3_fig_target %>% mutate(PrimeType = factor(PrimeCondition, 
                                                 levels = unique(PrimeCondition),
                    labels = c("Both", "Phonological", 
                               "Semantic", "Unrelated")),
                    Age = factor(AgeGroup, levels = unique(AgeGroup),
                    labels = c("Young")))%>%
ggplot(aes(x = PrimeType, y = Accuracy, fill = Age, group = Age))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color = "black")+
   geom_errorbar(aes(ymin=Accuracy - se, ymax=Accuracy + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  scale_fill_manual(values = c("royalblue4", "slategray1"))+
  #scale_fill_manual(values = c("darkred", "forestgreen"))+
   xlab("") + ylab("Mean Target Accuracy") + 
  ggtitle("")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1.2)),
         plot.title = element_text(hjust = .5),
          legend.text = element_text(face = "bold", size = rel(1.1)),
         axis.text.x = element_text(face = "bold", size = rel(1.2)),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@

\subsubsection*{For masters presentation}
<<>>=
exp3_fig_target = Rmisc::summarySE(exp3_target, 
                        measurevar = "Accuracy",
                        groupvars = c("agefac", "primefac"))

exp3_fig_target =  arrange(exp3_fig_target, desc(agefac))


            
library(ggplot2)
library(ggthemes)
targetacc_3 = exp3_fig_target %>% mutate(PrimeType = factor(primefac, 
                                                 levels = unique(primefac),
                    labels = c("Both",      "Semantic",
                          "Phonological",  "Unrelated")),
                    Age = factor(agefac, levels = unique(agefac),
                    labels = c("Young")))%>%
ggplot(aes(x = Age, y = Accuracy, 
                              fill = PrimeType, group = PrimeType))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color = "black")+
  geom_errorbar(aes(ymin=Accuracy - se, ymax=Accuracy + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
 scale_fill_manual(values = c( "lightsalmon", "red",
                               "paleturquoise3","lightgreen"))+  
  xlab("") + ylab("Mean Target Accuracy") + 
  ggtitle("")  +
  theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1.2)),
         plot.title = element_text(hjust = .5),
          legend.text = element_text(face = "bold", size = rel(1.1)),
         axis.text.x = element_text(face = "bold", size = rel(1.2)),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@

\subsubsection*{MCQ Table}

<<fig=TRUE>>=

e3_mcqoverall_agg = group_by(exp3_mcq, AgeGroup, PrimeType, ChosenPrime)%>%
  summarise_at(vars(MCQAcc), mean)

## Plotting

e3_mcq_agg = Rmisc::summarySE(exp3_mcq, 
                        measurevar = "Proportion",
                        groupvars = c("PrimeType", "ChosenPrime"))

e3_mcq_main = e3_mcq_agg %>% filter(PrimeType %in% c("b", "r") & 
                                             ChosenPrime %in% c("b", "r"))
e3_mcq_main$ChoseThePrime = c("1_Yes", "2_No", "2_No", "1_Yes")
library(ggplot2)
library(ggthemes)
e3_mcq_main %>% mutate(PrimeCondition = factor(PrimeType, 
                                                 levels = unique(PrimeType),
                    labels = c("Phon+Sem","Semantic")),
                    Choice = factor(ChoseThePrime, 
                                                 levels = unique(ChoseThePrime),
                    labels = c("Prime Chosen","Prime Not Chosen")))%>%
ggplot(aes(x = PrimeCondition, y = Proportion, 
                              fill = Choice, group = Choice))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color = "black")+
  geom_errorbar(aes(ymin=Proportion - ci, ymax=Proportion + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  scale_fill_manual(values = c("white", "black"))+
    xlab("Prime Given") + ylab("Mean Proportion of Errors") + 
  ggtitle("Experiment 3: Multiple-Choice Errors")  +
   theme(axis.text = element_text(face = "bold", size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_blank(),
          plot.title = element_text(face = "bold", size = rel(1.5), hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))

## Stored and formatted in excel file: JuliePaperTables.xlsx

@
\subsection *{E3 and E2 compare}

<<fig=TRUE>>=
exp3_fig_compare_1 = Rmisc::summarySE(exp3_compare_1, 
                        measurevar = "Proportion",
                        groupvars = c("StudyNo", "PrimeType", "ChosenPrime"))

exp3_fig_compare_2 = Rmisc::summarySE(exp3_compare_2, 
                        measurevar = "Proportion",
                        groupvars = c("StudyNo", "PrimeType", "ChosenPrime"))

e3_main_1 = exp3_fig_compare_1 %>% filter(PrimeType %in% c("b", "r") & 
                                             ChosenPrime %in% c("b", "r"))

e3_main_2 = exp3_fig_compare_2 %>% filter(PrimeType %in% c("b", "r") & 
                                             ChosenPrime %in% c("b", "r"))
                                          
exp3_mainfig =  full_join(e3_main_1, e3_main_2)

exp3_mainfig$ChoseThePrime = c("1_Yes", "2_No", "2_No", "1_Yes", 
                              "1_Yes", "2_No", "2_No", "1_Yes",
                              "1_Yes", "2_No", "2_No", "1_Yes")

exp3_mainfig5 = exp3_mainfig %>% filter(StudyNo== "5")
exp3_mainfig1 = exp3_mainfig %>% filter(StudyNo == "1")
exp3_mainfig6 = exp3_mainfig %>% filter(StudyNo == "6")


final_mainfig = rbind(exp3_mainfig6, exp3_mainfig1, exp3_mainfig5)
library(ggplot2)
library(ggthemes)
final_mainfig %>% mutate(PrimeCondition = factor(PrimeType, 
                                                 levels = unique(PrimeType),
                    labels = c("Both","Semantic")),
                    ChosenPrime = factor(ChosenPrime, 
                                                 levels = unique(PrimeType),
                    labels = c("Both","Semantic")),
                    Experiment = factor(StudyNo, 
                                                 levels = unique(StudyNo),
                    labels = c("E2 (Old:Instruction)","E3 (Young:Threshold)",
                               "E2 (Young:Instruction)")),
                    Choice = factor(ChoseThePrime, 
                                                 levels = unique(ChoseThePrime),
                    labels = c("Prime Chosen","Prime Not Chosen")))%>%
ggplot(aes(x = PrimeCondition, y = Proportion, 
                              fill = Choice, group = Choice))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color = "black")+
  geom_errorbar(aes(ymin=Proportion - se, ymax=Proportion + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
  facet_wrap(~Experiment)+
 theme_few()+
  scale_fill_manual(values = c("white", "black"))+
    xlab("Prime Given") + ylab("Mean Proportion of Errors") + 
  ggtitle("Experiment 2 vs 3: Multiple-Choice Errors")  +
   theme(axis.text = element_text(face = "bold", size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_blank(),
          plot.title = element_text(face = "bold", size = rel(1.5), hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@

\subsection *{Combined State Data}

<<fig=TRUE>>=
library(grid)
gridExtra::grid.arrange(state_1, state_2, state_3, nrow = 3, ncol = 1, 
                top=textGrob("Retrieval States Across Experiments 1, E2, E3", 
                                      gp=gpar(fontsize=20)))
@

\subsection *{Combined State Prime Data}

<<fig=TRUE>>=
library(grid)
gridExtra::grid.arrange(state_1_prime, state_2_prime, state_3_prime, 
                        nrow = 3, ncol = 1, 
                top=textGrob("Retrieval States Across Experiments E1, E2, E3", 
                                      gp=gpar(fontsize=20)))
@


\subsection *{Combined State ONLY Data}

<<fig=TRUE>>=
library(grid)
gridExtra::grid.arrange(state_1_only, state_2_only, state_3_only, 
                        nrow = 3, ncol = 1, 
                top=textGrob("Retrieval States Across Experiments E1, E2, E3", 
                                      gp=gpar(fontsize=20)))
@

\subsection * {Combined Target Accuracy Data}

<<fig=TRUE>>=
library(grid)
gridExtra::grid.arrange(targetacc_1, targetacc_2, targetacc_3, nrow = 3, ncol = 1, 
                top=textGrob("Target Accuracy Across Experiments 1, E2, E3", 
                                      gp=gpar(fontsize=20)))
@

\section {HLM Approaches}

<<fig=TRUE>>=
library(grid)
gridExtra::grid.arrange(state_1, state_2, state_3, nrow = 3, ncol = 1, 
                top=textGrob("Retrieval States Across Experiments 1, 2 and 3", 
                                      gp=gpar(fontsize=20)))
@

\subsection *{Combined State Prime Data}

<<fig=TRUE>>=
library(grid)
gridExtra::grid.arrange(state_1_prime, state_2_prime, state_3_prime, 
                        nrow = 3, ncol = 1, 
                top=textGrob("Retrieval States Across Experiments E1, E2, E3", 
                                      gp=gpar(fontsize=20)))
@


\subsection *{Combined State ONLY Data}

<<fig=TRUE>>=
library(grid)
gridExtra::grid.arrange(state_1_only, state_2_only, state_3_only, 
                        nrow = 3, ncol = 1, 
                top=textGrob("Retrieval States Across Experiments E1, E2, E3", 
                                      gp=gpar(fontsize=20)))
@

\subsection * {Combined Target Accuracy Data}

<<fig=TRUE>>=
library(grid)
gridExtra::grid.arrange(targetacc_1, targetacc_2, targetacc_3, nrow = 3, ncol = 1, 
                top=textGrob("Target Accuracy Across Experiments E1, E2, E3", 
                                      gp=gpar(fontsize=20)))
@


\section {M Turk Rating Data}

\subsection *{Calculating item level accuracies}

<<>>=
itemratings= read.csv("item_ratings_wide.csv", 
                             header = TRUE, sep = ",")

main = read.csv("Julie_Main5Studies.csv", header = TRUE, sep = ",")

## in the main data there are also unrelated trials. when merge() happens these
## unrelated trials will go away. 17400-4350 = 13050

main_item = merge(main, itemratings, by = c("Target", "PrimeCondition"))
main_item = dplyr::arrange(main_item, StudyNo, Subject, TargetNo, PrimeType)

## but we also need item-level accuracy data
library(dplyr)
item_acc = group_by(main_item, TargetNo) %>%
  summarise_at(vars(Accuracy), mean)
colnames(item_acc) = c("TargetNo", "ItemAcc")

main_item = merge(main_item, item_acc, by = c("TargetNo"))
main_item = dplyr::arrange(main_item, StudyNo, Subject, TargetNo, PrimeType)

## we will also center item accuracy 

main_item$ItemAcc.c = as.numeric(scale(main_item$ItemAcc, center = TRUE,
                                       scale = FALSE))
## Now we run an HLM for each prime condition separately
@

\subsection *{Predicting Accuracy Using Rating}

<<>>=
main_item$StudyNo = as.factor(as.character(main_item$StudyNo))
Phon = main_item %>% filter(PrimeCondition == "P" & 
                                  PrimeType == "Phonological")
                              
Sem = main_item %>% filter(PrimeCondition == "R" & 
                             PrimeType == "Semantic")
Both_Phon = main_item %>% filter(PrimeCondition == "B" & 
                                   PrimeType == "Both")
Both_Sem = main_item %>% filter(PrimeCondition == "B" & 
                                  PrimeType == "Both")
@

\subsubsection *{Models}
\subsubsection *{Models with Only Rating}

<<>>=
library(lme4)

phon_model = glmer(data = Phon, Accuracy ~ SoundRating + 
                     (1|Subject), family = "binomial")
summary(phon_model)

phon_model_2 = glmer(data = Phon, Accuracy ~ SoundRating + 
                     (1|Subject), family = "binomial")
summary(phon_model_2)

sem_model = glmer(data = Sem, Accuracy ~ MeaningRating*ItemAcc  + 
                     (1|Subject), family = "binomial")
summary(sem_model)

both_sem_model = glmer(data = Both_Sem, Accuracy ~ MeaningRating*ItemAcc  + 
                     (1|Subject), family = "binomial", 
    control=glmerControl(optimizer="bobyqa",
            optCtrl=list(maxfun=100000)))
summary(both_sem_model)

both_phon_model = glmer(data = Both_Phon, Accuracy ~ SoundRating*ItemAcc  + 
                     (1|Subject), family = "binomial", 
    control=glmerControl(optimizer="bobyqa",
            optCtrl=list(maxfun=100000)))
summary(both_phon_model)


## seems that ratings have an overall effect on accuracy, but not above and beyond the mean level accuracy of the item itself. 
@

\subsubsection *{Models with Rating and Average Performance}

<<>>=
library(lme4)

phon_model_2 = glmer(data = Phon, Accuracy ~ SoundRating*ItemAcc.c + 
                     (1|Subject), family = "binomial",
                     control=glmerControl(optimizer="bobyqa",
         optCtrl=list(maxfun=100000)))
summary(phon_model_2)

# computed profile likelihood CIs for each model

# > confint(phon_model_2)
# Computing profile confidence intervals ...
#                          2.5 %  97.5 %
# .sig01                 0.92257  1.2354
# (Intercept)           -2.40873 -1.2388
# SoundRating            0.02088  0.2602
# ItemAcc.c              3.29535  9.0498
# SoundRating:ItemAcc.c -0.51451  0.6982

sem_model_2 = glmer(data = Sem, Accuracy ~ MeaningRating*ItemAcc.c  + 
                     (1|Subject), family = "binomial",
                     control=glmerControl(optimizer="bobyqa",
         optCtrl=list(maxfun=100000)))
summary(sem_model_2)

# > confint(sem_model_2)
# Computing profile confidence intervals ...
#                           2.5 %   97.5 %
# .sig01                   0.8742  1.20718
# (Intercept)             -1.8260 -0.69259
# MeaningRating           -0.2655 -0.03193
# ItemAcc.c                1.3353  6.63141
# MeaningRating:ItemAcc.c  0.0662  1.18024

both_phon_model_2 = glmer(data = Both_Phon, Accuracy ~ SoundRating*ItemAcc.c  + 
                     (1|Subject), family = "binomial",
                     control=glmerControl(optimizer="bobyqa",
         optCtrl=list(maxfun=100000)))
summary(both_phon_model_2)

# > confint(both_phon_model_2)
# Computing profile confidence intervals ...
#                          2.5 %  97.5 %
# .sig01                 0.80811  1.1067
# (Intercept)           -2.6667 -1.6472
# SoundRating            0.01014  0.2304
# ItemAcc.c              5.93256 10.5726
# SoundRating:ItemAcc.c -0.90151  0.1174

both_sem_model_2 = glmer(data = Both_Sem, Accuracy ~ MeaningRating*ItemAcc.c  + 
                     (1|Subject), family = "binomial",
                     control=glmerControl(optimizer="bobyqa",
         optCtrl=list(maxfun=100000)))
summary(both_sem_model_2)

# > confint(both_sem_model_2)
# Computing profile confidence intervals ...
#                           2.5 %    97.5 %
# .sig01                   0.8072  1.105831
# (Intercept)             -1.6794 -0.724465
# MeaningRating           -0.2052  0.004835
# ItemAcc.c                5.2050  8.924420
# MeaningRating:ItemAcc.c -0.4912  0.299697


@

\subsection* {Plotting Model Fits: Rating and Mean Accuracy}

\subsubsection*{Phonological}

<<>>=
fixed.frame <- Phon %>% 
  dplyr::summarise(mean = mean(ItemAcc.c, na.rm = T), 
            sd = sd(ItemAcc.c, na.rm = T))

fixed.frame <-
  data.frame(
    expand.grid(
      # here, you add values for your time variable and predictors
      SoundRating = seq(1,7,1),
       ItemAcc.c = c(fixed.frame$mean-fixed.frame$sd,
                     fixed.frame$mean,
                     fixed.frame$mean+fixed.frame$sd))) 

fixed.frame$pred = predict(phon_model_2, newdata = fixed.frame, re.form = NA)
fixed.frame$odds = exp(fixed.frame$pred)
fixed.frame$prob = fixed.frame$odds/(1+fixed.frame$odds)

a2 = fixed.frame %>%
mutate(ItemAccuracy = factor(ItemAcc.c, levels = unique(ItemAcc.c),
                                 labels = c("-1SD", "0SD", "1SD"))) %>%
  ggplot(aes(x = SoundRating, y = prob, color = ItemAccuracy)) +
  geom_line(size = 1) +
        labs(x = "Sound Rating", 
             y = "",
         title = "Phonological Condition (Sound Rating)") +
  theme_few()+
    theme(axis.text = element_text(face = "bold", size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
          plot.title = element_text(face = "bold", size = rel(1), hjust = .5))
@


\subsubsection*{Semantic}

<<>>=
fixed.frame <- Sem %>% 
  dplyr::summarise(mean = mean(ItemAcc.c, na.rm = T), 
            sd = sd(ItemAcc.c, na.rm = T))

fixed.frame <-
  data.frame(
    expand.grid(
      # here, you add values for your time variable and predictors
      MeaningRating = seq(1,7,1),
       ItemAcc.c = c(fixed.frame$mean-fixed.frame$sd,
                     fixed.frame$mean,
                     fixed.frame$mean+fixed.frame$sd))) 

fixed.frame$pred = predict(sem_model_2, newdata = fixed.frame, re.form = NA)
fixed.frame$odds = exp(fixed.frame$pred)
fixed.frame$prob = fixed.frame$odds/(1+fixed.frame$odds)

b2 = fixed.frame %>%
mutate(ItemAccuracy = factor(ItemAcc.c, levels = unique(ItemAcc.c),
                                 labels = c("-1SD", "0SD", "1SD"))) %>%
  ggplot(aes(x = MeaningRating, y = prob, color = ItemAccuracy)) +
  geom_line(size = 1) +
          labs(x = "Meaning Rating", 
             y = "",
         title = "Semantic Condition (Meaning Rating)") +
  theme_few()+
    theme(axis.text = element_text(face = "bold", size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
          plot.title = element_text(face = "bold", size = rel(1), hjust = .5))
@

\subsubsection{BothSem}

<<>>=
fixed.frame <- Both_Phon %>% 
  dplyr::summarise(mean = mean(ItemAcc.c, na.rm = T), 
            sd = sd(ItemAcc.c, na.rm = T))

fixed.frame <-
  data.frame(
    expand.grid(
      # here, you add values for your time variable and predictors
      MeaningRating = seq(1,7,1),
       ItemAcc.c = c(fixed.frame$mean-fixed.frame$sd,
                     fixed.frame$mean,
                     fixed.frame$mean+fixed.frame$sd))) 

fixed.frame$pred = predict(both_sem_model_2, 
                           newdata = fixed.frame, re.form = NA)
fixed.frame$odds = exp(fixed.frame$pred)
fixed.frame$prob = fixed.frame$odds/(1+fixed.frame$odds)

c2 = fixed.frame %>%
mutate(ItemAccuracy = factor(ItemAcc.c, levels = unique(ItemAcc.c),
                                 labels = c("-1SD", "0SD", "1SD"))) %>%
  ggplot(aes(x = MeaningRating, y = prob, color = ItemAccuracy)) +
  geom_line(size = 1) +
           labs(x = "Meaning Rating", 
             y = "",
         title = "Both Condition (Meaning Rating)") +
  theme_few()+
    theme(axis.text = element_text(face = "bold", size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
          plot.title = element_text(face = "bold", size = rel(1), hjust = .5))
@

\subsubsection{BothPhon}

<<>>=
fixed.frame <- Both_Sem %>% 
  dplyr::summarise(mean = mean(ItemAcc.c, na.rm = T), 
            sd = sd(ItemAcc.c, na.rm = T))

fixed.frame <-
  data.frame(
    expand.grid(
      # here, you add values for your time variable and predictors
      SoundRating = seq(1,7,1),
       ItemAcc.c = c(fixed.frame$mean-fixed.frame$sd,
                     fixed.frame$mean,
                     fixed.frame$mean+fixed.frame$sd))) 

fixed.frame$pred = predict(both_phon_model_2, 
                           newdata = fixed.frame, re.form = NA)
fixed.frame$odds = exp(fixed.frame$pred)
fixed.frame$prob = fixed.frame$odds/(1+fixed.frame$odds)

d2 = fixed.frame %>%
mutate(ItemAccuracy = factor(ItemAcc.c, levels = unique(ItemAcc.c),
                                 labels = c("-1SD", "0SD", "1SD"))) %>%
  ggplot(aes(x = SoundRating, y = prob, color = ItemAccuracy)) +
  geom_line(size = 1) +
         labs(x = "Sound Rating", 
             y = "",
         title = "Both Condition (Sound Rating)") +
  theme_few()+
    theme(axis.text = element_text(face = "bold", size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
          plot.title = element_text(face = "bold", size = rel(1), hjust = .5))
@

<<fig=TRUE>>=
library(gridExtra)
grid.arrange(a2,b2,d2,c2, 
            top=textGrob("Target Retrieval Accuracy as a function of\nPrime-Target Association Ratings", 
                                      gp=gpar(fontsize=20)),
             left = textGrob("Predicted Probabilities for Target Retrieval Accuracy", rot = 90, vjust = 1, gp = gpar(fontsize = 15)))
@

\subsection {State RT data}

\subsubsection {z-scoring RTs}

<<>>=
state_firsttrim = main # %>% filter(State.RT > 250 )
## aggregate per subject all IVs and DVs
meanRT = group_by(state_firsttrim, Subject) %>%
  summarise_at(vars(State.RT), mean)
colnames(meanRT) = c("Subject", "MeanRT")

sdRT = group_by(state_firsttrim, Subject) %>%
  summarise_at(vars(State.RT), sd)
colnames(sdRT) = c("Subject", "sdRT")

RT_agg = merge(meanRT, sdRT, by = "Subject")

## merge aggregate info with long data
state_z = merge(state_firsttrim, RT_agg, by = "Subject", all.x = T)

## person and grand-mean centered scores using original and aggregate
library(dplyr)

## trimming z rt
state_z$Upper = state_z$MeanRT + 2.5*state_z$sdRT
state_z$Lower = state_z$MeanRT - 2.5*state_z$sdRT

state_z_trimmed = subset(state_z, state_z$State.RT < state_z$Upper & 
                           state_z$State.RT > state_z$Lower)
@

\subsubsection {State by Age by RT}
<<>>=
state_z_trimmed$Question.RESP = as.factor(state_z_trimmed$Question.RESP)
e1_stateRT = state_z_trimmed %>% filter(StudyNo == "2" | StudyNo == "4")
e2_stateRT = state_z_trimmed %>% filter(StudyNo == "5" | StudyNo == "6")
e3_stateRT = state_z_trimmed %>% filter(StudyNo == "1")
 
@

\subsubsection {E1}
<<fig=TRUE>>=
e1_stateRT_agg = group_by(e1_stateRT, AgeGroup, Subject, Question.RESP) %>%
   summarize_at(vars(State.RT), mean)

e1_stateRT_rmisc = Rmisc::summarySE(e1_stateRT_agg,
                                    measurevar = "State.RT",
                                    groupvars = c("AgeGroup", "Question.RESP"))

e1_stateRT_rmisc %>% mutate(RetrievalState = factor(Question.RESP, 
                                    levels = unique(Question.RESP),
                            labels = c("Know", "Don't Know", "Other", "TOT")),
                            Age = factor(AgeGroup, levels = unique(AgeGroup),
                    labels = c("Young", "Old")))%>%
  ggplot(aes(x = RetrievalState, y = State.RT, group = AgeGroup, 
             fill = AgeGroup)) +
   geom_bar(stat = "identity", position = "dodge", width = 0.6)+
  geom_errorbar(aes(ymin=State.RT - ci, ymax=State.RT + ci), 
             width=.1, color = "gray26", 
             position = position_dodge(0.5))+
 theme_few()+
  scale_fill_manual(values = c("slategray1", "royalblue4"))+
    xlab("Retrieval State") + ylab("Raw RT") + 
  ggtitle("Experiment 1: Retrieval State RTs by Age Group")  +
   theme(axis.text = element_text(face = "bold", size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
          plot.title = element_text(face = "bold", size = rel(1.4), hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))

@

\subsubsection {E2}
<<fig=TRUE>>=
e2_stateRT_agg = group_by(e2_stateRT, AgeGroup, Subject, Question.RESP) %>%
   summarize_at(vars(State.RT), mean)

e2_stateRT_rmisc = Rmisc::summarySE(e2_stateRT_agg,
                                    measurevar = "State.RT",
                                    groupvars = c("AgeGroup", "Question.RESP"))

e2_stateRT_rmisc %>% mutate(RetrievalState = factor(Question.RESP, 
                                    levels = unique(Question.RESP),
                            labels = c("Know", "Don't Know", "Other", "TOT")),
                            Age = factor(AgeGroup, levels = unique(AgeGroup),
                    labels = c("Young", "Old")))%>%
  ggplot(aes(x = RetrievalState, y = State.RT, group = AgeGroup, 
             fill = AgeGroup)) +
   geom_bar(stat = "identity", position = "dodge", width = 0.6)+
  geom_errorbar(aes(ymin=State.RT - ci, ymax=State.RT + ci), 
             width=.1, color = "gray26", 
             position = position_dodge(0.5))+
 theme_few()+
  scale_fill_manual(values = c("slategray1", "royalblue4"))+
    xlab("Retrieval State") + ylab("Raw RT") + 
  ggtitle("Experiment 2: Retrieval State RTs by Age Group")  +
   theme(axis.text = element_text(face = "bold", size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
          plot.title = element_text(face = "bold", size = rel(1.4), hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))

@

\subsubsection {E3}
<<fig=TRUE>>=
e3_stateRT_agg = group_by(e3_stateRT, AgeGroup, Subject, Question.RESP) %>%
   summarize_at(vars(State.RT), mean)

e3_stateRT_rmisc = Rmisc::summarySE(e3_stateRT_agg,
                                    measurevar = "State.RT",
                                    groupvars = c("AgeGroup", "Question.RESP"))

e3_stateRT_rmisc %>% mutate(RetrievalState = factor(Question.RESP, 
                                    levels = unique(Question.RESP),
                            labels = c("Know", "Don't Know", "Other", "TOT")),
                            Age = factor(AgeGroup, levels = unique(AgeGroup),
                    labels = c("Young")))%>%
  ggplot(aes(x = RetrievalState, y = State.RT, group = AgeGroup, 
             fill = AgeGroup)) +
   geom_bar(stat = "identity", position = "dodge", width = 0.6)+
  geom_errorbar(aes(ymin=State.RT - ci, ymax=State.RT + ci), 
             width=.1, color = "gray26", 
             position = position_dodge(0.5))+
 theme_few()+
  scale_fill_manual(values = c("royalblue4"))+
    xlab("Retrieval State") + ylab("Raw RT") + 
  ggtitle("Experiment 3: Retrieval State RTs")  +
   theme(axis.text = element_text(face = "bold", size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
          plot.title = element_text(face = "bold", size = rel(1.4), hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))

@

\subsection {HLMs}

<<>>>=
library(lme4)

e1_stateRT_hlm = lmer (data = e1_stateRT_agg, State.RT ~ Question.RESP*AgeGroup +
                         (1|Subject))
summary(e1_stateRT_hlm)
car::Anova(e1_stateRT_hlm)


e2_stateRT_hlm = lmer (data = e2_stateRT_agg, State.RT ~ Question.RESP*AgeGroup +
                         (1|Subject))
summary(e2_stateRT_hlm)
car::Anova(e2_stateRT_hlm)

e3_stateRT_hlm = lmer (data = e3_stateRT_agg, State.RT ~ Question.RESP +
                         (1|Subject))
summary(e3_stateRT_hlm)
car::Anova(e3_stateRT_hlm)

@


\section {Word Type Analysis}

<<>>=
main = read.csv("Julie_Main5Studies.csv", header = TRUE, sep = ",")
main$StudyNo = as.factor(main$StudyNo)
main$PrimeCondition = as.factor(main$PrimeCondition)


word_type = read.csv("ItemWordTypes.csv", header = TRUE, sep = ",")

main_word = merge(main, word_type, by = c("Target"))

library(dplyr)
word_type_prime = group_by(main_word, 
                         ExperimentName, AgeGroup,Subject, PrimeCondition, Proper) %>%
  summarise_at(vars(Accuracy), mean)
word_type_prime$Subject = as.factor(word_type_prime$Subject)

word_type_prime_E1 = word_type_prime %>% 
  filter(ExperimentName == "tot extended prime")

word_type_prime_E2 = word_type_prime %>% 
  filter(ExperimentName == "tot not the prime")

word_type_prime_E3 = word_type_prime %>% 
  filter(ExperimentName == "tot 48 ms")

word_type_age = group_by(main_word, ExperimentName,
                         AgeGroup, Proper) %>%
  summarise_at(vars(Accuracy), mean)


word_type_state_sub = group_by(main_word, Subject, 
                           Proper, Question.RESP) %>%
  summarise(Trials = n())

word_type_state_experiment = group_by(main_word, ExperimentName, 
                           Proper, Question.RESP) %>%
  summarise(Trials = n())

word_type_state_sub_age = group_by(main_word, Subject, AgeGroup,
                           Proper, Question.RESP) %>%
  summarise(Trials = n())

@

\subsection{E1 E2 E3: proper name ANOVA}

<<>>=
e1_proper_aov = aov(data = word_type_prime_E1, Accuracy ~ AgeGroup*PrimeCondition*Proper +
                                      Error(Subject/(PrimeCondition*Proper)))
summary(e1_proper_aov)

e2_proper_aov = aov(data = word_type_prime_E2, Accuracy ~ AgeGroup*PrimeCondition*Proper +
                                      Error(Subject/(PrimeCondition*Proper)))
summary(e2_proper_aov)

e3_proper_aov = aov(data = word_type_prime_E3, Accuracy ~ PrimeCondition*Proper +
                                      Error(Subject/(PrimeCondition*Proper)))
summary(e3_proper_aov)
@

\subsection * {Word Type, Experiment and Prime Type}
<<fig=TRUE>>=
library(ggplot2)
library(ggthemes)
word_type_prime_E1 %>% 
ggplot(aes(x = PrimeCondition, y = Accuracy, 
           group = Proper, fill = Proper))+
 geom_bar(stat = "identity", position = "dodge", 
          width = 0.7, color = "black")+
 theme_few()+
  facet_wrap(~ExperimentName)+
  xlab("Prime") + ylab("Mean Accuracy") + 
  ggtitle("Word Types and Accuracy across Primes")  +
   theme(axis.text = element_text(face = "bold", size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
     plot.title = element_text(face = "bold", size = rel(1.5), hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@

\subsection * {Word Type and AgeGroup}
<<fig=TRUE>>=
library(ggplot2)
library(ggthemes)
word_type_age %>% filter(ExperimentName == "tot not the prime") %>%
ggplot(aes(x = AgeGroup, y = Accuracy, 
           group = Proper, fill = Proper))+
 geom_bar(stat = "identity", position = "dodge", 
          width = 0.7, color = "black")+
 theme_few()+
    #facet_wrap(~ExperimentName)+
  xlab("Age Group") + ylab("Mean Accuracy") + 
  ggtitle("Word Types and Accuracy across Age Groups")  +
   theme(axis.text = element_text(face = "bold", size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
     plot.title = element_text(face = "bold", size = rel(1.5), hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@

\subsection * {Word Type and Prime}
<<fig=TRUE>>=
library(ggplot2)
library(ggthemes)
word_type_prime %>% 
ggplot(aes(x = PrimeCondition, y = Accuracy, 
           group = Proper, fill = Proper))+
 geom_bar(stat = "identity", position = "dodge", 
          width = 0.7, color = "black")+
 theme_few()+
    facet_wrap(~ExperimentName)+
  xlab("Age Group") + ylab("Mean Accuracy") + 
  ggtitle("Word Types and Accuracy across Age Groups")  +
   theme(axis.text = element_text(face = "bold", size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
     plot.title = element_text(face = "bold", size = rel(1.5), hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@

\subsection * {Word Type and State}
<<>>=
library(ggplot2)
library(ggthemes)
word_type_state_sub$Question.RESP = as.factor(word_type_state_sub$Question.RESP)

word_type_state = Rmisc::summarySE(word_type_state_sub, 
                        measurevar = "Trials",
                        groupvars = c("Proper", "Question.RESP"))

word_type_state %>% 
  mutate(RetrievalState = factor(Question.RESP, 
                                    levels = unique(Question.RESP),
                  labels = c("Know", "Dont Know", "Other", "TOT")))%>%
ggplot(aes(x = RetrievalState, y = Trials, 
           group = Proper, fill = Proper))+
 geom_bar(stat = "identity", position = "dodge", 
          width = 0.7, color = "black")+
 theme_few()+
  xlab("State") + ylab("Mean Trials") + 
  ggtitle("Word Types and Trials across States")  +
   theme(axis.text = element_text(face = "bold", size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
     plot.title = element_text(face = "bold", size = rel(1.5), hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@



\subsection * {Word Type, Age and State}
<<fig=TRUE>>=
library(ggplot2)
library(ggthemes)

word_type_state_age = Rmisc::summarySE(word_type_state_sub_age, 
                        measurevar = "Trials",
                        groupvars = c("AgeGroup", "Proper", "Question.RESP"))

word_type_state_age %>% 
  mutate(RetrievalState = factor(Question.RESP, 
                                    levels = unique(Question.RESP),
                  labels = c("Know", "Dont Know", "Other", "TOT")))%>%
ggplot(aes(x = RetrievalState, y = Trials, 
           group = AgeGroup, fill = AgeGroup))+
 geom_bar(stat = "identity", position = "dodge", 
          width = 0.7, color = "black")+
 theme_few()+
  facet_wrap(~Proper)+
  xlab("State") + ylab("Mean Trials") + 
  ggtitle("Word Types and Trials Across State and Age")  +
   theme(axis.text = element_text(face = "bold", size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
     plot.title = element_text(face = "bold", size = rel(1.5), hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@

\subsection {HLMs with WordType}

\subsubsection {Target Accuracy}
<<>>=
contrasts(main_word$PrimeCondition) = contr.treatment(4, base = 2)
contrasts(main_word$AgeGroup) = contr.treatment(2, base = 1)
contrasts(main_word$Proper) = contr.treatment(2, base = 1)

e1_proper = main_word %>% filter(StudyNo == "2" | StudyNo == "4")
e2_proper = main_word %>% filter(StudyNo == "5" | StudyNo == "6")
e3_proper = main_word %>% filter(StudyNo == "1")


exp1_acc_hlm_M1 = glmer(data = e1_proper ,
                        Accuracy ~ AgeGroup*PrimeCondition*Proper +
                        (1|Subject) + (1|Target), family = "binomial", 
    control=glmerControl(optimizer="bobyqa",
            optCtrl=list(maxfun=100000)))
summary(exp1_acc_hlm_M1)
car::Anova(exp1_acc_hlm_M1)
sjPlot::plot_model(exp1_acc_hlm_M1, type = "pred", 
                   terms = c("AgeGroup","Proper"))

## OA better than YA for proper names than words

#sjPlot::plot_model(exp1_acc_hlm_M1, type = "pred", 
 #                  terms = c("Proper","PrimeCondition"))

## Words show more phon. facilitation than Proper Names

exp2_acc_hlm_M1 = glmer(data = e2_proper ,
                        Accuracy ~ AgeGroup*PrimeCondition*Proper +
                        (1|Subject) + (1|Target), family = "binomial", 
    control=glmerControl(optimizer="bobyqa",
            optCtrl=list(maxfun=100000)))
summary(exp2_acc_hlm_M1)
car::Anova(exp2_acc_hlm_M1)
#sjPlot::plot_model(exp2_acc_hlm_M1, type = "pred", 
 #                  terms = c("AgeGroup","Proper"))

# Not clear what this interaction is: OA worse than YA in Words


exp3_acc_hlm_M1 = glmer(data = e3_proper ,
                        Accuracy ~ PrimeCondition*Proper +
                        (1|Subject) + (1|Target), family = "binomial", 
    control=glmerControl(optimizer="bobyqa",
            optCtrl=list(maxfun=100000)))
summary(exp1_acc_hlm_M1)
car::Anova(exp3_acc_hlm_M1)
#sjPlot::plot_model(exp3_acc_hlm_M1, type = "int")


exp1_plot_data <- effects::effect("PrimeCondition*Proper", 
                                    exp2_acc_hlm_M1,
 xlevels = list(PrimeCondition = c("B", "P","R", "U"),
                AgeGroup = c("Young", "Old"),
                Proper = c("ProperName", "Word")))
# plot(exp1_plot_data, main = "Exp1: WordType x PrimeCondition")
 
 exp1_plot_data <- effects::effect("AgeGroup*Proper", 
                                    exp1_acc_hlm_M1,
 xlevels = list(PrimeCondition = c("B", "P","R", "U"),
                AgeGroup = c("Young", "Old"),
                Proper = c("ProperName", "Word")))
 t1 = plot(exp1_plot_data, main = "Exp1: WordType x Age")
 
 exp2_plot_data <- effects::effect("AgeGroup*Proper", 
                                    exp2_acc_hlm_M1,
 xlevels = list(PrimeCondition = c("B", "P","R", "U"),
                AgeGroup = c("Young", "Old"),
                Proper = c("ProperName", "Word")))
 t2 =plot(exp1_plot_data, main = "Exp2: WordType x Age")

 #gridExtra::grid.arrange(t1,t2, nrow = 1, ncol = 2)
@

\subsubsection {States: E3}

<<fig=TRUE>>=
### MULTINOMIAL LOGISTIC REGRESSION ###

library(nnet)
library(dplyr)

e3_proper$State = ifelse(e3_proper$Question.RESP == "1", "Know",
                      (ifelse(e3_proper$Question.RESP == "2", "DontKnow",
                  ifelse(e3_proper$Question.RESP == "3", "Other", "TOT"))))


e3_proper_state_multinomial = nnet::multinom(data = e3_proper, 
                         State ~ Proper*PrimeCondition +
                        (1|Subject))
summary(e3_proper_state_multinomial)
car::Anova(e3_proper_state_multinomial)

exp3_state_data <- effects::effect("Proper*PrimeCondition", 
                                    e3_proper_state_multinomial,
 xlevels = list(PrimeCondition = c("B", "P","R", "U"),
                                Proper = c("ProperName", "Word")))

 plot(exp3_state_data,main = "Exp 3: WordType x PrimeCondition")

@

\subsubsection {States: E2}

<<>>=
### MULTINOMIAL LOGISTIC REGRESSION ###

library(nnet)
library(dplyr)

e2_proper$State = ifelse(e2_proper$Question.RESP == "1", "Know",
                      (ifelse(e2_proper$Question.RESP == "2", "DontKnow",
                ifelse(e2_proper$Question.RESP == "3", "Other", "TOT"))))


e2_proper_state_multinomial = nnet::multinom(data = e2_proper, 
                         State ~Proper*PrimeCondition*AgeGroup +
                        (1|Subject))
summary(e2_proper_state_multinomial)
car::Anova(e2_proper_state_multinomial)

exp2_state_data <- effects::effect("Proper*AgeGroup", 
                                    e2_proper_state_multinomial,
 xlevels = list(PrimeCondition = c("B", "P","R", "U"),
                AgeGroup = c("Young", "Old"),                                                Proper = c("ProperName", "Word")))

 s2 = plot(exp2_state_data,main = "Exp 2: WordType x Age")

@
\subsubsection {States: E1}
<<>>=
### MULTINOMIAL LOGISTIC REGRESSION ###

library(nnet)
library(dplyr)

e1_proper$State = ifelse(e1_proper$Question.RESP == "1", "Know",
                      (ifelse(e1_proper$Question.RESP == "2", "DontKnow",
                 ifelse(e1_proper$Question.RESP == "3", "Other", "TOT"))))


e1_proper_state_multinomial = nnet::multinom(data = e1_proper, 
                         State ~ Proper*PrimeCondition*AgeGroup +
                        (1|Subject))
summary(e1_proper_state_multinomial)
car::Anova(e1_proper_state_multinomial)

exp1_state_data <- effects::effect("Proper*AgeGroup", 
                                    e1_proper_state_multinomial,
 xlevels = list(PrimeCondition = c("B", "P","R", "U"),
                AgeGroup = c("Young", "Old"),                                                Proper = c("ProperName", "Word")))
s1 = plot(exp1_state_data, main = "Exp 1: WordType x Age")

@

<<fig=TRUE>>=
gridExtra::grid.arrange(s1,s2, nrow = 1, ncol = 2)
@

\subsubsection {E3: Multiple Choice Errors}

<<fig=TRUE>>=
library(nnet)
library(dplyr)

e3_proper_hlm_multinomial = e3_proper %>% filter(!WhichPrime %in% c("0", "X"))

contrasts(e3_proper_hlm_multinomial$WhichPrime) = contr.treatment(6, base = 2)
contrasts(e3_proper_hlm_multinomial$PrimeCondition) = contr.treatment(4, base = 1)

e3_proper_mcq_error_multinomial = nnet::multinom(data = 
                                                   e3_proper_hlm_multinomial, 
                         WhichPrime ~ Proper*PrimeCondition +
                        (1|Subject))
summary(e3_proper_mcq_error_multinomial)
car::Anova(e3_proper_mcq_error_multinomial)


exp3_plot_data <- effects::effect("PrimeCondition", 
                                    e3_proper_mcq_error_multinomial,
 xlevels = list(PrimeCondition = c("B", "P","R", "U"),
                                Proper = c("ProperName", "Word")))
 plot(exp3_plot_data)
@

\subsubsection {E2:Multiple Choice Errors}

<<>>=
### MULTINOMIAL LOGISTIC REGRESSION ###

library(nnet)
library(dplyr)

e2_proper_hlm_multinomial = e2_proper %>% filter(!WhichPrime %in% c("0", "X"))

contrasts(e2_proper_hlm_multinomial$WhichPrime) = contr.treatment(6, base = 2)
contrasts(e2_proper_hlm_multinomial$PrimeCondition) = contr.treatment(4, base = 1)

e2_proper_mcq_error_multinomial = nnet::multinom(data = 
                                                   e2_proper_hlm_multinomial, 
                         WhichPrime ~ Proper*PrimeCondition*AgeGroup +
                        (1|Subject))
summary(e2_proper_mcq_error_multinomial)
car::Anova(e2_proper_mcq_error_multinomial)


exp2_plot_data <- effects::effect("Proper*AgeGroup", 
                                    e2_proper_mcq_error_multinomial,
 xlevels = list(PrimeCondition = c("B", "P","R", "U"),
                AgeGroup = c("Young", "Old")))
m2= plot(exp2_plot_data, main = "Exp2: Multiple Choice Errors")

@


\subsubsection {E1: Multiple Choice Errors}

<<>>=
### MULTINOMIAL LOGISTIC REGRESSION ###

library(nnet)
library(dplyr)

e1_proper_hlm_multinomial = e1_proper %>% filter(!WhichPrime %in% c("0", "X"))

contrasts(e1_proper_hlm_multinomial$WhichPrime) = contr.treatment(6, base = 2)
contrasts(e1_proper_hlm_multinomial$PrimeCondition) = contr.treatment(4, base = 1)

e1_proper_mcq_error_multinomial = nnet::multinom(data = 
                                                   e1_proper_hlm_multinomial, 
                         WhichPrime ~ Proper*PrimeCondition*AgeGroup +
                        (1|Subject))
summary(e1_proper_mcq_error_multinomial)
car::Anova(e1_proper_mcq_error_multinomial)


exp1_plot_data <- effects::effect("Proper*AgeGroup", 
                                    e1_proper_mcq_error_multinomial,
 xlevels = list(PrimeCondition = c("B", "P","R", "U"),
                AgeGroup = c("Young", "Old")))
 m1 = plot(exp1_plot_data, main = "Exp1: Multiple Choice Errors")

@

<<fig=TRUE>>=
 gridExtra::grid.arrange(m1,m2, nrow = 1, ncol = 2)
@


\section {Item Analyses}

\subsection {Using AGG data}

<<echo=FALSE>>=
j <- read.csv("MainJulie_ItemAgg.csv", header = TRUE, sep = ",")
j_agg <-j[, c(1,2,3,4, 5, 6,19,20,21,22)]
#wide to long conversion
library(tidyr)
j_agg_long <- j_agg %>%
  gather(PrimeCondition, Accuracy, value.racc, value.pacc, value.bacc, value.uacc)

#ordered by subject
final_j <- j_agg_long[order(j_agg_long$value.Target),]

#changing chars to factors
colnames(final_j) = c("AgeGroup", "StudyNo", "Target","TargetNo", 
                      "WordType", "Proper", 
                      "PrimeCondition", "Accuracy")
final_j$Target <- as.factor(final_j$Target)
final_j$PrimeCondition <- as.factor(final_j$PrimeCondition)
final_j$AgeGroup = as.factor(final_j$AgeGroup)

final_j$PrimeCondition = sub("value.bacc", "Both", final_j$PrimeCondition)
final_j$PrimeCondition = sub("value.racc", "Related", final_j$PrimeCondition)
final_j$PrimeCondition = sub("value.pacc", "Phonological", final_j$PrimeCondition)
final_j$PrimeCondition = sub("value.uacc", "Unrelated", final_j$PrimeCondition)
final_j$PrimeCondition = as.factor(as.character(final_j$PrimeCondition))

### MCQ DATA
j_mcq <-j[, c(1,2,3,4, 5,6, 49:68)] 
j_mcq_big = j[,c(1,2,3,23:26)]

#wide to long conversion
library(tidyr)
j_mcq_long <- j_mcq %>%
  gather(PrimeCondition, Proportion, 
         value.wrong_r_r, value.wrong_r_p, value.wrong_r_b, value.wrong_r_u,
         value.wrong_p_r, value.wrong_p_p, value.wrong_p_b, value.wrong_p_u,
         value.wrong_b_r, value.wrong_b_p, value.wrong_b_b, value.wrong_b_u,
         value.wrong_u_r, value.wrong_u_p, value.wrong_u_b, value.wrong_u_u)

 j_overall_mcq = gather(data = j_mcq_big, PrimeCondition, MCQAcc, 
                  value.rmcq, value.pmcq, value.bmcq, value.umcq)

#ordered by subject
final_mcq <- j_mcq_long[order(j_mcq_long$value.Target),]
final_mcq <- final_mcq[, -c(7:10)]

#Separating PrimeCondition and ChosenPrime
final_mcq$PrimeCondition = sub("*............", "", final_mcq$PrimeCondition)
final_mcq = separate(data = final_mcq, PrimeCondition, c("PrimeType", "ChosenPrime"), sep = "_" )

j_overall_mcq$PrimeCondition <- sub("*......", "", j_overall_mcq$PrimeCondition)
j_overall_mcq$PrimeCondition <- sub("mcq", "", j_overall_mcq$PrimeCondition)
j_overall_mcq <- j_overall_mcq[order(j_overall_mcq$value.Target),]

#renaming columns
colnames(j_overall_mcq) = c("AgeGroup","StudyNo",
                            "Target", "PrimeType" ,"MCQAcc")
colnames(final_mcq) = c("AgeGroup",  "StudyNo","Target", "TargetNo",
                        "WordType", "Proper",
                        "PrimeType", "ChosenPrime", "Proportion")

#dataset is in order!
##Note: final_mcq_overall contains all MCQ errors + overall MCQ accuracy for each subject
## in each prime condition

final_mcq = merge(final_mcq, j_overall_mcq, by = c("AgeGroup", "StudyNo", "Target", "PrimeType"))
final_mcq <- final_mcq[order(final_mcq$Target),]


final_mcq$AgeGroup <- as.factor(as.character(final_mcq$AgeGroup))
final_mcq$Target <- as.factor(as.character(final_mcq$Target))
final_mcq$StudyNo <- as.factor(as.character(final_mcq$StudyNo))
final_mcq$PrimeType <- as.factor(as.character(final_mcq$PrimeType))
final_mcq$ChosenPrime <- as.factor(as.character(final_mcq$ChosenPrime))

### STATE DATA


statedata <- read.csv("MainJulie_ItemAgg.csv", header = TRUE, sep = ",")

statedata_agg <-statedata[, c(1,2,3,4, 5,6, 70, 71, 72, 73)] 

#wide to long conversion
library(tidyr)
statedata_agg_long <- statedata_agg %>%
  gather(State, Trials, value.know, value.dontknow, value.other, value.TOT)

#ordered by subject
final_statedata <- statedata_agg_long[order(statedata_agg_long$value.Target),]

final_statedata$State = sub("*......", "", final_statedata$State)

#dataset is in order!
colnames(final_statedata) = c("AgeGroup",  "StudyNo", "Target","TargetNo",
                              "WordType", "Proper", 
                        "State", "Trials")

## also need this split across prime type

library(tidyr)
library(dplyr)
statedata_agg_primetype = statedata[, c(1,2,3,4, 5,6, 27:42)] 
statedata_primetype_long <- statedata_agg_primetype %>%
  gather(StatePrime, Trials, 
         value.r_know, value.r_dontknow, value.r_other, value.r_TOT,
         value.p_know, value.p_dontknow, value.p_other, value.p_TOT,
         value.b_know, value.b_dontknow, value.b_other, value.b_TOT,
         value.u_know, value.u_dontknow, value.u_other, value.u_TOT) %>%
  separate(StatePrime, c('Prime', 'State'), sep = "_") %>%
  arrange(value.Target)

statedata_primetype_long$Prime = sub("*......", "", 
                                     statedata_primetype_long$Prime)
colnames(statedata_primetype_long) = c("AgeGroup",  "StudyNo", 
                                       "Target","TargetNo",
                                       "WordType", "Proper",
                                       "PrimeCondition", "State", "Trials")
final_statedata$AgeGroup <- as.factor(final_statedata$AgeGroup)
final_statedata$Target <- as.factor(final_statedata$Target)
final_statedata$StudyNo <- as.factor(final_statedata$StudyNo)
final_statedata$State <- as.factor(final_statedata$State)

### STATE DATA SPLIT BY TARGET ACCURACY

data = read.csv("Julie_Main5studies.csv", header = TRUE, sep = ",")
library(dplyr)
data_state_acc = group_by(data, Subject, AgeGroup, 
                          StudyNo, Accuracy, Question.RESP)%>%
  summarise(Trials = n())

exp_1_state_acc = data_state_acc %>% filter(StudyNo == "2" | StudyNo == "4")
exp_2_state_acc = data_state_acc %>% filter(StudyNo == "5" | StudyNo == "6")
exp_3_state_acc = data_state_acc %>% filter(StudyNo == "1")


@

<<>>=
main = read.csv("Julie_Main5Studies.csv", header = TRUE, sep = ",")
main$StudyNo = as.factor(main$StudyNo)
main$PrimeCondition = as.factor(main$PrimeCondition)

main_wide = read.csv("MainJulieagg_5studies.csv", header = TRUE, sep = ",")

library(dplyr)
e1_hlm = main %>% filter(StudyNo == "2" | StudyNo == "4")
e2_hlm = main %>% filter(StudyNo == "5" | StudyNo == "6")
e3_hlm = main %>% filter(StudyNo == "1")
@

\subsection {Experiment 1}

<<>>=
e1_item_acc = group_by(e1_hlm, Target, AgeGroup, PrimeCondition) %>%
  summarise_at(vars(Accuracy), mean)

e1_item_state = group_by(e1_hlm, Target, AgeGroup, Question.RESP) %>%
  summarise(StateCount = n())

e1_item_mcqacc = group_by(e1_hlm, Target, AgeGroup, PrimeCondition) %>%
  summarise_at(vars(McAcc), mean)
@

\subsubsection {Target Accuracy}

<<>>=
### TARGET RETRIEVAL ACCURACY

exp1_item_acc = aov(data = e1_item_acc, Accuracy ~ AgeGroup*PrimeCondition + 
                                Error (Target/(AgeGroup*PrimeCondition)))
summary(exp1_item_acc)


options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
exp1_target_lsm = lsmeans::lsmeans(exp1_item_acc, 
                                   c("AgeGroup", "PrimeCondition"))
prime_effect = cld(exp1_target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("AgeGroup"))
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

## specific t-tests
e1_item_acc_collapsed = group_by(e1_hlm, Target, PrimeCondition) %>%
  summarise_at(vars(Accuracy), mean)

target_p = e1_item_acc_collapsed %>% filter(PrimeCondition == "P")
target_r = e1_item_acc_collapsed %>% filter(PrimeCondition == "R")
target_b = e1_item_acc_collapsed %>% filter(PrimeCondition == "B")
target_u = e1_item_acc_collapsed %>% filter(PrimeCondition == "U")


t.test(target_p$Accuracy, target_r$Accuracy, paired = TRUE)
t.test(target_p$Accuracy, target_b$Accuracy, paired = TRUE)
t.test(target_p$Accuracy, target_u$Accuracy, paired = TRUE)

t.test(target_b$Accuracy, target_r$Accuracy, paired = TRUE)
t.test(target_b$Accuracy, target_u$Accuracy, paired = TRUE)
t.test(target_r$Accuracy, target_u$Accuracy, paired = TRUE)
@

\subsubsection {State Data}

<<>>=
## e1_item_state has many rows missing so we cannot use that dataset. 
## we will use the Julieagg.R file to create an agg file for items. 

exp1_state = subset(final_statedata, final_statedata$StudyNo == '2' | 
                                  final_statedata$StudyNo == '4')
exp1_state_prime = subset(statedata_primetype_long, 
                          statedata_primetype_long$StudyNo == '2' | 
                                  statedata_primetype_long$StudyNo == '4')

exp1_state_prime$PrimeCondition = as.factor(as.character(exp1_state_prime$PrimeCondition))
exp1_state_prime$State = as.factor(as.character(exp1_state_prime$State))
exp1_state_prime$Target = as.factor(as.character(exp1_state_prime$Target))


## just state
exp1_state_aov = aov(data = exp1_state, Trials ~ AgeGroup*State + 
                                        Error(Target/(AgeGroup*State)))
summary(exp1_state_aov)

options(contrasts = c('contr.sum', 'contr.poly'))

exp1_state_lsm = lsmeans::lsmeans(exp1_state_aov, c("AgeGroup", "State"))
prime_effect = cld(exp1_state_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("State"))
kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.05))

##state by prime
exp1_stateprime_aov = aov(data = exp1_state_prime, 
                          Trials ~ AgeGroup*PrimeCondition*State + 
                          Error(Target/(AgeGroup*PrimeCondition*State)))
summary(exp1_stateprime_aov)
 library(ez)
# ezANOVA(data = exp1_state_prime, wid = .(Target),
#         dv = .(Trials), within =.(PrimeCondition, State),
#         between = .(AgeGroup))

options(contrasts = c('contr.sum', 'contr.poly'))

exp1_state_lsm = lsmeans::lsmeans(exp1_stateprime_aov, c("AgeGroup","PrimeCondition", "State"))
prime_effect = cld(exp1_state_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("PrimeCondition", "AgeGroup"))

kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.05))

### INDIVIDUAL T-TESTS FOR AGExSTATE interaction

e1_young_dk = exp1_state %>% filter(AgeGroup == "Young" & State == "dontknow")
e1_old_dk = exp1_state %>% filter(AgeGroup == "Old" & State == "dontknow")
t.test(e1_old_dk$Trials, e1_young_dk$Trials)


e1_young_other = exp1_state %>% filter(AgeGroup == "Young" & State == "other")
e1_old_other = exp1_state %>% filter(AgeGroup == "Old" & State == "other")
t.test(e1_young_other$Trials, e1_old_other$Trials)

@

\subsubsection {Multiple Choice}

<<>>=
exp1_mcq = subset(final_mcq, final_mcq$StudyNo == '2' | final_mcq$StudyNo == '4')

## MULTIPLE CHOICE ACCURACY
library(dplyr)
exp1_mcq_acc = group_by(exp1_mcq, Target, PrimeType, AgeGroup) %>%
    summarise_at(vars(MCQAcc), mean)

exp1_mcq_acc_aov = aov(data = exp1_mcq_acc, MCQAcc ~ AgeGroup*PrimeType + 
                              Error(Target/(AgeGroup*PrimeType)))
summary(exp1_mcq_acc_aov)

exp1_mcqacc_lsm = lsmeans::lsmeans(exp1_mcq_acc_aov, c("AgeGroup", "PrimeType"))
prime_effect = cld(exp1_mcqacc_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("AgeGroup"))

kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.05))

## SPECIFIC T TESTS

e1_mcq_p = exp1_mcq_acc %>% filter(PrimeType == "p")
e1_mcq_r = exp1_mcq_acc %>% filter(PrimeType == "r")
e1_mcq_b = exp1_mcq_acc %>% filter(PrimeType == "b")
e1_mcq_u = exp1_mcq_acc %>% filter(PrimeType == "u")

t.test(e1_mcq_p$MCQAcc, e1_mcq_r$MCQAcc, paired = TRUE)
t.test(e1_mcq_p$MCQAcc, e1_mcq_b$MCQAcc, paired = TRUE)
t.test(e1_mcq_p$MCQAcc, e1_mcq_u$MCQAcc, paired = TRUE)

t.test(e1_mcq_b$MCQAcc, e1_mcq_r$MCQAcc, paired = TRUE)
t.test(e1_mcq_b$MCQAcc, e1_mcq_u$MCQAcc, paired = TRUE)

t.test(e1_mcq_r$MCQAcc, e1_mcq_r$MCQAcc, paired = TRUE)

### MULTIPLE CHOICE ERRORS
## before we do ANOVA, we need to replace NAs with 0.
for (i in 1: nrow(exp1_mcq)){
   if(is.na(exp1_mcq[i,9])){
     exp1_mcq[i,9] = 0
   }
  
}
exp1_mcq_aov = aov(data = exp1_mcq, 
                   Proportion ~ AgeGroup*PrimeType*ChosenPrime + 
                          Error(Target/(AgeGroup*PrimeType*ChosenPrime)))
summary(exp1_mcq_aov)
library(ez)
# ezANOVA(data = exp1_mcq, wid = .(Target),
#         dv = .(Proportion), within =.(AgeGroup, PrimeType, ChosenPrime))

options(contrasts = c('contr.sum', 'contr.poly'))

exp1_errors_lsm = lsmeans::lsmeans(exp1_mcq_aov, c("AgeGroup", "PrimeType", "ChosenPrime"))
prime_effect = cld(exp1_errors_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("AgeGroup", "PrimeType"))

kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.05))

## SPECIFIC OLD COMPARISION T TEST

e1mcq_old_r = exp1_mcq %>% filter(AgeGroup == "Old" & PrimeType == "r")
e1mcq_old_r_r = e1mcq_old_r %>% filter(ChosenPrime == "r")
e1mcq_old_r_p = e1mcq_old_r %>% filter(ChosenPrime == "p")
e1mcq_old_r_b = e1mcq_old_r %>% filter(ChosenPrime == "b")
e1mcq_old_r_u = e1mcq_old_r %>% filter(ChosenPrime == "u")

t.test(e1mcq_old_r_r$Proportion, e1mcq_old_r_p$Proportion, paired = TRUE)
t.test(e1mcq_old_r_r$Proportion, e1mcq_old_r_b$Proportion, paired = TRUE)
t.test(e1mcq_old_r_r$Proportion, e1mcq_old_r_u$Proportion, paired = TRUE)

e1mcq_young_r = exp1_mcq %>% filter(AgeGroup == "Young" & PrimeType == "r")
e1mcq_young_r_r = e1mcq_young_r %>% filter(ChosenPrime == "r")
## comparing young and old
t.test(e1mcq_young_r_r$Proportion, e1mcq_old_r_r$Proportion)
@


\subsection {Experiment 2}

<<>>=
e2_item_acc = group_by(e2_hlm, Target, AgeGroup, PrimeCondition) %>%
  summarise_at(vars(Accuracy), mean)

e2_item_state = group_by(e2_hlm, Target, AgeGroup, Question.RESP) %>%
  summarise(StateCount = n())

e2_item_mcqacc = group_by(e2_hlm, Target, AgeGroup, PrimeCondition) %>%
  summarise_at(vars(McAcc), mean)
@

\subsubsection {Target Accuracy}

<<>>=
### TARGET RETRIEVAL ACCURACY

exp2_item_acc = aov(data = e2_item_acc, Accuracy ~ AgeGroup*PrimeCondition + 
                                Error (Target/(AgeGroup*PrimeCondition)))
summary(exp2_item_acc)


options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
exp1_target_lsm = lsmeans::lsmeans(exp2_item_acc, 
                                   c("AgeGroup", "PrimeCondition"))
prime_effect = cld(exp1_target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("PrimeCondition"))
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

## specific t-tests
e2_item_acc_collapsed = group_by(e2_hlm, Target, PrimeCondition) %>%
  summarise_at(vars(Accuracy), mean)

target_p = e2_item_acc_collapsed %>% filter(PrimeCondition == "P")
target_r = e2_item_acc_collapsed %>% filter(PrimeCondition == "R")
target_b = e2_item_acc_collapsed %>% filter(PrimeCondition == "B")
target_u = e2_item_acc_collapsed %>% filter(PrimeCondition == "U")


t.test(target_p$Accuracy, target_r$Accuracy, paired = TRUE)
t.test(target_p$Accuracy, target_b$Accuracy, paired = TRUE)
t.test(target_p$Accuracy, target_u$Accuracy, paired = TRUE)

t.test(target_b$Accuracy, target_r$Accuracy, paired = TRUE)
t.test(target_b$Accuracy, target_u$Accuracy, paired = TRUE)
t.test(target_r$Accuracy, target_u$Accuracy, paired = TRUE)

### age effect
e2_item_age_collapsed = group_by(e2_hlm, Target, AgeGroup) %>%
  summarise_at(vars(Accuracy), mean)
target_young = e2_item_age_collapsed %>% filter(AgeGroup == "Young")
target_old = e2_item_age_collapsed %>% filter(AgeGroup == "Old")

t.test(target_young$Accuracy, target_old$Accuracy, paired = TRUE)

@

\subsubsection {State Data}

<<>>=
## e1_item_state has many rows missing so we cannot use that dataset. 
## we will use the Julieagg.R file to create an agg file for items. 

exp2_state = subset(final_statedata, final_statedata$StudyNo == '5' | 
                                  final_statedata$StudyNo == '6')
exp2_state_prime = subset(statedata_primetype_long, statedata_primetype_long$StudyNo == '5' | 
                                  statedata_primetype_long$StudyNo == '6')


exp2_state_prime$PrimeCondition = as.factor(as.character(exp2_state_prime$PrimeCondition))
exp2_state_prime$State = as.factor(as.character(exp2_state_prime$State))
exp2_state_prime$Target = as.factor(as.character(exp2_state_prime$Target))


## just state
exp2_state_aov = aov(data = exp2_state, Trials ~ AgeGroup*State + 
                                        Error(Target/(AgeGroup*State)))
summary(exp2_state_aov)

options(contrasts = c('contr.sum', 'contr.poly'))

exp1_state_lsm = lsmeans::lsmeans(exp1_state_aov, c("AgeGroup", "State"))
prime_effect = cld(exp1_state_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("State"))
kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.05))

##state by prime
exp2_stateprime_aov = aov(data = exp2_state_prime, 
                          Trials ~ AgeGroup*PrimeCondition*State + 
                          Error(Target/(AgeGroup*PrimeCondition*State)))
summary(exp2_stateprime_aov)

library(ez)
# ezANOVA(data = exp1_state_prime, wid = .(Target),
#         dv = .(Trials), within =.(PrimeCondition, State),
#         between = .(AgeGroup))

options(contrasts = c('contr.sum', 'contr.poly'))

exp1_state_lsm = lsmeans::lsmeans(exp1_stateprime_aov, c("AgeGroup","PrimeCondition", "State"))
prime_effect = cld(exp1_state_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("PrimeCondition", "AgeGroup"))

kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.05))

### INDIVIDUAL T-TESTS FOR AGExSTATE interaction

e1_young_dk = exp1_state %>% filter(AgeGroup == "Young" & State == "dontknow")
e1_old_dk = exp1_state %>% filter(AgeGroup == "Old" & State == "dontknow")
t.test(e1_old_dk$Trials, e1_young_dk$Trials)


e1_young_other = exp1_state %>% filter(AgeGroup == "Young" & State == "other")
e1_old_other = exp1_state %>% filter(AgeGroup == "Old" & State == "other")
t.test(e1_young_other$Trials, e1_old_other$Trials)

@

\subsubsection*{Multiple Choice}

<<>>=
exp2_mcq = subset(final_mcq, final_mcq$StudyNo == '5' | final_mcq$StudyNo == '6')
## MULTIPLE CHOICE ACCURACY
library(dplyr)
exp2_mcq_acc = group_by(exp2_mcq, Target, PrimeType, AgeGroup) %>%
    summarise_at(vars(MCQAcc), mean)

exp2_mcq_acc_aov = aov(data = exp2_mcq_acc, MCQAcc ~ AgeGroup*PrimeType + 
                              Error(Target/(AgeGroup*PrimeType)))
summary(exp2_mcq_acc_aov)

## SPECIFIC T TESTS

e2_mcq_p = exp2_mcq_acc %>% filter(PrimeType == "p")
e2_mcq_r = exp2_mcq_acc %>% filter(PrimeType == "r")
e2_mcq_b = exp2_mcq_acc %>% filter(PrimeType == "b")
e2_mcq_u = exp2_mcq_acc %>% filter(PrimeType == "u")

e2mcq_y_p = e2_mcq_p %>% filter(AgeGroup == "Young")
e2mcq_o_p = e2_mcq_p %>% filter(AgeGroup == "Old")
t.test(e2mcq_y_p$MCQAcc, e2mcq_o_p$MCQAcc)


e2mcq_y_b = e2_mcq_b %>% filter(AgeGroup == "Young")
e2mcq_o_b = e2_mcq_b %>% filter(AgeGroup == "Old")
t.test(e2mcq_y_b$MCQAcc, e2mcq_o_b$MCQAcc)

e2mcq_y_r = e2_mcq_r %>% filter(AgeGroup == "Young")
e2mcq_o_r = e2_mcq_r %>% filter(AgeGroup == "Old")
t.test(e2mcq_y_r$MCQAcc, e2mcq_o_r$MCQAcc)

e2mcq_y_u = e2_mcq_u %>% filter(AgeGroup == "Young")
e2mcq_o_u = e2_mcq_u %>% filter(AgeGroup == "Old")
t.test(e2mcq_y_u$MCQAcc, e2mcq_o_u$MCQAcc)


# ezANOVA(data = exp2_mcq_acc, wid = .(Target),
#         dv = .(MCQAcc), within =.(PrimeType),
#         between = .(AgeGroup))


exp2_mcqacc_lsm = lsmeans::lsmeans(exp2_mcq_acc_aov, c("AgeGroup", "PrimeType"))
prime_effect = cld(exp2_mcqacc_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("PrimeType"))

kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.1))


## MULTIPLE CHOICE ERRORS

## before we do ANOVA, we need to replace NAs with 0.

for (i in 1: nrow(exp2_mcq)){
   if(is.na(exp2_mcq[i,9])){
     exp2_mcq[i,9] = 0
   }
  
}
exp2_mcq_aov = aov(data = exp2_mcq, 
                   Proportion ~ AgeGroup*PrimeType*ChosenPrime + 
                        Error(Target/(AgeGroup*PrimeType*ChosenPrime)))
summary(exp2_mcq_aov)
library(ez)
# ezANOVA(data = exp2_mcq, wid = .(Target),
#         dv = .(Proportion), within =.(PrimeType, ChosenPrime),
#         between = .(AgeGroup))

options(contrasts = c('contr.sum', 'contr.poly'))

exp2_errors_lsm = lsmeans::lsmeans(exp2_mcq_aov, c("AgeGroup", "PrimeType", "ChosenPrime"))
prime_effect = cld(exp2_errors_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("PrimeType", "ChosenPrime"))

kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.05))

## SPECIFIC OLD COMPARISION T TEST

e2mcq_old_r = exp2_mcq %>% filter(AgeGroup == "Old" & PrimeType == "r")
e2mcq_young_r = exp2_mcq %>% filter(AgeGroup == "Young" & PrimeType == "r")

e2mcq_old_r_r = e2mcq_old_r %>% filter(ChosenPrime == "r")
e2mcq_young_r_r = e2mcq_young_r %>% filter(ChosenPrime == "r")

## comparing young and old
t.test(e2mcq_young_r_r$Proportion, e2mcq_old_r_r$Proportion)

e2mcq_old_b = exp2_mcq %>% filter(AgeGroup == "Old" & PrimeType == "b")
e2mcq_young_b = exp2_mcq %>% filter(AgeGroup == "Young" & PrimeType == "b")

e2mcq_old_b_b = e2mcq_old_b %>% filter(ChosenPrime == "b")
e2mcq_young_b_b = e2mcq_young_b %>% filter(ChosenPrime == "b")

## comparing young and old
t.test(e2mcq_young_b_b$Proportion, e2mcq_old_b_b$Proportion)
@

\subsection {Collapsing the 4 experiments}

<<>>=
final_mcq_main4 = subset(final_mcq, final_mcq$StudyNo != '1')

for (i in 1: nrow(final_mcq_main4)){
   if(is.na(final_mcq_main4[i,9])){
     final_mcq_main4[i,9] = 0
   }
}

final_mcq_main4$PrimeInstruction = ifelse(final_mcq_main4$StudyNo == "2" |
                       final_mcq_main4$StudyNo == "4", 
                       "NoInstruction", "WithInstruction")

final_mcq_main4$PrimeInstruction = as.factor(final_mcq_main4$PrimeInstruction)

fourway_aov = aov(data = final_mcq_main4, 
              Proportion ~ AgeGroup*PrimeInstruction*PrimeType*ChosenPrime + Error(Target/(AgeGroup*PrimeType*ChosenPrime)))
summary(fourway_aov)


library(ez)
# ezANOVA(data = final_mcq_main4, wid = .(Target),
#         dv = .(Proportion), within =.(AgeGroup, PrimeType, ChosenPrime),
#         between = .(PrimeInstruction)) ## IMPORTANT SPHERICITY
@


\subsection {Experiment 3}

<<>>=
e3_item_acc = group_by(e3_hlm, Target, PrimeCondition) %>%
  summarise_at(vars(Accuracy), mean)

e3_item_state = group_by(e3_hlm, Target, Question.RESP) %>%
  summarise(StateCount = n())

e3_item_mcqacc = group_by(e3_hlm, Target, PrimeCondition) %>%
  summarise_at(vars(McAcc), mean)
@

\subsubsection {Target Accuracy}

<<>>=
### TARGET RETRIEVAL ACCURACY

exp3_item_acc = aov(data = e3_item_acc, Accuracy ~ PrimeCondition + 
                                Error (Target/PrimeCondition))
summary(exp3_item_acc)

## specific t-tests
target_p = e3_item_acc %>% filter(PrimeCondition == "P")
target_r = e3_item_acc %>% filter(PrimeCondition == "R")
target_b = e3_item_acc %>% filter(PrimeCondition == "B")
target_u = e3_item_acc %>% filter(PrimeCondition == "U")

t.test(target_p$Accuracy, target_r$Accuracy, paired = TRUE)
t.test(target_p$Accuracy, target_b$Accuracy, paired = TRUE)
t.test(target_p$Accuracy, target_u$Accuracy, paired = TRUE)

t.test(target_b$Accuracy, target_r$Accuracy, paired = TRUE)
t.test(target_b$Accuracy, target_u$Accuracy, paired = TRUE)

t.test(target_r$Accuracy, target_u$Accuracy, paired = TRUE)


@

\subsubsection {State Data}

<<>>=
exp3_state = subset(final_statedata, final_statedata$StudyNo == '1')
exp3_state_prime = subset(statedata_primetype_long, statedata_primetype_long$StudyNo == '1')


exp3_state_prime$PrimeCondition = as.factor(as.character(exp3_state_prime$PrimeCondition))
exp3_state_prime$State = as.factor(as.character(exp3_state_prime$State))
exp3_state_prime$Target = as.factor(as.character(exp3_state_prime$Target))

## just state
exp3_state_aov = aov(data = exp3_state, Trials ~ State + 
                                        Error(Target/State))
summary(exp3_state_aov)

options(contrasts = c('contr.sum', 'contr.poly'))

exp3_state_lsm = lsmeans::lsmeans(exp3_state_aov, c("State"))
prime_effect = cld(exp3_state_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE)
kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.05))

##state by prime
exp3_stateprime_aov = aov(data = exp3_state_prime, 
                          Trials ~ PrimeCondition*State + 
                                        Error(Target/(PrimeCondition*State)))
summary(exp3_stateprime_aov)

library(ez)
# ezANOVA(data = exp3_state_prime, wid = .(Target),
#         dv = .(Trials), within =.(PrimeCondition, State))

options(contrasts = c('contr.sum', 'contr.poly'))

exp3_state_lsm = lsmeans::lsmeans(exp3_stateprime_aov, c("PrimeCondition", "State"))
prime_effect = cld(exp3_state_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("PrimeCondition"))

kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.1))

@

\subsubsection*{Multiple Choice}

<<>>=
exp3_mcq = subset(final_mcq, final_mcq$StudyNo == '1')

## MULTIPLE CHOICE ACCURACY
library(dplyr)
exp3_mcq_acc = group_by(exp3_mcq, Target, PrimeType) %>%
    summarise_at(vars(MCQAcc), mean)

exp3_mcq_acc_aov = aov(data = exp3_mcq_acc, MCQAcc ~ PrimeType + 
                              Error(Target/PrimeType))
summary(exp3_mcq_acc_aov)

## SPECIFIC T TESTS

e3_mcq_p = exp3_mcq_acc %>% filter(PrimeType == "p")
e3_mcq_r = exp3_mcq_acc %>% filter(PrimeType == "r")
e3_mcq_b = exp3_mcq_acc %>% filter(PrimeType == "b")
e3_mcq_u = exp3_mcq_acc %>% filter(PrimeType == "u")

t.test(e3_mcq_r$MCQAcc, e3_mcq_u$MCQAcc, paired = TRUE) ##sig
t.test(e3_mcq_r$MCQAcc, e3_mcq_p$MCQAcc, paired = TRUE) 


# ezANOVA(data = exp3_mcq_acc, wid = .(Target),
#         dv = .(MCQAcc), within =.(PrimeType))


exp3_mcqacc_lsm = lsmeans::lsmeans(exp3_mcq_acc_aov, c("PrimeType"))
prime_effect = cld(exp3_mcqacc_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE)

kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.1))


## MULTIPLE CHOICE ERRORS

## before we do ANOVA, we need to replace NAs with 0.

for (i in 1: nrow(exp3_mcq)){
   if(is.na(exp3_mcq[i,9])){
     exp3_mcq[i,9] = 0
   }
  
}
exp3_mcq_aov = aov(data = exp3_mcq, Proportion ~ PrimeType*ChosenPrime + 
                          Error(Target/(PrimeType*ChosenPrime)))
summary(exp3_mcq_aov)
library(ez)
# ezANOVA(data = exp3_mcq, wid = .(Target),
#         dv = .(Proportion), within =.(PrimeType, ChosenPrime))

options(contrasts = c('contr.sum', 'contr.poly'))

exp3_errors_lsm = lsmeans::lsmeans(exp3_mcq_aov, c("PrimeType", "ChosenPrime"))
prime_effect = cld(exp3_errors_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = c("PrimeType"))

kable(subset(prime_effect$comparisons, prime_effect$comparisons$p.value < 0.8))
@

\section {Comparing YA 48 ms with OA NotthePrime}

<<>>=

for (i in 1: nrow(final_mcq)){
   if(is.na(final_mcq[i,9])){
     final_mcq[i,9] = 0
   }
}

exp3_compare_1 = subset(final_mcq, final_mcq$StudyNo == '6' | 
                        final_mcq$StudyNo == '1')

compare_aov_1 = aov(data = exp3_compare_1, Proportion ~ StudyNo*PrimeType*ChosenPrime + 
                      Error(Target/(StudyNo*PrimeType*ChosenPrime)))
summary(compare_aov_1)

exp3_compare_1 = subset(final_mcq, final_mcq$StudyNo == '6' | 
                        final_mcq$StudyNo == '1')

exp3_compare_2 = subset(final_mcq, final_mcq$StudyNo == '1' | 
                        final_mcq$StudyNo == '5')
compare_aov_2 = aov(data = exp3_compare_2, Proportion ~ StudyNo*PrimeType*ChosenPrime + 
                      Error(Target/(StudyNo*PrimeType*ChosenPrime)))
summary(compare_aov_2)
@

\section {Item Percent State Analysis}

<<>>=
j <- read.csv("MainJulie_ItemAgg.csv", header = TRUE, sep = ",")

# j_statepercent = j[,c(1,2,3,4,5,6,74:89)]

j_statepercent = j[,c(1,2,3,4,5,6, 90:105)]

j_statepercent$value.TargetNo = as.factor(j_statepercent$value.TargetNo)

library(tidyr)
library(dplyr)
statepercent <- j_statepercent %>%
  gather(StatePrime, Percent, 
         r_know, r_dontknow,r_other, r_TOT,
         p_know, p_dontknow,p_other, p_TOT,
         b_know, b_dontknow,b_other, b_TOT,
         u_know, u_dontknow,u_other, u_TOT) %>%
  separate(StatePrime, c('Prime', 'State'), sep = "_") %>%
  arrange(value.Target)

colnames(statepercent) = c("AgeGroup",  "StudyNo", "Target", "TargetNo",
                           "WordType", "Proper", 
                           "PrimeCondition", "State","Percent")

statepercent$AgeGroup <- as.factor(statepercent$AgeGroup)
statepercent$Target <- as.factor(statepercent$Target)
statepercent$StudyNo <- as.factor(statepercent$StudyNo)
statepercent$PrimeCondition <- as.factor(statepercent$PrimeCondition)
statepercent$State <- as.factor(statepercent$State)
statepercent$Percent <- as.numeric(as.character(statepercent$Percent))

for(i in 1:nrow(statepercent)){
  if(is.na(statepercent[i,9])) {
    statepercent[i,9] = 0
  }
  else
    statepercent[i,9] = statepercent[i,9]
}

statepercent_exp1 = statepercent %>% filter(StudyNo == '2' | StudyNo == '4')
statepercent_exp2 = statepercent %>% filter(StudyNo == '5' | StudyNo == '6')
statepercent_exp3 = statepercent %>% filter(StudyNo == '1')
@

\subsection {Adding covariate info?}

<<>>=

itemratings= read.csv("item_ratings_wide.csv", 
                             header = TRUE, sep = ",")
main = read.csv("Julie_Main5Studies.csv", header = TRUE, sep = ",")
main = main %>% filter(! PrimeCondition %in% c( "R", "U"))
main_item = merge(main, itemratings, by = c("Target", "PrimeCondition"))
main_item = dplyr::arrange(main_item, StudyNo, Subject, TargetNo, PrimeType)

main_item = main_item[1:200,c(1,2,14, 55)]
main_item = main_item %>% arrange(Target)
main_item$PrimeCondition = tolower(main_item$PrimeCondition)

state_cov_pb = statepercent %>% filter(!PrimeCondition %in% c("r","u"))
state_cov = merge(state_cov_pb, main_item, 
                  by  = c("Target", "TargetNo", "PrimeCondition"))
itemratings$PrimeCondition = tolower(itemratings$PrimeCondition)

state_cov_final = merge(state_cov, itemratings, 
                        by = c("Target", "TargetNo", "PrimeCondition"))

@

\subsection {Experiment 1 }

\subsubsection {overall}

<<>>=
e1_all_aov = aov(data = statepercent_exp1, 
                          Percent ~ AgeGroup*State*PrimeCondition + 
                        Error(Target/(AgeGroup*State*PrimeCondition)))
summary(e1_all_aov)
@

\subsubsection {know}

<<>>=
e1_know = statepercent_exp1 %>% filter(State == "know")
e1_know_aov = aov(data = e1_know, 
                          Percent ~ AgeGroup*PrimeCondition + 
                        Error(Target/(AgeGroup*PrimeCondition)))
summary(e1_know_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e1_know_aov, 
                                   c("AgeGroup","PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = "AgeGroup")
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

target_p = e1_know %>% filter(PrimeCondition == "p")
target_r = e1_know %>% filter(PrimeCondition == "r")
target_b = e1_know %>% filter(PrimeCondition == "b")
target_u = e1_know %>% filter(PrimeCondition == "u")

t.test(target_u$Percent, target_r$Percent, paired = TRUE)
t.test(target_u$Percent, target_b$Percent, paired = TRUE)
t.test(target_u$Percent, target_p$Percent, paired = TRUE)

## effect of age
target_y = e1_know %>% filter(AgeGroup == "Young")
target_o = e1_know %>% filter(AgeGroup == "Old")

t.test(target_y$Percent, target_o$Percent, paired = FALSE)

@
\subsubsection {dont know}

<<>>=
e1_dontknow = statepercent_exp1 %>% filter(State == "dontknow")
e1_dontknow_aov = aov(data = e1_dontknow, 
                          Percent ~ AgeGroup*PrimeCondition + 
                        Error(Target/(AgeGroup*PrimeCondition)))
summary(e1_dontknow_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e1_dontknow_aov, 
                                   c("AgeGroup","PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = "AgeGroup")
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

target_p = e1_dontknow %>% filter(PrimeCondition == "p")
target_r = e1_dontknow %>% filter(PrimeCondition == "r")
target_b = e1_dontknow %>% filter(PrimeCondition == "b")
target_u = e1_dontknow %>% filter(PrimeCondition == "u")

t.test(target_u$Percent, target_r$Percent, paired = TRUE)
t.test(target_u$Percent, target_b$Percent, paired = TRUE)
t.test(target_u$Percent, target_p$Percent, paired = TRUE)
@

\subsubsection {other}
<<>>=

e1_other = statepercent_exp1 %>% filter(State == "other")
e1_other_aov = aov(data = e1_other, 
                          Percent ~ AgeGroup*PrimeCondition + 
                        Error(Target/(AgeGroup*PrimeCondition)))
summary(e1_other_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e1_other_aov, 
                                   c("AgeGroup","PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = "PrimeCondition")
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))


@

\subsubsection {other cov}

<<>>=

statepercent_exp1_cov = state_cov_final %>% 
  filter(StudyNo == '2' | StudyNo == '4')

statepercent_exp1_cov = statepercent_exp1_cov %>% filter(State == "other")


statepercent_exp1_cov$zSoundRating = scale(statepercent_exp1_cov$SoundRating, center = TRUE, scale = TRUE)
statepercent_exp1_cov$zSoundRating = as.numeric(statepercent_exp1_cov$zSoundRating)

statepercent_exp1_cov$Target = tolower(statepercent_exp1_cov$Target)
statepercent_exp1_cov$Prime = tolower(statepercent_exp1_cov$Prime)
statepercent_exp1_cov$LD = RecordLinkage::levenshteinDist(statepercent_exp1_cov$Target, statepercent_exp1_cov$Prime)

## reverse scoring LD since higher LD means less overlap

statepercent_exp1_cov$reverseLD = 11 - statepercent_exp1_cov$LD
statepercent_exp1_cov$zLD = scale(statepercent_exp1_cov$reverseLD, center = TRUE, scale = TRUE)
statepercent_exp1_cov$zLD = as.numeric(statepercent_exp1_cov$zLD)

statepercent_exp1_cov$meanLDRating = (statepercent_exp1_cov$zLD + 
                                    statepercent_exp1_cov$zSoundRating)/2

statepercent_exp1_cov_item_agg = statepercent_exp1_cov %>% 
  group_by(Target,AgeGroup, PrimeCondition ) %>%
  summarize_at(vars(Percent, meanLDRating), mean)

options(contrasts = c("contr.sum","contr.poly"))

statepercent_exp1_cov_item_aov = lmer(data = statepercent_exp1_cov_item_agg, 
                   Percent ~ AgeGroup*PrimeCondition + meanLDRating +
                     (1|Target))
car::Anova(statepercent_exp1_cov_item_aov)
summary(statepercent_exp1_cov_item_aov)
anova(statepercent_exp1_cov_item_aov)
@

\subsubsection{ TOT}
<<>>=

e1_TOT = statepercent_exp1 %>% filter(State == "TOT")
e1_TOT_aov = aov(data = e1_TOT, 
                          Percent ~ AgeGroup*PrimeCondition + 
                        Error(Target/(AgeGroup*PrimeCondition)))
summary(e1_TOT_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e1_TOT_aov, 
                                   c("AgeGroup","PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE)
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

target_o_u = e1_TOT %>% filter(AgeGroup == "Old" & PrimeCondition == "u")
target_o_p = e1_TOT %>% filter(AgeGroup == "Old" & PrimeCondition == "p")
target_o_b = e1_TOT %>% filter(AgeGroup == "Old" & PrimeCondition == "b")
target_o_r = e1_TOT %>% filter(AgeGroup == "Old" & PrimeCondition == "r")

t.test(target_o_u$Percent, target_o_p$Percent, paired = TRUE)
t.test(target_o_u$Percent, target_o_r$Percent, paired = TRUE)
t.test(target_o_u$Percent, target_o_b$Percent, paired = TRUE)


target_p = e1_TOT %>% filter(PrimeCondition == "p")
target_r = e1_TOT %>% filter(PrimeCondition == "r")
target_b = e1_TOT %>% filter(PrimeCondition == "b")
target_u = e1_TOT %>% filter(PrimeCondition == "u")

t.test(target_u$Percent, target_r$Percent, paired = TRUE)
t.test(target_u$Percent, target_b$Percent, paired = TRUE)
t.test(target_u$Percent, target_p$Percent, paired = TRUE)

target_y = e1_TOT %>% filter(AgeGroup == "Young")
target_o = e1_TOT %>% filter(AgeGroup == "Old")

t.test(target_y$Percent, target_o$Percent, paired = FALSE)
@

\subsubsection {TOT cov}

<<>>=

statepercent_exp1_cov = state_cov_final %>% 
  filter(StudyNo == '2' | StudyNo == '4')

statepercent_exp1_cov = statepercent_exp1_cov %>% filter(State == "TOT")


statepercent_exp1_cov$zSoundRating = scale(statepercent_exp1_cov$SoundRating, center = TRUE, scale = TRUE)
statepercent_exp1_cov$zSoundRating = as.numeric(statepercent_exp1_cov$zSoundRating)

statepercent_exp1_cov$Target = tolower(statepercent_exp1_cov$Target)
statepercent_exp1_cov$Prime = tolower(statepercent_exp1_cov$Prime)
statepercent_exp1_cov$LD = RecordLinkage::levenshteinDist(statepercent_exp1_cov$Target, statepercent_exp1_cov$Prime)

## reverse scoring LD since higher LD means less overlap

statepercent_exp1_cov$reverseLD = 11 - statepercent_exp1_cov$LD
statepercent_exp1_cov$zLD = scale(statepercent_exp1_cov$reverseLD, center = TRUE, scale = TRUE)
statepercent_exp1_cov$zLD = as.numeric(statepercent_exp1_cov$zLD)

statepercent_exp1_cov$meanLDRating = (statepercent_exp1_cov$zLD + 
                                    statepercent_exp1_cov$zSoundRating)/2

statepercent_exp1_cov_item_agg = statepercent_exp1_cov %>% 
  group_by(Target,AgeGroup, PrimeCondition ) %>%
  summarize_at(vars(Percent, meanLDRating), mean)

options(contrasts = c("contr.sum","contr.poly"))

statepercent_exp1_cov_item_aov = lmer(data = statepercent_exp1_cov_item_agg, 
                   Percent ~ AgeGroup*PrimeCondition + meanLDRating +
                     (1|Target))
car::Anova(statepercent_exp1_cov_item_aov)
summary(statepercent_exp1_cov_item_aov)
anova(statepercent_exp1_cov_item_aov)
@

\subsubsection{plot}
<<fig=TRUE>>=
exp1_statepercent= Rmisc::summarySE(statepercent_exp1, 
                        measurevar = "Percent",
                        groupvars = c("State", "AgeGroup", "PrimeCondition"))

exp1_statepercent =  arrange(exp1_statepercent, desc(AgeGroup))


library(ggplot2)
library(ggthemes)
e1_percentplot = exp1_statepercent %>% 
  
mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
                    labels = c("Both", "Phonological", 
                               "Semantic", "Unrelated")),
        RetrievalState = factor(State, levels = unique(State),                    
                                labels = c("Dont Know", "Know", "Other", "TOT")))%>%
  
ggplot(aes(x = PrimeType, y = Percent, 
           group = AgeGroup, fill = AgeGroup))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, 
          color= "black")+
  geom_errorbar(aes(ymin=Percent - se, ymax=Percent + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  facet_wrap(~RetrievalState)+
  scale_fill_manual(values = c("slategray1", "royalblue4"))+
    xlab("Prime Condition") + ylab("Percentage of Trials") + 
  ggtitle("E1 Items: Young and Old Adults (No Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
e1_percentplot

@

\subsection {Experiment 2 }

\subsubsection {overall}

<<>>=
e2_all_aov = aov(data = statepercent_exp2, 
                          Percent ~ AgeGroup*State*PrimeCondition + 
                        Error(Target/(AgeGroup*State*PrimeCondition)))
summary(e2_all_aov)
@

\subsubsection{know}

<<>>=
e2_know = statepercent_exp2 %>% filter(State == "know")
e2_know_aov = aov(data = e2_know, 
                          Percent ~ AgeGroup*PrimeCondition + 
                        Error(Target/(AgeGroup*PrimeCondition)))
summary(e2_know_aov)
options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e2_know_aov, 
                                   c("AgeGroup","PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = "AgeGroup")
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

target_p = e2_know %>% filter(PrimeCondition == "p")
target_r = e2_know %>% filter(PrimeCondition == "r")
target_b = e2_know %>% filter(PrimeCondition == "b")
target_u = e2_know %>% filter(PrimeCondition == "u")

t.test(target_u$Percent, target_r$Percent, paired = TRUE)
t.test(target_u$Percent, target_b$Percent, paired = TRUE)
t.test(target_u$Percent, target_p$Percent, paired = TRUE)

target_y = e2_know %>% filter(AgeGroup == "Young")
target_o = e2_know %>% filter(AgeGroup == "Old")

t.test(target_y$Percent, target_o$Percent, paired = FALSE)

@

\subsubsection{dont know}

<<>>=
e2_dontknow = statepercent_exp2 %>% filter(State == "dontknow")
e2_dontknow_aov = aov(data = e2_dontknow, 
                          Percent ~ AgeGroup*PrimeCondition + 
                        Error(Target/(AgeGroup*PrimeCondition)))
summary(e2_dontknow_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e2_dontknow_aov, 
                                   c("AgeGroup","PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = "AgeGroup")
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

target_p = e2_dontknow %>% filter(PrimeCondition == "p")
target_r = e2_dontknow %>% filter(PrimeCondition == "r")
target_b = e2_dontknow %>% filter(PrimeCondition == "b")
target_u = e2_dontknow %>% filter(PrimeCondition == "u")

t.test(target_u$Percent, target_r$Percent, paired = TRUE)
t.test(target_u$Percent, target_b$Percent, paired = TRUE)
t.test(target_u$Percent, target_p$Percent, paired = TRUE)

@

\subsubsection{other}

<<>>=
e2_other = statepercent_exp2 %>% filter(State == "other")
e2_other_aov = aov(data = e2_other, 
                          Percent ~ AgeGroup*PrimeCondition + 
                        Error(Target/(AgeGroup*PrimeCondition)))
summary(e2_other_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e2_other_aov, 
                                   c("AgeGroup","PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = "PrimeCondition")
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

target_y = e2_other %>% filter(AgeGroup == "Young")
target_o = e2_other %>% filter(AgeGroup == "Old")

t.test(target_y$Percent, target_o$Percent, paired = FALSE)
@

\subsubsection{TOT}

<<>>=

e2_TOT = statepercent_exp2 %>% filter(State == "TOT")
e2_TOT_aov = aov(data = e2_TOT, 
                          Percent ~ AgeGroup*PrimeCondition + 
                        Error(Target/(AgeGroup*PrimeCondition)))
summary(e2_TOT_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e2_TOT_aov, 
                                   c("AgeGroup","PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = "PrimeCondition")
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

target_p = e2_TOT %>% filter(PrimeCondition == "p")
target_r = e2_TOT %>% filter(PrimeCondition == "r")
target_b = e2_TOT %>% filter(PrimeCondition == "b")
target_u = e2_TOT %>% filter(PrimeCondition == "u")

t.test(target_p$Percent, target_r$Percent, paired = TRUE)
t.test(target_p$Percent, target_b$Percent, paired = TRUE)
t.test(target_p$Percent, target_u$Percent, paired = TRUE)
@

\subsubsection{plot}

<<fig=TRUE>>=
exp2_statepercent= Rmisc::summarySE(statepercent_exp2, 
                        measurevar = "Percent",
                        groupvars = c("State", "AgeGroup", "PrimeCondition"))

library(ggplot2)
library(ggthemes)
e2_percentplot = exp2_statepercent %>% 
mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
                    labels = c("Both", "Phonological", 
                               "Semantic", "Unrelated")),
        RetrievalState = factor(State, levels = unique(State),                    
                                labels = c("Dont Know", "Know", "Other", "TOT")))%>%
  
ggplot(aes(x = PrimeType, y = Percent, 
           group = AgeGroup, fill = AgeGroup))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, 
          color= "black")+
  geom_errorbar(aes(ymin=Percent - se, ymax=Percent + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  facet_wrap(~RetrievalState)+
  scale_fill_manual(values = c("slategray1", "royalblue4"))+
    xlab("Prime Condition") + ylab("Percentage of Trials") + 
  ggtitle("E2 Items: Young and Old Adults (With Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
e2_percentplot

@

\subsection {Experiment 3 }

\subsubsection {know}

<<>>=
e3_know = statepercent_exp3 %>% filter(State == "know")
e3_know_aov = aov(data = e3_know, 
                          Percent ~ PrimeCondition + 
                        Error(Target/PrimeCondition))
summary(e3_know_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e3_know_aov, 
                                   c("PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE)
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

target_p = e3_know %>% filter(PrimeCondition == "p")
target_r = e3_know %>% filter(PrimeCondition == "r")
target_b = e3_know %>% filter(PrimeCondition == "b")
target_u = e3_know %>% filter(PrimeCondition == "u")

t.test(target_u$Percent, target_r$Percent, paired = TRUE)
t.test(target_u$Percent, target_b$Percent, paired = TRUE)
t.test(target_u$Percent, target_p$Percent, paired = TRUE)
@

\subsubsection {dont know}

<<>>=
e3_dontknow = statepercent_exp3 %>% filter(State == "dontknow")
e3_dontknow_aov = aov(data = e3_dontknow, 
                          Percent ~ PrimeCondition + 
                        Error(Target/PrimeCondition))
summary(e3_dontknow_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e3_dontknow_aov, 
                                   c("PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE)
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))

target_p = e3_dontknow %>% filter(PrimeCondition == "p")
target_r = e3_dontknow %>% filter(PrimeCondition == "r")
target_b = e3_dontknow %>% filter(PrimeCondition == "b")
target_u = e3_dontknow %>% filter(PrimeCondition == "u")

t.test(target_u$Percent, target_r$Percent, paired = TRUE)
t.test(target_u$Percent, target_b$Percent, paired = TRUE)
t.test(target_u$Percent, target_p$Percent, paired = TRUE)
@

\subsubsection {other}

<<>>=
e3_other = statepercent_exp3 %>% filter(State == "other")
e3_other_aov = aov(data = e3_other, 
                          Percent ~ PrimeCondition + 
                        Error(Target/PrimeCondition))
summary(e3_other_aov)

@

\subsubsection {TOT}

<<>>=
e3_TOT = statepercent_exp3 %>% filter(State == "TOT")

e3_TOT_aov = aov(data = e3_TOT, 
                          Percent ~ PrimeCondition + 
                        Error(Target/PrimeCondition))
summary(e3_TOT_aov)
@

\subsubsection {plot}

<<fig=TRUE>>=
exp3_statepercent= Rmisc::summarySE(statepercent_exp3, 
                        measurevar = "Percent",
                        groupvars = c("State","AgeGroup", "PrimeCondition"))

library(ggplot2)
library(ggthemes)
e3_percentplot = exp3_statepercent %>% 
mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
                    labels = c("Both", "Phonological", 
                               "Semantic", "Unrelated")),
        RetrievalState = factor(State, levels = unique(State),                    
                                labels = c("Dont Know", "Know", "Other", "TOT")))%>%
  
ggplot(aes(x = PrimeType, y = Percent, 
           group = AgeGroup, fill = AgeGroup))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, 
          color= "black")+
  geom_errorbar(aes(ymin=Percent - se, ymax=Percent + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  facet_wrap(~RetrievalState)+
    scale_fill_manual(values = c("royalblue4"))+
      xlab("Prime Condition") + ylab("Percentage of Trials") + 
  ggtitle("E3 Items: Young (48 ms)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
e3_percentplot

@

\section {TOT Other Combined Item}

<<>>=
j <- read.csv("MainJulie_ItemAgg.csv", header = TRUE, sep = ",")

# j_statepercent = j[,c(1,2,3,4,5,6,74:89)]

j_statepercent = j[,c(1,2,3,4,5,6, 90, 91, 106,
                      94, 95, 107,
                      98, 99, 108,
                      102, 103, 109)]

j_statepercent$value.TargetNo = as.factor(j_statepercent$value.TargetNo)

library(tidyr)
library(dplyr)
statepercent <- j_statepercent %>%
  gather(StatePrime, Percent, 
         r_know, r_dontknow,r_TO,
         p_know, p_dontknow,p_TO,
         b_know, b_dontknow,b_TO,
         u_know, u_dontknow,u_TO) %>%
  separate(StatePrime, c('Prime', 'State'), sep = "_") %>%
  arrange(value.Target)

colnames(statepercent) = c("AgeGroup",  "StudyNo", "Target", "TargetNo",
                           "WordType", "Proper", 
                           "PrimeCondition", "State","Percent")

statepercent$AgeGroup <- as.factor(statepercent$AgeGroup)
statepercent$Target <- as.factor(statepercent$Target)
statepercent$StudyNo <- as.factor(statepercent$StudyNo)
statepercent$PrimeCondition <- as.factor(statepercent$PrimeCondition)
statepercent$State <- as.factor(statepercent$State)
statepercent$Percent <- as.numeric(as.character(statepercent$Percent))

for(i in 1:nrow(statepercent)){
  if(is.na(statepercent[i,9])) {
    statepercent[i,9] = 0
  }
  else
    statepercent[i,9] = statepercent[i,9]
}

statepercent_exp1 = statepercent %>% filter(StudyNo == '2' | StudyNo == '4')
statepercent_exp2 = statepercent %>% filter(StudyNo == '5' | StudyNo == '6')
statepercent_exp3 = statepercent %>% filter(StudyNo == '1')
@

\subsection {E1}

<<>>=
e1_TO = statepercent_exp1 %>% filter(State == "TO")
e1_TO_aov = aov(data = e1_TO, 
                          Percent ~ AgeGroup*PrimeCondition + 
                        Error(Target/(AgeGroup*PrimeCondition)))
summary(e1_TO_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e1_TO_aov, 
                                   c("AgeGroup","PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = "AgeGroup")
library(knitr)
# x = prime_effect$comparisons
# x[which(x$p.value < 0.05),]
@

\subsection {E2}

<<>>=
e2_TO = statepercent_exp2 %>% filter(State == "TO")
e2_TO_aov = aov(data = e2_TO, 
                          Percent ~ AgeGroup*PrimeCondition + 
                        Error(Target/(AgeGroup*PrimeCondition)))
summary(e2_TO_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
target_lsm = lsmeans::lsmeans(e2_TO_aov, 
                                   c("AgeGroup","PrimeCondition"))
prime_effect = cld(target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE, by = "AgeGroup")
library(knitr)
# x = prime_effect$comparisons
# x[which(x$p.value < 0.05),]
@

\subsection {E3}

<<>>=
e3_TO = statepercent_exp3 %>% filter(State == "TO")
e3_TO_aov = aov(data = e3_TO, 
                          Percent ~ PrimeCondition + 
                        Error(Target/(PrimeCondition)))
summary(e3_TO_aov)
@

\section {State Prime Accuracy Figures}

\subsubsection *{Experiment 1}

<<>>=
exp1_fig_stateprime_acc = Rmisc::summarySE(exp_1_stateprime_acc, 
                        measurevar = "Trials",
                        groupvars = c("AgeGroup","PrimeCondition", "Question.RESP", "Accuracy"))


exp1_fig_stateprime_acc =  arrange(exp1_fig_stateprime_acc, 
                               desc(AgeGroup))

exp1_fig_stateprime_acc$Accuracy = as.factor(as.character(exp1_fig_stateprime_acc$Accuracy))

exp1_fig_stateprime_acc_young = exp1_fig_stateprime_acc %>% filter(AgeGroup == "Young")
exp1_fig_stateprime_acc_old = exp1_fig_stateprime_acc %>% filter(AgeGroup == "Old")

library(ggplot2)
library(ggthemes)
 stateprime_1_acc_young = exp1_fig_stateprime_acc_young %>% 
   mutate(State = factor(Question.RESP, levels = unique(Question.RESP),
                            labels = c("Know", "Dont Know", "Other", "TOT")),
          PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
               labels = c("Both", "Phonological", "Semantic", "Unrelated")),
                    TargetAcc = factor(Accuracy, levels = unique(Accuracy),
                    labels = c("Failed Retrieval", "Correct Retrieval")))%>%
ggplot(aes(x = PrimeType, y = Trials, 
          group=TargetAcc, fill = TargetAcc))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - se, ymax=Trials + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  facet_wrap(~State, nrow =1)+
   scale_fill_wsj()+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("") + ylab("") + 
  ggtitle("E1: Young (Without Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
 stateprime_1_acc_young
 
 
 stateprime_1_acc_old = exp1_fig_stateprime_acc_old %>% 
    mutate(State = factor(Question.RESP, levels = unique(Question.RESP),
                            labels = c("Know", "Dont Know", "Other", "TOT")),
          PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
               labels = c("Both", "Phonological", "Semantic", "Unrelated")),
                    TargetAcc = factor(Accuracy, levels = unique(Accuracy),
                    labels = c("Failed Retrieval", "Correct Retrieval")))%>%
ggplot(aes(x = PrimeType, y = Trials, 
          group=TargetAcc, fill = TargetAcc))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - se, ymax=Trials + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  facet_wrap(~State, nrow =1)+
   scale_fill_wsj()+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("") + ylab("") + 
  ggtitle("E1: Old (Without Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
 stateprime_1_acc_old
@

\subsubsection {E1: Combined Plot}

<<fig=TRUE>>=
library(grid)
gridExtra::grid.arrange(stateprime_1_acc_young, stateprime_1_acc_old, 
                        nrow = 2, ncol = 1, 
      top=textGrob("Raw Number of Retrieval States in E1", 
                                      gp=gpar(fontsize=20)))
@

\subsubsection *{Experiment 2}

<<>>=
exp2_fig_stateprime_acc = Rmisc::summarySE(exp_2_stateprime_acc, 
                        measurevar = "Trials",
                        groupvars = c("AgeGroup","PrimeCondition", "Question.RESP", "Accuracy"))


exp2_fig_stateprime_acc =  arrange(exp2_fig_stateprime_acc, 
                               desc(AgeGroup))

exp2_fig_stateprime_acc$Accuracy = as.factor(as.character(exp2_fig_stateprime_acc$Accuracy))

exp2_fig_stateprime_acc_young = exp2_fig_stateprime_acc %>% filter(AgeGroup == "Young")
exp2_fig_stateprime_acc_old = exp2_fig_stateprime_acc %>% filter(AgeGroup == "Old")

library(ggplot2)
library(ggthemes)
 stateprime_2_acc_young = exp2_fig_stateprime_acc_young %>% 
   mutate(State = factor(Question.RESP, levels = unique(Question.RESP),
                            labels = c("Know", "Dont Know", "Other", "TOT")),
          PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
               labels = c("Both", "Phonological", "Semantic", "Unrelated")),
                    TargetAcc = factor(Accuracy, levels = unique(Accuracy),
                    labels = c("Failed Retrieval", "Correct Retrieval")))%>%
ggplot(aes(x = State, y = Trials, 
          group=TargetAcc, fill = TargetAcc))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - se, ymax=Trials + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  facet_wrap(~PrimeType, nrow =1)+
   scale_fill_wsj()+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("") + ylab("") + 
  ggtitle("E2: Young (With Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
 stateprime_2_acc_young
 
 
 stateprime_2_acc_old = exp2_fig_stateprime_acc_old %>% 
    mutate(State = factor(Question.RESP, levels = unique(Question.RESP),
                            labels = c("Know", "Dont Know", "Other", "TOT")),
          PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
               labels = c("Both", "Phonological", "Semantic", "Unrelated")),
                    TargetAcc = factor(Accuracy, levels = unique(Accuracy),
                    labels = c("Failed Retrieval", "Correct Retrieval")))%>%
ggplot(aes(x = State, y = Trials, 
          group=TargetAcc, fill = TargetAcc))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - se, ymax=Trials + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  facet_wrap(~PrimeType, nrow =1)+
   scale_fill_wsj()+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("") + ylab("") + 
  ggtitle("E2: Old (With Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
 stateprime_2_acc_old
@

\subsubsection {E2: Combined Plot}

<<fig=TRUE>>=
library(grid)
gridExtra::grid.arrange(stateprime_2_acc_young, stateprime_2_acc_old, 
                        nrow = 2, ncol = 1, 
      top=textGrob("Raw Number of Retrieval States in E2", 
                                      gp=gpar(fontsize=20)))
@

\subsubsection *{Experiment 3}

<<fig=TRUE>>=
exp3_fig_stateprime_acc = Rmisc::summarySE(exp_3_stateprime_acc, 
                        measurevar = "Trials",
                        groupvars = c("AgeGroup","PrimeCondition", "Question.RESP", "Accuracy"))

exp3_fig_stateprime_acc$Accuracy = as.factor(as.character(exp3_fig_stateprime_acc$Accuracy))


library(ggplot2)
library(ggthemes)
 stateprime_3_acc_young = exp3_fig_stateprime_acc %>% 
   mutate(State = factor(Question.RESP, levels = unique(Question.RESP),
                            labels = c("Know", "Dont Know", "Other", "TOT")),
          PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
               labels = c("Both", "Phonological", "Semantic", "Unrelated")),
                    TargetAcc = factor(Accuracy, levels = unique(Accuracy),
                    labels = c("Failed Retrieval", "Correct Retrieval")))%>%
ggplot(aes(x = State, y = Trials, 
          group=TargetAcc, fill = TargetAcc))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - se, ymax=Trials + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  facet_wrap(~PrimeType, nrow =1)+
   scale_fill_wsj()+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("") + ylab("") + 
  ggtitle("E3: Young Adults Only (48 ms)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
 stateprime_3_acc_young
 
@

\section {Know: PrimeType and Target Accuracy}

<<>>=
exp_1_knowacc = exp_1_stateprime_acc %>% filter(Question.RESP == "1")
exp_2_knowacc = exp_2_stateprime_acc %>% filter(Question.RESP == "1")
exp_3_knowacc = exp_3_stateprime_acc %>% filter(Question.RESP == "1")
@
\subsection {Experiment 1}
<<fig=TRUE>>=
## HLM on trials

library(lme4)
contrasts(exp_1_knowacc$PrimeCondition) = contr.treatment(4, base = 3)
exp_1_knowacc$Accuracy = as.factor(exp_1_knowacc$Accuracy)
e1_know_hlm = lmer(data = exp_1_knowacc, 
                   Trials ~ AgeGroup*PrimeCondition*Accuracy + 
                     (1|Subject))
summary(e1_know_hlm)
car::Anova(e1_know_hlm)
## plotting
library(ggplot2)
library(ggthemes)
e1_know_data = Rmisc::summarySE(exp_1_knowacc, 
                        measurevar = "Trials",
                        groupvars = c( "AgeGroup","PrimeCondition", "Accuracy"))

e1_know_plot = e1_know_data %>% 
   mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
               labels = c("Both", "Phonological", "Semantic", "Unrelated")),
                    TargetAcc = factor(Accuracy, levels = unique(Accuracy),
                    labels = c("Failed Retrieval", "Correct Retrieval")))%>%
ggplot(aes(x = PrimeType, y = Trials, 
          group=TargetAcc, fill = TargetAcc))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - se, ymax=Trials + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
   scale_fill_wsj()+
  facet_wrap(~AgeGroup)+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("Prime Condition") + ylab("Number of Trials") + 
  ggtitle("E1: Know Responses in Young and Old Adults (Without Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
 e1_know_plot
@
 
 \subsection {Experiment 1 Collapsed Prime}
<<fig=TRUE>>=
## HLM on trials
exp_1_knowacc2 = exp_1_state_acc %>% filter(Question.RESP == "1")
library(lme4)
exp_1_knowacc2$Accuracy = as.factor(exp_1_knowacc2$Accuracy)
e1_know_hlm = lmer(data = exp_1_knowacc2, 
                   Trials ~ AgeGroup*Accuracy + 
                     (1|Subject))
summary(e1_know_hlm)
car::Anova(e1_know_hlm)

## percents

exp1_knowacc_percent = spread(exp_1_knowacc2, Accuracy, Trials)
exp1_knowacc_percent$`0` = ifelse(is.na(exp1_knowacc_percent$`0`), 
                                  0, exp1_knowacc_percent$`0`)
exp1_knowacc_percent$`1` = ifelse(is.na(exp1_knowacc_percent$`1`), 
                                  0, exp1_knowacc_percent$`1`)
exp1_knowacc_percent$total = exp1_knowacc_percent$`0` + exp1_knowacc_percent$`1`
exp1_knowacc_percent$pcorrect = exp1_knowacc_percent$`1`/exp1_knowacc_percent$total
exp1_knowacc_percent$pwrong = exp1_knowacc_percent$`0`/exp1_knowacc_percent$total

exp1_knowacc_long = exp1_knowacc_percent %>% gather(Type,
                                             Percent, 
                                       pcorrect:pwrong)%>%
   arrange(Subject)

## plotting
library(ggplot2)
library(ggthemes)
e1_know_data = Rmisc::summarySE(exp1_knowacc_long, 
                        measurevar = "Percent",
                        groupvars = c( "AgeGroup", "Type"))
e1_know_data$Percent = round(e1_know_data$Percent, 2)
e1_know_plot = e1_know_data %>% 
   mutate(TargetAcc = factor(Type, levels = unique(Type),
                    labels = c("Correct Retrieval", "Wrong Retrieval")))%>%
ggplot(aes(x = AgeGroup, y = Percent, 
          group=TargetAcc, fill = TargetAcc))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Percent - se, ymax=Percent + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
   scale_fill_solarized()+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("Age Group") + ylab("Percentage of Trials") + 
  ggtitle("E1: Know Responses in Young and Old Adults (Without Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
 e1_know_plot
@

 
 \subsection {Experiment 2}
<<fig=TRUE>>=
 ###  EXPERIMENT 2

contrasts(exp_2_knowacc$PrimeCondition) = contr.treatment(4, base = 3)
e2_know_hlm = lmer(data = exp_2_knowacc, Trials ~ PrimeCondition*Accuracy + 
                     (1|Subject))
summary(e2_know_hlm)
car::Anova(e2_know_hlm)

e2_know_hlm_age = lmer(data = exp_2_knowacc, Trials ~ AgeGroup*PrimeCondition*Accuracy + 
                     (1|Subject))
summary(e2_know_hlm_age)
car::Anova(e2_know_hlm_age)

## only older adults
library(lmerTest)
exp_2_knowacc_old = exp_2_knowacc %>% filter(AgeGroup == "Old")
e2_know_hlm_old = lmer(data = exp_2_knowacc_old, Trials ~ PrimeCondition*Accuracy + 
                     (1|Subject))
summary(e2_know_hlm_old)
car::Anova(e2_know_hlm_old)
## only young adults
exp_2_knowacc_young = exp_2_knowacc %>% filter(AgeGroup == "Young")
e2_know_hlm_young = lmer(data = exp_2_knowacc_young, Trials ~ PrimeCondition*Accuracy + 
                     (1|Subject))
summary(e2_know_hlm_young)
car::Anova(e2_know_hlm_young)

#sjPlot::plot_model(e2_know_hlm, type = "int")

## plotting

e2_know_data = Rmisc::summarySE(exp_2_knowacc, 
                        measurevar = "Trials",
                        groupvars = c("PrimeCondition", "Accuracy"))

e2_know_plot = e2_know_data %>% 
   mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
               labels = c("Both", "Phonological", "Semantic", "Unrelated")),
                    TargetAcc = factor(Accuracy, levels = unique(Accuracy),
                    labels = c("Failed Retrieval", "Correct Retrieval")))%>%
ggplot(aes(x = PrimeType, y = Trials, 
          group=TargetAcc, fill = TargetAcc))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - se, ymax=Trials + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
   scale_fill_wsj()+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("Prime Condition") + ylab("Number of Trials") + 
  ggtitle("E2: Know Responses in Young and Old Adults (With Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
 e2_know_plot
@

<<fig=TRUE>>=
 e2_know_data_age = Rmisc::summarySE(exp_2_knowacc, 
                        measurevar = "Trials",
                        groupvars = c("AgeGroup", "PrimeCondition", "Accuracy"))

e2_know_plot_age = e2_know_data_age %>% 
   mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
               labels = c("Both", "Phonological", "Semantic", "Unrelated")),
                    TargetAcc = factor(Accuracy, levels = unique(Accuracy),
                    labels = c("Failed Retrieval", "Correct Retrieval")))%>%
ggplot(aes(x = PrimeType, y = Trials, 
          group=TargetAcc, fill = TargetAcc))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - se, ymax=Trials + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
   scale_fill_wsj()+
  facet_wrap(~AgeGroup)+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("Prime Condition") + ylab("Number of Trials") + 
  ggtitle("E2: Know Responses in Young and Old Adults (With Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
 e2_know_plot_age
@
 
\subsection {Experiment 2 Collapsed Prime}
<<fig=TRUE>>=
## HLM on trials
exp_2_knowacc2 = exp_2_state_acc %>% filter(Question.RESP == "1")
library(lme4)
exp_2_knowacc2$Accuracy = as.factor(exp_2_knowacc2$Accuracy)
e2_know_hlm = lmer(data = exp_2_knowacc2, 
                   Trials ~ AgeGroup*Accuracy + 
                     (1|Subject))
summary(e2_know_hlm)
car::Anova(e2_know_hlm)

## percents

exp2_knowacc_percent = spread(exp_2_knowacc2, Accuracy, Trials)
exp2_knowacc_percent$`0` = ifelse(is.na(exp2_knowacc_percent$`0`), 
                                  0, exp2_knowacc_percent$`0`)
exp2_knowacc_percent$`1` = ifelse(is.na(exp2_knowacc_percent$`1`), 
                                  0, exp2_knowacc_percent$`1`)
exp2_knowacc_percent$total = exp2_knowacc_percent$`0` + exp2_knowacc_percent$`1`
exp2_knowacc_percent$pcorrect = exp2_knowacc_percent$`1`/exp2_knowacc_percent$total
exp2_knowacc_percent$pwrong = exp2_knowacc_percent$`0`/exp2_knowacc_percent$total

exp2_knowacc_long = exp2_knowacc_percent %>% gather(Type,
                                             Percent, 
                                       pcorrect:pwrong)%>%
   arrange(Subject)

## plotting
library(ggplot2)
library(ggthemes)
e2_know_data = Rmisc::summarySE(exp2_knowacc_long, 
                        measurevar = "Percent",
                        groupvars = c( "AgeGroup", "Type"))
e2_know_data$Percent = round(e2_know_data$Percent, 2)
e2_know_plot = e2_know_data %>% 
   mutate(TargetAcc = factor(Type, levels = unique(Type),
                    labels = c("Correct Retrieval", "Wrong Retrieval")))%>%
ggplot(aes(x = AgeGroup, y = Percent, 
          group=TargetAcc, fill = TargetAcc))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Percent - se, ymax=Percent + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
   scale_fill_solarized()+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("Age Group") + ylab("Number of Trials") + 
  ggtitle("E2: Know Responses in Young and Old Adults (Without Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
 e2_know_plot
@
 
\subsection {Experiment 3}

<<fig=TRUE>>=
contrasts(exp_3_knowacc$PrimeCondition) = contr.treatment(4, base = 3)
e3_know_hlm = lmer(data = exp_3_knowacc, Trials ~ PrimeCondition*Accuracy + 
                     (1|Subject))
summary(e3_know_hlm)
car::Anova(e3_know_hlm)

#sjPlot::plot_model(e3_know_hlm, type = "int")

## plotting

e3_know_data = Rmisc::summarySE(exp_3_knowacc, 
                        measurevar = "Trials",
                        groupvars = c("PrimeCondition", "Accuracy"))

e3_know_plot = e3_know_data %>% 
   mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
               labels = c("Both", "Phonological", "Semantic", "Unrelated")),
                    TargetAcc = factor(Accuracy, levels = unique(Accuracy),
                    labels = c("Failed Retrieval", "Correct Retrieval")))%>%
ggplot(aes(x = PrimeType, y = Trials, 
          group=TargetAcc, fill = TargetAcc))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - se, ymax=Trials + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
   scale_fill_wsj()+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("Prime Condition") + ylab("Number of Trials") + 
  ggtitle("E3: Know Responses in Young Adults Only (48 ms)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
 e3_know_plot
@

\subsection {Experiment 3 Collapsed Prime}
<<fig=TRUE>>=
## HLM on trials
exp_3_knowacc2 = exp_3_state_acc %>% filter(Question.RESP == "1")
library(lme4)
exp_3_knowacc2$Accuracy = as.factor(exp_3_knowacc2$Accuracy)
e3_know_hlm = lmer(data = exp_3_knowacc2, 
                   Trials ~ Accuracy + 
                     (1|Subject))
summary(e3_know_hlm)
car::Anova(e3_know_hlm)

## percents

exp3_knowacc_percent = spread(exp_3_knowacc2, Accuracy, Trials)
exp3_knowacc_percent$`0` = ifelse(is.na(exp3_knowacc_percent$`0`), 
                                  0, exp3_knowacc_percent$`0`)
exp3_knowacc_percent$`1` = ifelse(is.na(exp3_knowacc_percent$`1`), 
                                  0, exp3_knowacc_percent$`1`)
exp3_knowacc_percent$total = exp3_knowacc_percent$`0` + exp3_knowacc_percent$`1`
exp3_knowacc_percent$pcorrect = exp3_knowacc_percent$`1`/exp3_knowacc_percent$total
exp3_knowacc_percent$pwrong = exp3_knowacc_percent$`0`/exp3_knowacc_percent$total

exp3_knowacc_long = exp3_knowacc_percent %>% gather(Type,
                                             Percent, 
                                       pcorrect:pwrong)%>%
   arrange(Subject)

## plotting
library(ggplot2)
library(ggthemes)
e3_know_data = Rmisc::summarySE(exp3_knowacc_long, 
                        measurevar = "Percent",
                        groupvars = c( "AgeGroup", "Type"))
e3_know_data$Percent = round(e3_know_data$Percent, 2)
e3_know_plot = e3_know_data %>% 
   mutate(TargetAcc = factor(Type, levels = unique(Type),
                    labels = c("Correct Retrieval", "Wrong Retrieval")))%>%
ggplot(aes(x = AgeGroup, y = Percent, 
          group=TargetAcc, fill = TargetAcc))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Percent - se, ymax=Percent + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
   scale_fill_solarized()+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("Age Group") + ylab("Number of Trials") + 
  ggtitle("E2: Know Responses in Young and Old Adults (Without Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
 e3_know_plot
@
\section {Know: Across E1 E2 E3}

<<>>=
## all data is in data_stateprime_acc

## only know responses in young and old

data_stateprime_acc$Experiment = ifelse(data_stateprime_acc$StudyNo == "2" |
                                        data_stateprime_acc$StudyNo == "4",
                                        "No Instructions", 
                        ifelse(data_stateprime_acc$StudyNo == "5" |
                                 data_stateprime_acc$StudyNo == "6", 
                               "With Instructions", "Young 48 ms"))
data_stateprime_acc$Experiment = as.factor(data_stateprime_acc$Experiment)

stateprime_young_know_ru = data_stateprime_acc %>% 
  filter(AgeGroup == "Young" & Question.RESP == "1" &
           PrimeCondition %in% c("R", "U"))

stateprime_old_know_ru = data_stateprime_acc %>% 
  filter(AgeGroup == "Old" & Question.RESP == "1"&
           PrimeCondition %in% c("R", "U"))


@

\subsection {Young HLM and Plot}

<<fig=TRUE>>=
## hlm on young-know
contrasts(stateprime_young_know_ru$PrimeCondition) = 
  contr.treatment(4, base = 3)

contrasts(stateprime_young_know_ru$Experiment) = 
  contr.treatment(3, base = 2)

library(lmerTest)
library(lme4)
hlm_young_know = lmer(data = stateprime_young_know_ru, 
                      Trials ~ Experiment*PrimeCondition*Accuracy + 
                     (1|Subject))
summary(hlm_young_know)
car::Anova(hlm_young_know)
sjPlot::plot_model(hlm_young_know, type= "int")

stateprime_young_know_e2e3 = stateprime_young_know_ru %>%
  filter(Experiment != "No Instructions")

hlm_young_know_e2e3 = lmer(data = stateprime_young_know_e2e3, 
                      Trials ~ Experiment*PrimeCondition*Accuracy + 
                     (1|Subject))
summary(hlm_young_know_e2e3)
car::Anova(hlm_young_know_e2e3)
sjPlot::plot_model(hlm_young_know_e2e3, type= "int")

## plotting young data

young_know_data = Rmisc::summarySE(stateprime_young_know_ru, 
                        measurevar = "Trials",
                        groupvars = c("Experiment" ,
                                      "PrimeCondition", "Accuracy"))

young_know_plot = young_know_data %>% 
   mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
               labels = c("Semantic", "Unrelated")),
                    TargetAcc = factor(Accuracy, levels = unique(Accuracy),
                    labels = c("Failed Retrieval", "Correct Retrieval")))%>%
ggplot(aes(x = PrimeType, y = Trials, 
          group=TargetAcc, fill = TargetAcc))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - se, ymax=Trials + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
   scale_fill_wsj()+
  facet_wrap(~Experiment)+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("Prime Condition") + ylab("Number of Trials") + 
  ggtitle("Young Adults: Know Responses in E1, E2 and E3")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
 young_know_plot
@

\subsection {Old HLM and Plot}
<<fig=TRUE>>=
## hlm on old-know
contrasts(stateprime_old_know_ru$PrimeCondition) = 
  contr.treatment(4, base = 3)
hlm_old_know = lmer(data = stateprime_old_know_ru, 
                      Trials ~ Experiment*PrimeCondition*Accuracy + 
                     (1|Subject))
summary(hlm_old_know)
car::Anova(hlm_old_know)
sjPlot::plot_model(hlm_old_know, type= "int")

stateprime_old_know_ru1 = stateprime_old_know_ru %>% filter(Subject != "702")

old_know_data = Rmisc::summarySE(stateprime_old_know_ru1, 
                        measurevar = "Trials",
                        groupvars = c("Experiment" ,
                                      "PrimeCondition", "Accuracy"))
old_know_plot = old_know_data %>% 
   mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
               labels = c("Semantic", "Unrelated")),
                    TargetAcc = factor(Accuracy, levels = unique(Accuracy),
                    labels = c("Failed Retrieval", "Correct Retrieval")))%>%
ggplot(aes(x = PrimeType, y = Trials, 
          group=TargetAcc, fill = TargetAcc))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - se, ymax=Trials + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
   scale_fill_wsj()+
  facet_wrap(~Experiment)+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("Prime Condition") + ylab("Number of Trials") + 
  ggtitle("Old Adults: Know Responses in E1 and E2")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
 old_know_plot
@
 
<<fig=TRUE>>=

 ### ADDING ZEROS WHERE NEEDED
 
 know_old_ru_trials =stateprime_old_know_ru1
 old_know_ru_trials = know_old_ru_trials

 oldtotaltrials_trials = spread(old_know_ru_trials, Accuracy, Trials)
 
 oldtotaltrials_trials$`0` = ifelse(is.na(oldtotaltrials_trials$`0`),
                                    0,oldtotaltrials_trials$`0`)
 oldtotaltrials_trials$`1`= ifelse(is.na(oldtotaltrials_trials$`1`),
                                   0,oldtotaltrials_trials$`1`)

long_oldpercent_trials <- oldtotaltrials_trials %>% gather(Type,
                                             Trials, 
                                       `0`:`1`)%>%
   arrange(Subject, PrimeCondition)
 long_oldpercent_trials$Type = as.factor(long_oldpercent_trials$Type)
 
 old_know_data_all_trials = Rmisc::summarySE(long_oldpercent_trials, 
                        measurevar = "Trials",
                        groupvars = c("Experiment" ,
                                      "PrimeCondition", "Type"))

old_know_data_all_trials$Accuracy = factor(old_know_data_all_trials$Type,
                            levels(old_know_data_all_trials$Type)[c(2,1)])

old_know_plot_all_trials = old_know_data_all_trials %>% 
   mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
               labels = c("Semantic", "Unrelated")))%>%
ggplot(aes(x = PrimeType, y = Trials,
           group= Accuracy, fill= Accuracy))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - se, ymax=Trials + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
   scale_fill_wsj()+
  facet_wrap(~Experiment)+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("Prime Condition") + ylab("Percentage of Trials") + 
  ggtitle("Old Adults: Know Responses in E1 and E2 ")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
old_know_plot_all_trials 
@

\section {Know ANOVA}

<<>>=
 stateprime_young_know_ru_complete = stateprime_young_know_ru %>%
   filter(!Subject  %in% c(14,17, 24,26,28,30,44,68,67,72,79,80,85,86,90,95,164, 170,171,172, 188))
 
 stateprime_young_know_ru_complete$Subject = as.factor(stateprime_young_know_ru_complete$Subject)
 know_aov = aov(data = stateprime_young_know_ru_complete, Trials ~ Experiment*PrimeCondition*Accuracy + 
                  Error(Subject/(PrimeCondition*Accuracy)))
 summary(know_aov)
 
 onlye2e3 = stateprime_young_know_ru_complete %>% filter(Experiment != "Young 48 ms")
 
 know_aov2 = aov(data = onlye2e3, Trials ~ Experiment*PrimeCondition*Accuracy + 
                  Error(Subject/(PrimeCondition*Accuracy)))
 summary(know_aov2)
 
@ 

\section {Know Percent Rel Unrel }

\subsection {Young}

<<fig=TRUE>>=
know_young_ru_percent = read.csv("young_know_ru.csv", 
                                 header = TRUE, sep = ",")
 
young_know_ru = know_young_ru_percent[,-1]
 youngtotaltrials = spread(young_know_ru, Accuracy, Trials)
 
 youngtotaltrials$`0` = ifelse(is.na(youngtotaltrials$`0`), 0,youngtotaltrials$`0`)
 youngtotaltrials$`1`= ifelse(is.na(youngtotaltrials$`1`), 0,youngtotaltrials$`1`)

 youngtotaltrials$total = youngtotaltrials$`0` + youngtotaltrials$`1`

 youngtotaltrials$PercentCorrect = youngtotaltrials$`1`/youngtotaltrials$total
youngtotaltrials$PercentIncorrect = youngtotaltrials$`0`/youngtotaltrials$total

## remove NA trials

#totaltrials = totaltrials %>% filter(!(is.na(Rpercent) & is.na(Upercent)))

## convert back to long

# long_youngpercent <- totaltrials %>% gather(PrimeCondition,
#                                             Percent, 
#                                       PercentCorrect:PercentIncorrect)%>%
#   arrange(Subject)

youngtotaltrials$Subject = as.factor(youngtotaltrials$Subject)
anova_youngpercent = aov(data = youngtotaltrials, 
                         PercentCorrect ~ Experiment*PrimeCondition + 
                           Error(Subject/PrimeCondition))

summary(anova_youngpercent)

young_know_data = Rmisc::summarySE(youngtotaltrials, 
                        measurevar = "PercentCorrect",
                        groupvars = c("Experiment" ,
                                      "PrimeCondition"))

young_know_plot = young_know_data %>% 
   mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
               labels = c("Semantic", "Unrelated")))%>%
ggplot(aes(x = PrimeType, y = PercentCorrect))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=PercentCorrect - se, ymax=PercentCorrect + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
   scale_fill_wsj()+
  facet_wrap(~Experiment)+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("Prime Condition") + ylab("Percentage of Trials") + 
  ggtitle("Young Adults: Correct Know Responses in E1, E2 and E3")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
 young_know_plot
@

\subsection {Young Correct Incorrect}

<<fig=TRUE>>=
know_young_ru_percent = read.csv("young_know_ru.csv", 
                                 header = TRUE, sep = ",")
 
young_know_ru = know_young_ru_percent[,-1]
 youngtotaltrials = spread(young_know_ru, Accuracy, Trials)
 
 youngtotaltrials$`0` = ifelse(is.na(youngtotaltrials$`0`), 0,youngtotaltrials$`0`)
 youngtotaltrials$`1`= ifelse(is.na(youngtotaltrials$`1`), 0,youngtotaltrials$`1`)

 youngtotaltrials$total = youngtotaltrials$`0` + youngtotaltrials$`1`

 youngtotaltrials$PercentCorrect = youngtotaltrials$`1`/youngtotaltrials$total
youngtotaltrials$PercentIncorrect = youngtotaltrials$`0`/youngtotaltrials$total

## convert back to long

 long_youngpercent <- youngtotaltrials %>% gather(Type,
                                             Percent, 
                                       PercentCorrect:PercentIncorrect)%>%
   arrange(Subject, PrimeCondition)
 long_youngpercent$Type = as.factor(long_youngpercent$Type)
  long_youngpercent$Subject = as.factor(long_youngpercent$Subject)

##  correct and incorrect anova
anova_youngpercent_all = aov(data = long_youngpercent, 
                         Percent ~ Experiment*PrimeCondition*Type + 
                           Error(Subject/(PrimeCondition*Type)))

summary(anova_youngpercent_all)


 
 ## correct and incorrect 
young_know_data_all = Rmisc::summarySE(long_youngpercent, 
                        measurevar = "Percent",
                        groupvars = c("Experiment" ,
                                      "PrimeCondition", "Type"))
young_know_data_all$Accuracy = factor(young_know_data_all$Type,
                            levels(young_know_data_all$Type)[c(2,1)])

young_know_plot_all = young_know_data_all %>% 
   mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
               labels = c("Semantic", "Unrelated")))%>%
ggplot(aes(x = PrimeType, y = Percent, 
           group = Accuracy, fill = Accuracy))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Percent - se, ymax=Percent + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
   scale_fill_wsj()+
  facet_wrap(~Experiment)+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("Prime Condition") + ylab("Percentage of Trials") + 
  ggtitle("Young Adults: Know Responses in E1, E2 and E3")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
 young_know_plot_all
@

\subsection {Old}

<<fig=TRUE>>=
know_old_ru_percent = read.csv("old_know_ru.csv", 
                                 header = TRUE, sep = ",")
 old_know_ru = know_old_ru_percent[,-1]

 oldtotaltrials = spread(old_know_ru, Accuracy, Trials)
 
 oldtotaltrials$`0` = ifelse(is.na(oldtotaltrials$`0`), 0,oldtotaltrials$`0`)
 oldtotaltrials$`1`= ifelse(is.na(oldtotaltrials$`1`), 0,oldtotaltrials$`1`)
 
 
 oldtotaltrials$total = oldtotaltrials$`0` + oldtotaltrials$`1`
 
  oldtotaltrials$PercentCorrect = oldtotaltrials$`1`/oldtotaltrials$total
oldtotaltrials$PercentIncorrect = oldtotaltrials$`0`/oldtotaltrials$total
#totaltrials = totaltrials %>% filter(!(i1.s.na(Rpercent) & is.na(Upercent)))


## convert back to long

# long_oldpercent <- totaltrials %>% gather(PrimeCondition,
#                                             Percent, Rpercent:Upercent)%>%
#   arrange(Subject)


## Subject 702 does not have U know trials at all

 
 oldtotaltrials = oldtotaltrials %>% filter(Subject != "702")

  
 
 oldtotaltrials$`0` = as.numeric(as.character(oldtotaltrials$`0`))
 oldtotaltrials$`1` = as.numeric(as.character(oldtotaltrials$`1`))

oldtotaltrials$Subject = as.factor(oldtotaltrials$Subject)


anova_oldpercent = aov(data = oldtotaltrials, 
                         PercentCorrect ~ Experiment*PrimeCondition + 
                           Error(Subject/PrimeCondition))

summary(anova_oldpercent)

old_know_data = Rmisc::summarySE(oldtotaltrials, 
                        measurevar = "PercentCorrect",
                        groupvars = c("Experiment" ,
                                      "PrimeCondition"))

old_know_plot = old_know_data %>% 
   mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
               labels = c("Semantic", "Unrelated")))%>%
ggplot(aes(x = PrimeType, y = PercentCorrect))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=PercentCorrect - se, ymax=PercentCorrect + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
   scale_fill_wsj()+
  facet_wrap(~Experiment)+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("Prime Condition") + ylab("Percentage of Trials") + 
  ggtitle("Old Adults: Correct Know Responses in E1 and E2 ")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
 old_know_plot
@

\subsection {Old Correct Incorrect}
<<fig=TRUE>>=
know_old_ru_percent = read.csv("old_know_ru.csv", 
                                 header = TRUE, sep = ",")
 
old_know_ru = know_old_ru_percent[,-1]
 oldtotaltrials = spread(old_know_ru, Accuracy, Trials)
 
 oldtotaltrials$`0` = ifelse(is.na(oldtotaltrials$`0`), 0,oldtotaltrials$`0`)
 oldtotaltrials$`1`= ifelse(is.na(oldtotaltrials$`1`), 0,oldtotaltrials$`1`)
 
 
 oldtotaltrials$total = oldtotaltrials$`0` + oldtotaltrials$`1`
 
  oldtotaltrials$PercentCorrect = oldtotaltrials$`1`/oldtotaltrials$total
oldtotaltrials$PercentIncorrect = oldtotaltrials$`0`/oldtotaltrials$total
#totaltrials = totaltrials %>% filter(!(i1.s.na(Rpercent) & is.na(Upercent)))
## convert back to long

long_oldpercent <- oldtotaltrials %>% gather(Type,
                                             Percent, 
                                       PercentCorrect:PercentIncorrect)%>%
   arrange(Subject, PrimeCondition)
 long_oldpercent$Type = as.factor(long_oldpercent$Type)
 
 ## Subject 702 does not have U know trials at all

 
 long_oldpercent = long_oldpercent %>% filter(Subject != "702")

long_oldpercent$Subject = as.factor(long_oldpercent$Subject)


##  correct and incorrect anova
anova_oldpercent_all = aov(data = long_oldpercent, 
                         Percent ~ Experiment*PrimeCondition*Type + 
                           Error(Subject/(PrimeCondition*Type)))

summary(anova_oldpercent_all)

old_know_data_all = Rmisc::summarySE(long_oldpercent, 
                        measurevar = "Percent",
                        groupvars = c("Experiment" ,
                                      "PrimeCondition", "Type"))

old_know_data_all$Accuracy = factor(old_know_data_all$Type,
                            levels(old_know_data_all$Type)[c(2,1)])

old_know_plot_all = old_know_data_all %>% 
   mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
               labels = c("Semantic", "Unrelated")))%>%
ggplot(aes(x = PrimeType, y = Percent,
           group= Accuracy, fill= Accuracy))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Percent - se, ymax=Percent + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
   scale_fill_wsj()+
  facet_wrap(~Experiment)+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("Prime Condition") + ylab("Percentage of Trials") + 
  ggtitle("Old Adults: Know Responses in E1 and E2 ")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
 old_know_plot_all
@

\subsection {Age Differences }

<<fig=TRUE>>=
 long_oldyoung = rbind(long_youngpercent, long_oldpercent)
 long_e1 = long_oldyoung %>% filter(Experiment == "No Instructions")
 long_e2 = long_oldyoung %>% filter(Experiment == "With Instructions")
 
 ### Experiment 1
 long_e1_rmisc = Rmisc::summarySE(long_e1, 
                        measurevar = "Percent",
                        groupvars = c("AgeGroup" ,
                                      "PrimeCondition", "Type"))

long_e1_rmisc$Accuracy = factor(long_e1_rmisc$Type,
                            levels(long_e1_rmisc$Type)[c(2,1)])

long_e1_rmisc_plot = long_e1_rmisc %>% 
   mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
               labels = c("Semantic", "Unrelated")))%>%
ggplot(aes(x = PrimeType, y = Percent,
           group= Accuracy, fill= Accuracy))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Percent - se, ymax=Percent + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
   scale_fill_wsj()+
  facet_wrap(~AgeGroup)+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("Prime Condition") + ylab("Percentage of Trials") + 
  ggtitle("Know Responses in E1  ")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
 long_e1_rmisc_plot
@

<<fig=TRUE>>=

 ### Experiment 2
 long_e2_rmisc = Rmisc::summarySE(long_e2, 
                        measurevar = "Percent",
                        groupvars = c("AgeGroup" ,
                                      "PrimeCondition", "Type"))

long_e2_rmisc$Accuracy = factor(long_e2_rmisc$Type,
                            levels(long_e2_rmisc$Type)[c(2,1)])

long_e2_rmisc_plot = long_e2_rmisc %>% 
   mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
               labels = c("Semantic", "Unrelated")))%>%
ggplot(aes(x = PrimeType, y = Percent,
           group= Accuracy, fill= Accuracy))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Percent - se, ymax=Percent + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
   scale_fill_wsj()+
  facet_wrap(~AgeGroup)+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("Prime Condition") + ylab("Percentage of Trials") + 
  ggtitle("Know Responses in E2  ")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
 long_e2_rmisc_plot
@

\subsubsection {HLMS}

<<>>=
long_e1_hlm = lmer(data = long_e1, Percent ~ AgeGroup*PrimeCondition*Type + 
                     (1|Subject)) 
 car::Anova(long_e1_hlm)
 
 long_e2_hlm = lmer(data = long_e2, Percent ~ AgeGroup*PrimeCondition*Type + 
                     (1|Subject)) 
 car::Anova(long_e2_hlm)
@



\subsection {State Accuracy Figures}
\subsubsection *{Experiment 1}

<<>>=
 
exp1_fig_state_acc = Rmisc::summarySE(exp_1_state_acc, 
                        measurevar = "Trials",
                        groupvars = c("AgeGroup", "Question.RESP", "Accuracy"))


exp1_fig_state_acc =  arrange(exp1_fig_state_acc, 
                               desc(AgeGroup))

exp1_fig_state_acc$Accuracy = as.factor(as.character(exp1_fig_state_acc$Accuracy))

library(ggplot2)
library(ggthemes)
 state_1_acc = exp1_fig_state_acc %>% mutate(State = factor(Question.RESP, 
                                    levels = unique(Question.RESP),
                            labels = c("Know", "Dont Know", "Other", "TOT")),
                            Age = factor(AgeGroup, levels = unique(AgeGroup),
                    labels = c("Young", "Old")),
                    TargetAcc = factor(Accuracy, levels = unique(Accuracy),
                    labels = c("Failed Retrieval", "Correct Retrieval")))%>%
ggplot(aes(x = State, y = Trials, 
           group = TargetAcc, fill = TargetAcc))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - ci, ymax=Trials + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  facet_wrap(~Age)+
   scale_fill_wsj()+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("") + ylab("") + 
  ggtitle("E1: Young vs. Old (Without Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
 
@

\subsubsection *{Experiment 2}

<<>>=
 exp2_fig_state_acc = Rmisc::summarySE(exp_2_state_acc, 
                        measurevar = "Trials",
                        groupvars = c("AgeGroup", "Question.RESP", "Accuracy"))


exp2_fig_state_acc =  arrange(exp2_fig_state_acc, 
                               desc(AgeGroup))

exp2_fig_state_acc$Accuracy = as.factor(as.character(exp2_fig_state_acc$Accuracy))

library(ggplot2)
library(ggthemes)
 state_2_acc = exp2_fig_state_acc %>% mutate(State = factor(Question.RESP, 
                                    levels = unique(Question.RESP),
                            labels = c("Know", "Dont Know", "Other", "TOT")),
                            Age = factor(AgeGroup, levels = unique(AgeGroup),
                    labels = c("Young", "Old")),
                    TargetAcc = factor(Accuracy, levels = unique(Accuracy),
                    labels = c("Failed Retrieval", "Correct Retrieval")))%>%
ggplot(aes(x = State, y = Trials, 
           group = TargetAcc, fill = TargetAcc))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - ci, ymax=Trials + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  facet_wrap(~Age)+
   scale_fill_wsj()+
 # scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("") + ylab("") + 
  ggtitle("E2: Young vs. Old (With Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@

\subsubsection *{Experiment 3}

<<>>=
 exp3_fig_state_acc = Rmisc::summarySE(exp_3_state_acc, 
                        measurevar = "Trials",
                        groupvars = c("AgeGroup", "Question.RESP", "Accuracy"))


exp3_fig_state_acc =  arrange(exp3_fig_state_acc, 
                               desc(AgeGroup))

exp3_fig_state_acc$Accuracy = as.factor(as.character(exp3_fig_state_acc$Accuracy))

library(ggplot2)
library(ggthemes)
state_3_acc= exp3_fig_state_acc %>% mutate(State = factor(Question.RESP, 
                                    levels = unique(Question.RESP),
                            labels = c("Know", "Dont Know", "Other", "TOT")),
                            Age = factor(AgeGroup, levels = unique(AgeGroup),
                    labels = c("Young")),
                    TargetAcc = factor(Accuracy, levels = unique(Accuracy),
                    labels = c("Failed Retrieval", "Correct Retrieval")))%>%
ggplot(aes(x = State, y = Trials, 
           group = TargetAcc, fill = TargetAcc))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - ci, ymax=Trials + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  facet_wrap(~Age)+
   scale_fill_wsj()+
  #scale_fill_manual(values = c("royalblue4", "slategray1"))+
    xlab("") + ylab("") + 
  ggtitle("E3: Young(48 ms)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
@

\subsubsection* {Combined}

<<fig=TRUE>>=
library(grid)
gridExtra::grid.arrange(state_1_acc, state_2_acc, state_3_acc, 
                        nrow = 3, ncol = 1, 
                top=textGrob("Retrieval States Across Experiments E1, E2, E3", 
                                      gp=gpar(fontsize=20)))
@

\section {Conditional TOT Analysis}

<<>>=

j <- read.csv("MainJulieagg_5studies.csv", header = TRUE, sep = ",")
j <- subset(j, j$value.Subject!= 198 & j$value.Subject!= 95)

j_condTOT = j[,c(2,3,4,5,95:103)]
j_condTOT$value.Subject = as.factor(j_condTOT$value.Subject)

library(tidyr)
library(dplyr)
condTOTprime <- j_condTOT %>%
  gather(PrimeState, Proportion, 
         condpropTOT_r, condpropTOT_p,condpropTOT_b, condpropTOT_u) %>%
  separate(PrimeState, c('State', 'Prime'), sep = "_") %>%
  arrange(value.Subject)

colnames(condTOTprime) = c("AgeGroup", "Subject", "StudyNo", "PrimeInstruction", "condTOTprop",
                           "r_TOT", "p_TOT", "b_TOT", "u_TOT", "State",
                                       "PrimeCondition", "Proportion")
condTOTprime$AgeGroup <- as.factor(condTOTprime$AgeGroup)
condTOTprime$Subject <- as.factor(condTOTprime$Subject)
condTOTprime$StudyNo <- as.factor(condTOTprime$StudyNo)
condTOTprime$PrimeInstruction <- as.factor(condTOTprime$PrimeInstruction)
condTOTprime$PrimeCondition <- as.factor(condTOTprime$PrimeCondition)
condTOTprime$Proportion <- as.numeric(as.character(condTOTprime$Proportion))


condTOT_exp1 = j_condTOT %>% filter(value.StudyNo == '2' | value.StudyNo == '4')
condTOT_exp2 = j_condTOT %>% filter(value.StudyNo == '5' | value.StudyNo == '6')
condTOT_exp3 = j_condTOT %>% filter(value.StudyNo == '1')

condTOTprime_exp1 = condTOTprime %>% filter(StudyNo == '2' | StudyNo == '4')
condTOTprime_exp2 = condTOTprime %>% filter(StudyNo == '5' | StudyNo == '6')
condTOTprime_exp3 = condTOTprime %>% filter(StudyNo == '1')

@

\subsection {Experiment 1}

\subsubsection {CondTOT: Young vs Old}

<<>>=
e1_condTOT_aov = aov(data = condTOT_exp1, condTOTprop ~ value.AgeGroup)
summary(e1_condTOT_aov)
@

\subsubsection {CondTOT: Age x PrimeType}

<<fig=TRUE>>=
condTOTprime_exp1[179,12 ] = 0
e1_condTOTprime_aov = aov(data = condTOTprime_exp1, Proportion ~ AgeGroup*PrimeCondition + 
                            Error(Subject/PrimeCondition))
summary(e1_condTOTprime_aov)

exp1_fig_condTOT = Rmisc::summarySE(condTOTprime_exp1, 
                        measurevar = "Proportion",
                        groupvars = c("AgeGroup", "PrimeCondition"))

library(ggplot2)
library(ggthemes)
exp1_fig_condTOT = exp1_fig_condTOT %>% mutate(PrimeType = factor(PrimeCondition, 
                                                 levels = unique(PrimeCondition),
                    labels = c("Both", "Phonological", 
                               "Semantic", "Unrelated")))%>%
ggplot(aes(x = PrimeType, y = Proportion, 
                              fill = AgeGroup, group = AgeGroup))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Proportion - ci, ymax=Proportion + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
 scale_fill_colorblind()+
    xlab("") + ylab("Mean Proportion of TOTs") + 
  ggtitle("E1: Young and Old Adults (With Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
exp1_fig_condTOT
@

\subsection {Experiment 2}

\subsubsection {CondTOT: Young vs Old}

<<>>=
e2_condTOT_aov = aov(data = condTOT_exp2, condTOTprop ~ value.AgeGroup)
summary(e2_condTOT_aov)

options(contrasts = c('contr.sum', 'contr.poly'))
library(lsmeans)
library(multcomp)
exp2_target_lsm = lsmeans::lsmeans(e2_condTOT_aov, c("value.AgeGroup"))
prime_effect = cld(exp2_target_lsm, alpha = 0.05, 
                adjust = "tukey", details = TRUE)
library(knitr)
kable(subset(prime_effect$comparisons,prime_effect$comparisons$p.value < 0.05 ))
@

\subsubsection {CondTOT: Age x PrimeType}

<<fig=TRUE>>=
e2_condTOTprime_aov = aov(data = condTOTprime_exp2, Proportion ~ AgeGroup*PrimeCondition + 
                            Error(Subject/PrimeCondition))
summary(e2_condTOTprime_aov)

exp2_fig_condTOT = Rmisc::summarySE(condTOTprime_exp2, 
                        measurevar = "Proportion",
                        groupvars = c("AgeGroup", "PrimeCondition"))

library(ggplot2)
library(ggthemes)
exp2_fig_condTOT = exp2_fig_condTOT %>% mutate(PrimeType = factor(PrimeCondition, 
                                                 levels = unique(PrimeCondition),
                    labels = c("Both", "Phonological", 
                               "Semantic", "Unrelated")))%>%
ggplot(aes(x = PrimeType, y = Proportion, 
                              fill = AgeGroup, group = AgeGroup))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Proportion - ci, ymax=Proportion + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
 scale_fill_colorblind()+
    xlab("") + ylab("Mean Proportion of TOTs") + 
  ggtitle("E2: Young and Old Adults (With Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
exp2_fig_condTOT
@


\subsection {Experiment 3}

\subsubsection {CondTOT:PrimeType}

<<fig=TRUE>>=
e3_condTOTprime_aov = aov(data = condTOTprime_exp3, Proportion ~ PrimeCondition + 
                            Error(Subject/PrimeCondition))
summary(e3_condTOTprime_aov)

exp3_fig_condTOT = Rmisc::summarySE(condTOTprime_exp3, 
                        measurevar = "Proportion",
                        groupvars = c("PrimeCondition"))

library(ggplot2)
library(ggthemes)
exp3_fig_condTOT = exp3_fig_condTOT %>% mutate(PrimeType = factor(PrimeCondition, 
                                                 levels = unique(PrimeCondition),
                    labels = c("Both", "Phonological", 
                               "Semantic", "Unrelated")))%>%
ggplot(aes(x = PrimeType, y = Proportion))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Proportion - ci, ymax=Proportion + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
 scale_fill_colorblind()+
    xlab("") + ylab("Mean Proportion of TOTs") + 
  ggtitle("E2: Young and Old Adults (With Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
exp3_fig_condTOT
@

\section {TOT for No Responses}

<<fig=TRUE>>=

statedata <- read.csv("Julie_Main5Studies.csv", header = TRUE, sep = ",")

statedata <- subset(statedata, statedata$Subject!= 198 & statedata$Subject!= 95)

statedata_TOT = statedata %>% filter(FreeResp %in% c("0", "", "1", "2", "3",
                                                     "4", "9", "20", "40", 
                                                     "{-}", "{-}{SPACE}",
                                                     "{SHIFT}", "{SPACE}"))
                                                     
                                       

## now we are looking only at trials in which the participant did not respond at all

NoResp_exp1 = statedata_TOT %>% filter(StudyNo == '2' | StudyNo == '4')
NoResp_exp2 = statedata_TOT %>% filter(StudyNo == '5' | StudyNo == '6')
NoResp_exp3 = statedata_TOT %>% filter(StudyNo == '1')

NoResp_exp2_agg = group_by(NoResp_exp2, Subject, AgeGroup, Question.RESP) %>%
  summarise(Trials = n())
  
exp2_fig_noresp= Rmisc::summarySE(NoResp_exp2_agg, 
                        measurevar = "Trials",
                        groupvars = c("AgeGroup", "Question.RESP"))

library(ggplot2)
library(ggthemes)
exp2_fig_noresp_plot = exp2_fig_noresp %>% 
mutate (RetrievalState = factor(Question.RESP, levels = unique(Question.RESP),
                            labels = c(" Know", "Dont Know", "Other", "TOT")))%>%
ggplot(aes(x = RetrievalState, y = Trials, 
           group = AgeGroup, fill = AgeGroup))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - ci, ymax=Trials + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
 scale_fill_colorblind()+
    xlab("") + ylab("Mean Proportion of TOTs") + 
  ggtitle("E2: Young and Old Adults (With Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
exp2_fig_noresp_plot
@

<<fig=TRUE>>=

e2_noresp_TOT = NoResp_exp2_agg %>% filter(Question.RESP == "4")
y_TOT = e2_noresp_TOT %>% filter(AgeGroup == "Young")
o_TOT = e2_noresp_TOT %>% filter(AgeGroup == "Old")

t.test(y_TOT$Trials, o_TOT$Trials)

## E1

NoResp_exp1_agg = group_by(NoResp_exp1, Subject, AgeGroup, Question.RESP) %>%
  summarise(Trials = n())
  
exp1_fig_noresp= Rmisc::summarySE(NoResp_exp1_agg, 
                        measurevar = "Trials",
                        groupvars = c("AgeGroup", "Question.RESP"))

library(ggplot2)
library(ggthemes)
exp1_fig_noresp_plot = exp1_fig_noresp %>% 
mutate (RetrievalState = factor(Question.RESP, levels = unique(Question.RESP),
                            labels = c(" Know", "Dont Know", "Other", "TOT")))%>%
ggplot(aes(x = RetrievalState, y = Trials, 
           group = AgeGroup, fill = AgeGroup))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - se, ymax=Trials + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
 scale_fill_colorblind()+
    xlab("") + ylab("Mean Proportion of TOTs") + 
  ggtitle("E1: Young and Old Adults (No Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
exp1_fig_noresp_plot
@

<<fig=TRUE>>=

## OA more TOTs than YA when not producing a response: test this AOV

e1_noresp_TOT = NoResp_exp1_agg %>% filter(Question.RESP == "4")
y_TOT = e1_noresp_TOT %>% filter(AgeGroup == "Young")
o_TOT = e1_noresp_TOT %>% filter(AgeGroup == "Old")

t.test(y_TOT$Trials, o_TOT$Trials) ## no difference


## Does this vary with prime type? ## nope

NoResp_exp1_prime_agg = group_by(NoResp_exp1, Subject, AgeGroup,PrimeCondition, Question.RESP) %>%
  summarise(Trials = n())

exp1_fig_norespprime= Rmisc::summarySE(NoResp_exp1_prime_agg, 
                        measurevar = "Trials",
                        groupvars = c("AgeGroup", "PrimeCondition", "Question.RESP"))

library(ggplot2)
library(ggthemes)
exp1_fig_norespprime_plot = exp1_fig_norespprime %>% 
mutate (RetrievalState = factor(Question.RESP, levels = unique(Question.RESP),
                            labels = c(" Know", "Dont Know", "Other", "TOT")))%>%
ggplot(aes(x = RetrievalState, y = Trials, 
           group = AgeGroup, fill = AgeGroup))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - se, ymax=Trials + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  facet_wrap(~PrimeCondition)+
 scale_fill_colorblind()+
    xlab("") + ylab("Mean Trials of TOTs") + 
  ggtitle("E1: Young and Old Adults (No Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
exp1_fig_norespprime_plot
@

<<fig=TRUE>>=

## E2
NoResp_exp2_prime_agg = group_by(NoResp_exp2, Subject, AgeGroup,PrimeCondition, Question.RESP) %>%
  summarise(Trials = n())

exp2_fig_norespprime= Rmisc::summarySE(NoResp_exp2_prime_agg, 
                        measurevar = "Trials",
                        groupvars = c("AgeGroup", "PrimeCondition", "Question.RESP"))

library(ggplot2)
library(ggthemes)
exp2_fig_norespprime_plot = exp2_fig_norespprime %>% 
mutate (RetrievalState = factor(Question.RESP, levels = unique(Question.RESP),
                            labels = c(" Know", "Dont Know", "Other", "TOT")))%>%
ggplot(aes(x = RetrievalState, y = Trials, 
           group = AgeGroup, fill = AgeGroup))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
  geom_errorbar(aes(ymin=Trials - se, ymax=Trials + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
  facet_wrap(~PrimeCondition)+
 scale_fill_colorblind()+
    xlab("") + ylab("Mean Trials of TOTs") + 
  ggtitle("E2: Young and Old Adults (With Instructions)")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
exp2_fig_norespprime_plot
@

\section {TOT: Split by Target Accuracy}

% <<fig=TRUE>>=
% ## remove all incorrect TOT: when McAcc was 0
% statedata <- read.csv("Julie_Main5Studies.csv", header = TRUE, sep = ",")
% 
% statedata <- subset(statedata, statedata$Subject!= 198 & statedata$Subject!= 95)
% 
% statedata$TOTmeasure = ifelse(statedata$Question.RESP == "4" & 
%                                 statedata$McAcc == "1", "correctTOT",
%                 ifelse(statedata$Question.RESP == "4" &
%                          statedata$McAcc == "0","incorrectTOT",
%                 ifelse(statedata$Question.RESP == "1" & 
%                          statedata$Accuracy == "0","incorrectKnow",
%                ifelse(statedata$Question.RESP == "2","dontknow",
%              ifelse(statedata$Question.RESP == "3"& 
%                          statedata$Accuracy == "0","incorrectOther","NA")))))
% 
% age_statedata = group_by(statedata, AgeGroup, 
%                          ExperimentName,Subject, TOTmeasure) %>%
%   summarise(Trials = n())
% 
% age_statedata_wide = spread(age_statedata, TOTmeasure, Trials)
% 
% age_statedata_wide$correctTOT = ifelse(is.na(age_statedata_wide$correctTOT),0, 
%                                        age_statedata_wide$correctTOT)
% 
% age_statedata_wide$incorrectTOT = ifelse(is.na(age_statedata_wide$incorrectTOT),0, age_statedata_wide$incorrectTOT)
% 
% age_statedata_wide$incorrectKnow = ifelse(is.na(age_statedata_wide$incorrectKnow),0,  age_statedata_wide$incorrectKnow)
% 
% 
% age_statedata_wide$dontknow = ifelse(is.na(age_statedata_wide$dontknow),0, 
%                                        age_statedata_wide$dontknow)
% 
% age_statedata_wide$incorrectOther = ifelse(is.na(age_statedata_wide$incorrectOther),0,  age_statedata_wide$incorrectOther)
% 
% 
% age_statedata_wide = mutate(age_statedata_wide, 
%                             propTOT = correctTOT/(correctTOT + dontknow +
%                                            incorrectKnow + incorrectTOT +
%                                              incorrectOther))
% 
% exp1_age_TOT = age_statedata_wide %>% filter(ExperimentName == "tot extended prime")
% 
% exp2_age_TOT = age_statedata_wide %>% filter(ExperimentName == "tot not the prime")
% 
% 
% e1_TOT_aov = aov(data = exp1_age_TOT, propTOT ~ AgeGroup)
% summary(e1_TOT_aov)
% 
% e2_TOT_aov = aov(data = exp2_age_TOT, propTOT ~ AgeGroup)
% summary(e2_TOT_aov)
% 
% ## plotting this proportion ## remove subject from dply code
% 
% successTOT_plot = age_statedata_wide %>% 
% ggplot(aes(x = AgeGroup, y = propTOT, 
%            group = AgeGroup, fill = AgeGroup))+
%  geom_bar(stat = "identity", position = "dodge", width = 0.7, 
%           color= "black")+
%  theme_few()+
%   facet_wrap(~ExperimentName)+
%   scale_fill_manual(values = c("royalblue4", "slategray1"))+
%     xlab("") + ylab("Mean Proportion of TOTs") + 
%   ggtitle("")  +
%    theme(axis.text = element_text(size = rel(1)),
%           axis.title = element_text(face = "bold", size = rel(1)),
%           legend.title = element_text(face = "bold", size = rel(1)),
%          plot.title = element_text(hjust = .5),
%          strip.text.x = element_text(face = "bold", size = rel(1.4)))
% successTOT_plot
% 
% ## again, OA lower than YA
% 
% burkeTOT = statedata %>% filter(!(Question.RESP == "4" & McAcc == "0"))
% 
% ## now we want proportion of correct TOTs as a function of all other unsuccessful retrievals
% 
% 
% 
% @


\end{document}